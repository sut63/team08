// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team08/ent/examinationroom"
	"github.com/sut63/team08/ent/nurse"
	"github.com/sut63/team08/ent/operative"
	"github.com/sut63/team08/ent/operativerecord"
	"github.com/sut63/team08/ent/predicate"
	"github.com/sut63/team08/ent/tool"
)

// OperativerecordUpdate is the builder for updating Operativerecord entities.
type OperativerecordUpdate struct {
	config
	hooks      []Hook
	mutation   *OperativerecordMutation
	predicates []predicate.Operativerecord
}

// Where adds a new predicate for the builder.
func (ou *OperativerecordUpdate) Where(ps ...predicate.Operativerecord) *OperativerecordUpdate {
	ou.predicates = append(ou.predicates, ps...)
	return ou
}

// SetOperativeTime sets the OperativeTime field.
func (ou *OperativerecordUpdate) SetOperativeTime(t time.Time) *OperativerecordUpdate {
	ou.mutation.SetOperativeTime(t)
	return ou
}

// SetNillableOperativeTime sets the OperativeTime field if the given value is not nil.
func (ou *OperativerecordUpdate) SetNillableOperativeTime(t *time.Time) *OperativerecordUpdate {
	if t != nil {
		ou.SetOperativeTime(*t)
	}
	return ou
}

// SetExaminationroomID sets the Examinationroom edge to Examinationroom by id.
func (ou *OperativerecordUpdate) SetExaminationroomID(id int) *OperativerecordUpdate {
	ou.mutation.SetExaminationroomID(id)
	return ou
}

// SetNillableExaminationroomID sets the Examinationroom edge to Examinationroom by id if the given value is not nil.
func (ou *OperativerecordUpdate) SetNillableExaminationroomID(id *int) *OperativerecordUpdate {
	if id != nil {
		ou = ou.SetExaminationroomID(*id)
	}
	return ou
}

// SetExaminationroom sets the Examinationroom edge to Examinationroom.
func (ou *OperativerecordUpdate) SetExaminationroom(e *Examinationroom) *OperativerecordUpdate {
	return ou.SetExaminationroomID(e.ID)
}

// SetNurseID sets the Nurse edge to Nurse by id.
func (ou *OperativerecordUpdate) SetNurseID(id int) *OperativerecordUpdate {
	ou.mutation.SetNurseID(id)
	return ou
}

// SetNillableNurseID sets the Nurse edge to Nurse by id if the given value is not nil.
func (ou *OperativerecordUpdate) SetNillableNurseID(id *int) *OperativerecordUpdate {
	if id != nil {
		ou = ou.SetNurseID(*id)
	}
	return ou
}

// SetNurse sets the Nurse edge to Nurse.
func (ou *OperativerecordUpdate) SetNurse(n *Nurse) *OperativerecordUpdate {
	return ou.SetNurseID(n.ID)
}

// SetOperativeID sets the Operative edge to Operative by id.
func (ou *OperativerecordUpdate) SetOperativeID(id int) *OperativerecordUpdate {
	ou.mutation.SetOperativeID(id)
	return ou
}

// SetNillableOperativeID sets the Operative edge to Operative by id if the given value is not nil.
func (ou *OperativerecordUpdate) SetNillableOperativeID(id *int) *OperativerecordUpdate {
	if id != nil {
		ou = ou.SetOperativeID(*id)
	}
	return ou
}

// SetOperative sets the Operative edge to Operative.
func (ou *OperativerecordUpdate) SetOperative(o *Operative) *OperativerecordUpdate {
	return ou.SetOperativeID(o.ID)
}

// SetToolID sets the Tool edge to Tool by id.
func (ou *OperativerecordUpdate) SetToolID(id int) *OperativerecordUpdate {
	ou.mutation.SetToolID(id)
	return ou
}

// SetNillableToolID sets the Tool edge to Tool by id if the given value is not nil.
func (ou *OperativerecordUpdate) SetNillableToolID(id *int) *OperativerecordUpdate {
	if id != nil {
		ou = ou.SetToolID(*id)
	}
	return ou
}

// SetTool sets the Tool edge to Tool.
func (ou *OperativerecordUpdate) SetTool(t *Tool) *OperativerecordUpdate {
	return ou.SetToolID(t.ID)
}

// Mutation returns the OperativerecordMutation object of the builder.
func (ou *OperativerecordUpdate) Mutation() *OperativerecordMutation {
	return ou.mutation
}

// ClearExaminationroom clears the Examinationroom edge to Examinationroom.
func (ou *OperativerecordUpdate) ClearExaminationroom() *OperativerecordUpdate {
	ou.mutation.ClearExaminationroom()
	return ou
}

// ClearNurse clears the Nurse edge to Nurse.
func (ou *OperativerecordUpdate) ClearNurse() *OperativerecordUpdate {
	ou.mutation.ClearNurse()
	return ou
}

// ClearOperative clears the Operative edge to Operative.
func (ou *OperativerecordUpdate) ClearOperative() *OperativerecordUpdate {
	ou.mutation.ClearOperative()
	return ou
}

// ClearTool clears the Tool edge to Tool.
func (ou *OperativerecordUpdate) ClearTool() *OperativerecordUpdate {
	ou.mutation.ClearTool()
	return ou
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ou *OperativerecordUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(ou.hooks) == 0 {
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OperativerecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OperativerecordUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OperativerecordUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OperativerecordUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OperativerecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   operativerecord.Table,
			Columns: operativerecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: operativerecord.FieldID,
			},
		},
	}
	if ps := ou.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.OperativeTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: operativerecord.FieldOperativeTime,
		})
	}
	if ou.mutation.ExaminationroomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operativerecord.ExaminationroomTable,
			Columns: []string{operativerecord.ExaminationroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: examinationroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ExaminationroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operativerecord.ExaminationroomTable,
			Columns: []string{operativerecord.ExaminationroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: examinationroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.NurseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operativerecord.NurseTable,
			Columns: []string{operativerecord.NurseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nurse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.NurseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operativerecord.NurseTable,
			Columns: []string{operativerecord.NurseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nurse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OperativeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operativerecord.OperativeTable,
			Columns: []string{operativerecord.OperativeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: operative.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OperativeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operativerecord.OperativeTable,
			Columns: []string{operativerecord.OperativeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: operative.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ToolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operativerecord.ToolTable,
			Columns: []string{operativerecord.ToolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tool.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ToolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operativerecord.ToolTable,
			Columns: []string{operativerecord.ToolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tool.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operativerecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OperativerecordUpdateOne is the builder for updating a single Operativerecord entity.
type OperativerecordUpdateOne struct {
	config
	hooks    []Hook
	mutation *OperativerecordMutation
}

// SetOperativeTime sets the OperativeTime field.
func (ouo *OperativerecordUpdateOne) SetOperativeTime(t time.Time) *OperativerecordUpdateOne {
	ouo.mutation.SetOperativeTime(t)
	return ouo
}

// SetNillableOperativeTime sets the OperativeTime field if the given value is not nil.
func (ouo *OperativerecordUpdateOne) SetNillableOperativeTime(t *time.Time) *OperativerecordUpdateOne {
	if t != nil {
		ouo.SetOperativeTime(*t)
	}
	return ouo
}

// SetExaminationroomID sets the Examinationroom edge to Examinationroom by id.
func (ouo *OperativerecordUpdateOne) SetExaminationroomID(id int) *OperativerecordUpdateOne {
	ouo.mutation.SetExaminationroomID(id)
	return ouo
}

// SetNillableExaminationroomID sets the Examinationroom edge to Examinationroom by id if the given value is not nil.
func (ouo *OperativerecordUpdateOne) SetNillableExaminationroomID(id *int) *OperativerecordUpdateOne {
	if id != nil {
		ouo = ouo.SetExaminationroomID(*id)
	}
	return ouo
}

// SetExaminationroom sets the Examinationroom edge to Examinationroom.
func (ouo *OperativerecordUpdateOne) SetExaminationroom(e *Examinationroom) *OperativerecordUpdateOne {
	return ouo.SetExaminationroomID(e.ID)
}

// SetNurseID sets the Nurse edge to Nurse by id.
func (ouo *OperativerecordUpdateOne) SetNurseID(id int) *OperativerecordUpdateOne {
	ouo.mutation.SetNurseID(id)
	return ouo
}

// SetNillableNurseID sets the Nurse edge to Nurse by id if the given value is not nil.
func (ouo *OperativerecordUpdateOne) SetNillableNurseID(id *int) *OperativerecordUpdateOne {
	if id != nil {
		ouo = ouo.SetNurseID(*id)
	}
	return ouo
}

// SetNurse sets the Nurse edge to Nurse.
func (ouo *OperativerecordUpdateOne) SetNurse(n *Nurse) *OperativerecordUpdateOne {
	return ouo.SetNurseID(n.ID)
}

// SetOperativeID sets the Operative edge to Operative by id.
func (ouo *OperativerecordUpdateOne) SetOperativeID(id int) *OperativerecordUpdateOne {
	ouo.mutation.SetOperativeID(id)
	return ouo
}

// SetNillableOperativeID sets the Operative edge to Operative by id if the given value is not nil.
func (ouo *OperativerecordUpdateOne) SetNillableOperativeID(id *int) *OperativerecordUpdateOne {
	if id != nil {
		ouo = ouo.SetOperativeID(*id)
	}
	return ouo
}

// SetOperative sets the Operative edge to Operative.
func (ouo *OperativerecordUpdateOne) SetOperative(o *Operative) *OperativerecordUpdateOne {
	return ouo.SetOperativeID(o.ID)
}

// SetToolID sets the Tool edge to Tool by id.
func (ouo *OperativerecordUpdateOne) SetToolID(id int) *OperativerecordUpdateOne {
	ouo.mutation.SetToolID(id)
	return ouo
}

// SetNillableToolID sets the Tool edge to Tool by id if the given value is not nil.
func (ouo *OperativerecordUpdateOne) SetNillableToolID(id *int) *OperativerecordUpdateOne {
	if id != nil {
		ouo = ouo.SetToolID(*id)
	}
	return ouo
}

// SetTool sets the Tool edge to Tool.
func (ouo *OperativerecordUpdateOne) SetTool(t *Tool) *OperativerecordUpdateOne {
	return ouo.SetToolID(t.ID)
}

// Mutation returns the OperativerecordMutation object of the builder.
func (ouo *OperativerecordUpdateOne) Mutation() *OperativerecordMutation {
	return ouo.mutation
}

// ClearExaminationroom clears the Examinationroom edge to Examinationroom.
func (ouo *OperativerecordUpdateOne) ClearExaminationroom() *OperativerecordUpdateOne {
	ouo.mutation.ClearExaminationroom()
	return ouo
}

// ClearNurse clears the Nurse edge to Nurse.
func (ouo *OperativerecordUpdateOne) ClearNurse() *OperativerecordUpdateOne {
	ouo.mutation.ClearNurse()
	return ouo
}

// ClearOperative clears the Operative edge to Operative.
func (ouo *OperativerecordUpdateOne) ClearOperative() *OperativerecordUpdateOne {
	ouo.mutation.ClearOperative()
	return ouo
}

// ClearTool clears the Tool edge to Tool.
func (ouo *OperativerecordUpdateOne) ClearTool() *OperativerecordUpdateOne {
	ouo.mutation.ClearTool()
	return ouo
}

// Save executes the query and returns the updated entity.
func (ouo *OperativerecordUpdateOne) Save(ctx context.Context) (*Operativerecord, error) {

	var (
		err  error
		node *Operativerecord
	)
	if len(ouo.hooks) == 0 {
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OperativerecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			mut = ouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OperativerecordUpdateOne) SaveX(ctx context.Context) *Operativerecord {
	o, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return o
}

// Exec executes the query on the entity.
func (ouo *OperativerecordUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OperativerecordUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OperativerecordUpdateOne) sqlSave(ctx context.Context) (o *Operativerecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   operativerecord.Table,
			Columns: operativerecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: operativerecord.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Operativerecord.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ouo.mutation.OperativeTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: operativerecord.FieldOperativeTime,
		})
	}
	if ouo.mutation.ExaminationroomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operativerecord.ExaminationroomTable,
			Columns: []string{operativerecord.ExaminationroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: examinationroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ExaminationroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operativerecord.ExaminationroomTable,
			Columns: []string{operativerecord.ExaminationroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: examinationroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.NurseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operativerecord.NurseTable,
			Columns: []string{operativerecord.NurseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nurse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.NurseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operativerecord.NurseTable,
			Columns: []string{operativerecord.NurseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nurse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OperativeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operativerecord.OperativeTable,
			Columns: []string{operativerecord.OperativeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: operative.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OperativeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operativerecord.OperativeTable,
			Columns: []string{operativerecord.OperativeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: operative.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ToolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operativerecord.ToolTable,
			Columns: []string{operativerecord.ToolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tool.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ToolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operativerecord.ToolTable,
			Columns: []string{operativerecord.ToolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tool.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	o = &Operativerecord{config: ouo.config}
	_spec.Assign = o.assignValues
	_spec.ScanValues = o.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operativerecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return o, nil
}
