// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team08/ent/nurse"
	"github.com/sut63/team08/ent/patient"
	"github.com/sut63/team08/ent/rent"
	"github.com/sut63/team08/ent/room"
)

// Rent is the model entity for the Rent schema.
type Rent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AddedTime holds the value of the "added_time" field.
	AddedTime time.Time `json:"added_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RentQuery when eager-loading is set.
	Edges      RentEdges `json:"edges"`
	nurse_id   *int
	Patient_id *int
	room_id    *int
}

// RentEdges holds the relations/edges for other nodes in the graph.
type RentEdges struct {
	// Room holds the value of the room edge.
	Room *Room
	// Patient holds the value of the patient edge.
	Patient *Patient
	// Nurse holds the value of the nurse edge.
	Nurse *Nurse
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RentEdges) RoomOrErr() (*Room, error) {
	if e.loadedTypes[0] {
		if e.Room == nil {
			// The edge room was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: room.Label}
		}
		return e.Room, nil
	}
	return nil, &NotLoadedError{edge: "room"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RentEdges) PatientOrErr() (*Patient, error) {
	if e.loadedTypes[1] {
		if e.Patient == nil {
			// The edge patient was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// NurseOrErr returns the Nurse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RentEdges) NurseOrErr() (*Nurse, error) {
	if e.loadedTypes[2] {
		if e.Nurse == nil {
			// The edge nurse was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: nurse.Label}
		}
		return e.Nurse, nil
	}
	return nil, &NotLoadedError{edge: "nurse"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rent) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // added_time
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Rent) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // nurse_id
		&sql.NullInt64{}, // Patient_id
		&sql.NullInt64{}, // room_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rent fields.
func (r *Rent) assignValues(values ...interface{}) error {
	if m, n := len(values), len(rent.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field added_time", values[0])
	} else if value.Valid {
		r.AddedTime = value.Time
	}
	values = values[1:]
	if len(values) == len(rent.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field nurse_id", value)
		} else if value.Valid {
			r.nurse_id = new(int)
			*r.nurse_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Patient_id", value)
		} else if value.Valid {
			r.Patient_id = new(int)
			*r.Patient_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field room_id", value)
		} else if value.Valid {
			r.room_id = new(int)
			*r.room_id = int(value.Int64)
		}
	}
	return nil
}

// QueryRoom queries the room edge of the Rent.
func (r *Rent) QueryRoom() *RoomQuery {
	return (&RentClient{config: r.config}).QueryRoom(r)
}

// QueryPatient queries the patient edge of the Rent.
func (r *Rent) QueryPatient() *PatientQuery {
	return (&RentClient{config: r.config}).QueryPatient(r)
}

// QueryNurse queries the nurse edge of the Rent.
func (r *Rent) QueryNurse() *NurseQuery {
	return (&RentClient{config: r.config}).QueryNurse(r)
}

// Update returns a builder for updating this Rent.
// Note that, you need to call Rent.Unwrap() before calling this method, if this Rent
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rent) Update() *RentUpdateOne {
	return (&RentClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Rent) Unwrap() *Rent {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rent is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rent) String() string {
	var builder strings.Builder
	builder.WriteString("Rent(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", added_time=")
	builder.WriteString(r.AddedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Rents is a parsable slice of Rent.
type Rents []*Rent

func (r Rents) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
