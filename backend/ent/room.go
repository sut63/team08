// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team08/ent/rent"
	"github.com/sut63/team08/ent/room"
	"github.com/sut63/team08/ent/roomtype"
)

// Room is the model entity for the Room schema.
type Room struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Building holds the value of the "building" field.
	Building int `json:"building,omitempty"`
	// Floor holds the value of the "floor" field.
	Floor int `json:"floor,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoomQuery when eager-loading is set.
	Edges       RoomEdges `json:"edges"`
	roomtype_id *int
}

// RoomEdges holds the relations/edges for other nodes in the graph.
type RoomEdges struct {
	// Rents holds the value of the rents edge.
	Rents *Rent
	// Roomtype holds the value of the roomtype edge.
	Roomtype *Roomtype
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RentsOrErr returns the Rents value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomEdges) RentsOrErr() (*Rent, error) {
	if e.loadedTypes[0] {
		if e.Rents == nil {
			// The edge rents was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: rent.Label}
		}
		return e.Rents, nil
	}
	return nil, &NotLoadedError{edge: "rents"}
}

// RoomtypeOrErr returns the Roomtype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomEdges) RoomtypeOrErr() (*Roomtype, error) {
	if e.loadedTypes[1] {
		if e.Roomtype == nil {
			// The edge roomtype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: roomtype.Label}
		}
		return e.Roomtype, nil
	}
	return nil, &NotLoadedError{edge: "roomtype"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Room) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullInt64{},  // building
		&sql.NullInt64{},  // floor
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Room) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // roomtype_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Room fields.
func (r *Room) assignValues(values ...interface{}) error {
	if m, n := len(values), len(room.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		r.Name = value.String
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field building", values[1])
	} else if value.Valid {
		r.Building = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field floor", values[2])
	} else if value.Valid {
		r.Floor = int(value.Int64)
	}
	values = values[3:]
	if len(values) == len(room.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field roomtype_id", value)
		} else if value.Valid {
			r.roomtype_id = new(int)
			*r.roomtype_id = int(value.Int64)
		}
	}
	return nil
}

// QueryRents queries the rents edge of the Room.
func (r *Room) QueryRents() *RentQuery {
	return (&RoomClient{config: r.config}).QueryRents(r)
}

// QueryRoomtype queries the roomtype edge of the Room.
func (r *Room) QueryRoomtype() *RoomtypeQuery {
	return (&RoomClient{config: r.config}).QueryRoomtype(r)
}

// Update returns a builder for updating this Room.
// Note that, you need to call Room.Unwrap() before calling this method, if this Room
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Room) Update() *RoomUpdateOne {
	return (&RoomClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Room) Unwrap() *Room {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Room is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Room) String() string {
	var builder strings.Builder
	builder.WriteString("Room(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", name=")
	builder.WriteString(r.Name)
	builder.WriteString(", building=")
	builder.WriteString(fmt.Sprintf("%v", r.Building))
	builder.WriteString(", floor=")
	builder.WriteString(fmt.Sprintf("%v", r.Floor))
	builder.WriteByte(')')
	return builder.String()
}

// Rooms is a parsable slice of Room.
type Rooms []*Room

func (r Rooms) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
