// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team08/ent/examinationroom"
	"github.com/sut63/team08/ent/nurse"
	"github.com/sut63/team08/ent/operative"
	"github.com/sut63/team08/ent/operativerecord"
	"github.com/sut63/team08/ent/tool"
)

// Operativerecord is the model entity for the Operativerecord schema.
type Operativerecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OperativeTime holds the value of the "OperativeTime" field.
	OperativeTime time.Time `json:"OperativeTime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OperativerecordQuery when eager-loading is set.
	Edges              OperativerecordEdges `json:"edges"`
	Examinationroom_id *int
	Nurse_id           *int
	Operative_id       *int
	Tool_id            *int
}

// OperativerecordEdges holds the relations/edges for other nodes in the graph.
type OperativerecordEdges struct {
	// Examinationroom holds the value of the Examinationroom edge.
	Examinationroom *Examinationroom
	// Nurse holds the value of the Nurse edge.
	Nurse *Nurse
	// Operative holds the value of the Operative edge.
	Operative *Operative
	// Tool holds the value of the Tool edge.
	Tool *Tool
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ExaminationroomOrErr returns the Examinationroom value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OperativerecordEdges) ExaminationroomOrErr() (*Examinationroom, error) {
	if e.loadedTypes[0] {
		if e.Examinationroom == nil {
			// The edge Examinationroom was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: examinationroom.Label}
		}
		return e.Examinationroom, nil
	}
	return nil, &NotLoadedError{edge: "Examinationroom"}
}

// NurseOrErr returns the Nurse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OperativerecordEdges) NurseOrErr() (*Nurse, error) {
	if e.loadedTypes[1] {
		if e.Nurse == nil {
			// The edge Nurse was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: nurse.Label}
		}
		return e.Nurse, nil
	}
	return nil, &NotLoadedError{edge: "Nurse"}
}

// OperativeOrErr returns the Operative value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OperativerecordEdges) OperativeOrErr() (*Operative, error) {
	if e.loadedTypes[2] {
		if e.Operative == nil {
			// The edge Operative was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: operative.Label}
		}
		return e.Operative, nil
	}
	return nil, &NotLoadedError{edge: "Operative"}
}

// ToolOrErr returns the Tool value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OperativerecordEdges) ToolOrErr() (*Tool, error) {
	if e.loadedTypes[3] {
		if e.Tool == nil {
			// The edge Tool was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tool.Label}
		}
		return e.Tool, nil
	}
	return nil, &NotLoadedError{edge: "Tool"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Operativerecord) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // OperativeTime
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Operativerecord) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // Examinationroom_id
		&sql.NullInt64{}, // Nurse_id
		&sql.NullInt64{}, // Operative_id
		&sql.NullInt64{}, // Tool_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Operativerecord fields.
func (o *Operativerecord) assignValues(values ...interface{}) error {
	if m, n := len(values), len(operativerecord.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	o.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field OperativeTime", values[0])
	} else if value.Valid {
		o.OperativeTime = value.Time
	}
	values = values[1:]
	if len(values) == len(operativerecord.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Examinationroom_id", value)
		} else if value.Valid {
			o.Examinationroom_id = new(int)
			*o.Examinationroom_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Nurse_id", value)
		} else if value.Valid {
			o.Nurse_id = new(int)
			*o.Nurse_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Operative_id", value)
		} else if value.Valid {
			o.Operative_id = new(int)
			*o.Operative_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Tool_id", value)
		} else if value.Valid {
			o.Tool_id = new(int)
			*o.Tool_id = int(value.Int64)
		}
	}
	return nil
}

// QueryExaminationroom queries the Examinationroom edge of the Operativerecord.
func (o *Operativerecord) QueryExaminationroom() *ExaminationroomQuery {
	return (&OperativerecordClient{config: o.config}).QueryExaminationroom(o)
}

// QueryNurse queries the Nurse edge of the Operativerecord.
func (o *Operativerecord) QueryNurse() *NurseQuery {
	return (&OperativerecordClient{config: o.config}).QueryNurse(o)
}

// QueryOperative queries the Operative edge of the Operativerecord.
func (o *Operativerecord) QueryOperative() *OperativeQuery {
	return (&OperativerecordClient{config: o.config}).QueryOperative(o)
}

// QueryTool queries the Tool edge of the Operativerecord.
func (o *Operativerecord) QueryTool() *ToolQuery {
	return (&OperativerecordClient{config: o.config}).QueryTool(o)
}

// Update returns a builder for updating this Operativerecord.
// Note that, you need to call Operativerecord.Unwrap() before calling this method, if this Operativerecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Operativerecord) Update() *OperativerecordUpdateOne {
	return (&OperativerecordClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (o *Operativerecord) Unwrap() *Operativerecord {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Operativerecord is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Operativerecord) String() string {
	var builder strings.Builder
	builder.WriteString("Operativerecord(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", OperativeTime=")
	builder.WriteString(o.OperativeTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Operativerecords is a parsable slice of Operativerecord.
type Operativerecords []*Operativerecord

func (o Operativerecords) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
