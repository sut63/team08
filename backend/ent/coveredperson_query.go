// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team08/ent/certificate"
	"github.com/sut63/team08/ent/coveredperson"
	"github.com/sut63/team08/ent/fund"
	"github.com/sut63/team08/ent/patient"
	"github.com/sut63/team08/ent/predicate"
	"github.com/sut63/team08/ent/schemetype"
)

// CoveredPersonQuery is the builder for querying CoveredPerson entities.
type CoveredPersonQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.CoveredPerson
	// eager-loading edges.
	withPatient     *PatientQuery
	withSchemeType  *SchemeTypeQuery
	withFund        *FundQuery
	withCertificate *CertificateQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (cpq *CoveredPersonQuery) Where(ps ...predicate.CoveredPerson) *CoveredPersonQuery {
	cpq.predicates = append(cpq.predicates, ps...)
	return cpq
}

// Limit adds a limit step to the query.
func (cpq *CoveredPersonQuery) Limit(limit int) *CoveredPersonQuery {
	cpq.limit = &limit
	return cpq
}

// Offset adds an offset step to the query.
func (cpq *CoveredPersonQuery) Offset(offset int) *CoveredPersonQuery {
	cpq.offset = &offset
	return cpq
}

// Order adds an order step to the query.
func (cpq *CoveredPersonQuery) Order(o ...OrderFunc) *CoveredPersonQuery {
	cpq.order = append(cpq.order, o...)
	return cpq
}

// QueryPatient chains the current query on the Patient edge.
func (cpq *CoveredPersonQuery) QueryPatient() *PatientQuery {
	query := &PatientQuery{config: cpq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(coveredperson.Table, coveredperson.FieldID, cpq.sqlQuery()),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coveredperson.PatientTable, coveredperson.PatientColumn),
		)
		fromU = sqlgraph.SetNeighbors(cpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySchemeType chains the current query on the SchemeType edge.
func (cpq *CoveredPersonQuery) QuerySchemeType() *SchemeTypeQuery {
	query := &SchemeTypeQuery{config: cpq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(coveredperson.Table, coveredperson.FieldID, cpq.sqlQuery()),
			sqlgraph.To(schemetype.Table, schemetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coveredperson.SchemeTypeTable, coveredperson.SchemeTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(cpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFund chains the current query on the Fund edge.
func (cpq *CoveredPersonQuery) QueryFund() *FundQuery {
	query := &FundQuery{config: cpq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(coveredperson.Table, coveredperson.FieldID, cpq.sqlQuery()),
			sqlgraph.To(fund.Table, fund.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coveredperson.FundTable, coveredperson.FundColumn),
		)
		fromU = sqlgraph.SetNeighbors(cpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCertificate chains the current query on the Certificate edge.
func (cpq *CoveredPersonQuery) QueryCertificate() *CertificateQuery {
	query := &CertificateQuery{config: cpq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(coveredperson.Table, coveredperson.FieldID, cpq.sqlQuery()),
			sqlgraph.To(certificate.Table, certificate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coveredperson.CertificateTable, coveredperson.CertificateColumn),
		)
		fromU = sqlgraph.SetNeighbors(cpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CoveredPerson entity in the query. Returns *NotFoundError when no coveredperson was found.
func (cpq *CoveredPersonQuery) First(ctx context.Context) (*CoveredPerson, error) {
	cps, err := cpq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(cps) == 0 {
		return nil, &NotFoundError{coveredperson.Label}
	}
	return cps[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cpq *CoveredPersonQuery) FirstX(ctx context.Context) *CoveredPerson {
	cp, err := cpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return cp
}

// FirstID returns the first CoveredPerson id in the query. Returns *NotFoundError when no id was found.
func (cpq *CoveredPersonQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cpq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{coveredperson.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (cpq *CoveredPersonQuery) FirstXID(ctx context.Context) int {
	id, err := cpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only CoveredPerson entity in the query, returns an error if not exactly one entity was returned.
func (cpq *CoveredPersonQuery) Only(ctx context.Context) (*CoveredPerson, error) {
	cps, err := cpq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(cps) {
	case 1:
		return cps[0], nil
	case 0:
		return nil, &NotFoundError{coveredperson.Label}
	default:
		return nil, &NotSingularError{coveredperson.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cpq *CoveredPersonQuery) OnlyX(ctx context.Context) *CoveredPerson {
	cp, err := cpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return cp
}

// OnlyID returns the only CoveredPerson id in the query, returns an error if not exactly one id was returned.
func (cpq *CoveredPersonQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cpq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{coveredperson.Label}
	default:
		err = &NotSingularError{coveredperson.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cpq *CoveredPersonQuery) OnlyIDX(ctx context.Context) int {
	id, err := cpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CoveredPersons.
func (cpq *CoveredPersonQuery) All(ctx context.Context) ([]*CoveredPerson, error) {
	if err := cpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return cpq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (cpq *CoveredPersonQuery) AllX(ctx context.Context) []*CoveredPerson {
	cps, err := cpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return cps
}

// IDs executes the query and returns a list of CoveredPerson ids.
func (cpq *CoveredPersonQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := cpq.Select(coveredperson.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cpq *CoveredPersonQuery) IDsX(ctx context.Context) []int {
	ids, err := cpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cpq *CoveredPersonQuery) Count(ctx context.Context) (int, error) {
	if err := cpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return cpq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (cpq *CoveredPersonQuery) CountX(ctx context.Context) int {
	count, err := cpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cpq *CoveredPersonQuery) Exist(ctx context.Context) (bool, error) {
	if err := cpq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return cpq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (cpq *CoveredPersonQuery) ExistX(ctx context.Context) bool {
	exist, err := cpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cpq *CoveredPersonQuery) Clone() *CoveredPersonQuery {
	return &CoveredPersonQuery{
		config:     cpq.config,
		limit:      cpq.limit,
		offset:     cpq.offset,
		order:      append([]OrderFunc{}, cpq.order...),
		unique:     append([]string{}, cpq.unique...),
		predicates: append([]predicate.CoveredPerson{}, cpq.predicates...),
		// clone intermediate query.
		sql:  cpq.sql.Clone(),
		path: cpq.path,
	}
}

//  WithPatient tells the query-builder to eager-loads the nodes that are connected to
// the "Patient" edge. The optional arguments used to configure the query builder of the edge.
func (cpq *CoveredPersonQuery) WithPatient(opts ...func(*PatientQuery)) *CoveredPersonQuery {
	query := &PatientQuery{config: cpq.config}
	for _, opt := range opts {
		opt(query)
	}
	cpq.withPatient = query
	return cpq
}

//  WithSchemeType tells the query-builder to eager-loads the nodes that are connected to
// the "SchemeType" edge. The optional arguments used to configure the query builder of the edge.
func (cpq *CoveredPersonQuery) WithSchemeType(opts ...func(*SchemeTypeQuery)) *CoveredPersonQuery {
	query := &SchemeTypeQuery{config: cpq.config}
	for _, opt := range opts {
		opt(query)
	}
	cpq.withSchemeType = query
	return cpq
}

//  WithFund tells the query-builder to eager-loads the nodes that are connected to
// the "Fund" edge. The optional arguments used to configure the query builder of the edge.
func (cpq *CoveredPersonQuery) WithFund(opts ...func(*FundQuery)) *CoveredPersonQuery {
	query := &FundQuery{config: cpq.config}
	for _, opt := range opts {
		opt(query)
	}
	cpq.withFund = query
	return cpq
}

//  WithCertificate tells the query-builder to eager-loads the nodes that are connected to
// the "Certificate" edge. The optional arguments used to configure the query builder of the edge.
func (cpq *CoveredPersonQuery) WithCertificate(opts ...func(*CertificateQuery)) *CoveredPersonQuery {
	query := &CertificateQuery{config: cpq.config}
	for _, opt := range opts {
		opt(query)
	}
	cpq.withCertificate = query
	return cpq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (cpq *CoveredPersonQuery) GroupBy(field string, fields ...string) *CoveredPersonGroupBy {
	group := &CoveredPersonGroupBy{config: cpq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cpq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
func (cpq *CoveredPersonQuery) Select(field string, fields ...string) *CoveredPersonSelect {
	selector := &CoveredPersonSelect{config: cpq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cpq.sqlQuery(), nil
	}
	return selector
}

func (cpq *CoveredPersonQuery) prepareQuery(ctx context.Context) error {
	if cpq.path != nil {
		prev, err := cpq.path(ctx)
		if err != nil {
			return err
		}
		cpq.sql = prev
	}
	return nil
}

func (cpq *CoveredPersonQuery) sqlAll(ctx context.Context) ([]*CoveredPerson, error) {
	var (
		nodes       = []*CoveredPerson{}
		withFKs     = cpq.withFKs
		_spec       = cpq.querySpec()
		loadedTypes = [4]bool{
			cpq.withPatient != nil,
			cpq.withSchemeType != nil,
			cpq.withFund != nil,
			cpq.withCertificate != nil,
		}
	)
	if cpq.withPatient != nil || cpq.withSchemeType != nil || cpq.withFund != nil || cpq.withCertificate != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, coveredperson.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &CoveredPerson{config: cpq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, cpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := cpq.withPatient; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*CoveredPerson)
		for i := range nodes {
			if fk := nodes[i].Patient_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(patient.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "Patient_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Patient = n
			}
		}
	}

	if query := cpq.withSchemeType; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*CoveredPerson)
		for i := range nodes {
			if fk := nodes[i].SchemeType_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(schemetype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "SchemeType_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.SchemeType = n
			}
		}
	}

	if query := cpq.withFund; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*CoveredPerson)
		for i := range nodes {
			if fk := nodes[i].Fund_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(fund.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "Fund_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Fund = n
			}
		}
	}

	if query := cpq.withCertificate; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*CoveredPerson)
		for i := range nodes {
			if fk := nodes[i].Certificate_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(certificate.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "Certificate_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Certificate = n
			}
		}
	}

	return nodes, nil
}

func (cpq *CoveredPersonQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cpq.querySpec()
	return sqlgraph.CountNodes(ctx, cpq.driver, _spec)
}

func (cpq *CoveredPersonQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := cpq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (cpq *CoveredPersonQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coveredperson.Table,
			Columns: coveredperson.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: coveredperson.FieldID,
			},
		},
		From:   cpq.sql,
		Unique: true,
	}
	if ps := cpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cpq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cpq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cpq *CoveredPersonQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(cpq.driver.Dialect())
	t1 := builder.Table(coveredperson.Table)
	selector := builder.Select(t1.Columns(coveredperson.Columns...)...).From(t1)
	if cpq.sql != nil {
		selector = cpq.sql
		selector.Select(selector.Columns(coveredperson.Columns...)...)
	}
	for _, p := range cpq.predicates {
		p(selector)
	}
	for _, p := range cpq.order {
		p(selector)
	}
	if offset := cpq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cpq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CoveredPersonGroupBy is the builder for group-by CoveredPerson entities.
type CoveredPersonGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cpgb *CoveredPersonGroupBy) Aggregate(fns ...AggregateFunc) *CoveredPersonGroupBy {
	cpgb.fns = append(cpgb.fns, fns...)
	return cpgb
}

// Scan applies the group-by query and scan the result into the given value.
func (cpgb *CoveredPersonGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := cpgb.path(ctx)
	if err != nil {
		return err
	}
	cpgb.sql = query
	return cpgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cpgb *CoveredPersonGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := cpgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (cpgb *CoveredPersonGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(cpgb.fields) > 1 {
		return nil, errors.New("ent: CoveredPersonGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := cpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cpgb *CoveredPersonGroupBy) StringsX(ctx context.Context) []string {
	v, err := cpgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (cpgb *CoveredPersonGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cpgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{coveredperson.Label}
	default:
		err = fmt.Errorf("ent: CoveredPersonGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cpgb *CoveredPersonGroupBy) StringX(ctx context.Context) string {
	v, err := cpgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (cpgb *CoveredPersonGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(cpgb.fields) > 1 {
		return nil, errors.New("ent: CoveredPersonGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := cpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cpgb *CoveredPersonGroupBy) IntsX(ctx context.Context) []int {
	v, err := cpgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (cpgb *CoveredPersonGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cpgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{coveredperson.Label}
	default:
		err = fmt.Errorf("ent: CoveredPersonGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cpgb *CoveredPersonGroupBy) IntX(ctx context.Context) int {
	v, err := cpgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (cpgb *CoveredPersonGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(cpgb.fields) > 1 {
		return nil, errors.New("ent: CoveredPersonGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := cpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cpgb *CoveredPersonGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := cpgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (cpgb *CoveredPersonGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cpgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{coveredperson.Label}
	default:
		err = fmt.Errorf("ent: CoveredPersonGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cpgb *CoveredPersonGroupBy) Float64X(ctx context.Context) float64 {
	v, err := cpgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (cpgb *CoveredPersonGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(cpgb.fields) > 1 {
		return nil, errors.New("ent: CoveredPersonGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := cpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cpgb *CoveredPersonGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := cpgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (cpgb *CoveredPersonGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cpgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{coveredperson.Label}
	default:
		err = fmt.Errorf("ent: CoveredPersonGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cpgb *CoveredPersonGroupBy) BoolX(ctx context.Context) bool {
	v, err := cpgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cpgb *CoveredPersonGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := cpgb.sqlQuery().Query()
	if err := cpgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cpgb *CoveredPersonGroupBy) sqlQuery() *sql.Selector {
	selector := cpgb.sql
	columns := make([]string, 0, len(cpgb.fields)+len(cpgb.fns))
	columns = append(columns, cpgb.fields...)
	for _, fn := range cpgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(cpgb.fields...)
}

// CoveredPersonSelect is the builder for select fields of CoveredPerson entities.
type CoveredPersonSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (cps *CoveredPersonSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := cps.path(ctx)
	if err != nil {
		return err
	}
	cps.sql = query
	return cps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cps *CoveredPersonSelect) ScanX(ctx context.Context, v interface{}) {
	if err := cps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (cps *CoveredPersonSelect) Strings(ctx context.Context) ([]string, error) {
	if len(cps.fields) > 1 {
		return nil, errors.New("ent: CoveredPersonSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := cps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cps *CoveredPersonSelect) StringsX(ctx context.Context) []string {
	v, err := cps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (cps *CoveredPersonSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cps.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{coveredperson.Label}
	default:
		err = fmt.Errorf("ent: CoveredPersonSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cps *CoveredPersonSelect) StringX(ctx context.Context) string {
	v, err := cps.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (cps *CoveredPersonSelect) Ints(ctx context.Context) ([]int, error) {
	if len(cps.fields) > 1 {
		return nil, errors.New("ent: CoveredPersonSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := cps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cps *CoveredPersonSelect) IntsX(ctx context.Context) []int {
	v, err := cps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (cps *CoveredPersonSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cps.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{coveredperson.Label}
	default:
		err = fmt.Errorf("ent: CoveredPersonSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cps *CoveredPersonSelect) IntX(ctx context.Context) int {
	v, err := cps.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (cps *CoveredPersonSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(cps.fields) > 1 {
		return nil, errors.New("ent: CoveredPersonSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := cps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cps *CoveredPersonSelect) Float64sX(ctx context.Context) []float64 {
	v, err := cps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (cps *CoveredPersonSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cps.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{coveredperson.Label}
	default:
		err = fmt.Errorf("ent: CoveredPersonSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cps *CoveredPersonSelect) Float64X(ctx context.Context) float64 {
	v, err := cps.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (cps *CoveredPersonSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(cps.fields) > 1 {
		return nil, errors.New("ent: CoveredPersonSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := cps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cps *CoveredPersonSelect) BoolsX(ctx context.Context) []bool {
	v, err := cps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (cps *CoveredPersonSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cps.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{coveredperson.Label}
	default:
		err = fmt.Errorf("ent: CoveredPersonSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cps *CoveredPersonSelect) BoolX(ctx context.Context) bool {
	v, err := cps.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cps *CoveredPersonSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := cps.sqlQuery().Query()
	if err := cps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cps *CoveredPersonSelect) sqlQuery() sql.Querier {
	selector := cps.sql
	selector.Select(selector.Columns(cps.fields...)...)
	return selector
}
