// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team08/ent/medical"
)

// MedicalCreate is the builder for creating a Medical entity.
type MedicalCreate struct {
	config
	mutation *MedicalMutation
	hooks    []Hook
}

// SetMedicalName sets the Medical_Name field.
func (mc *MedicalCreate) SetMedicalName(s string) *MedicalCreate {
	mc.mutation.SetMedicalName(s)
	return mc
}

// SetMedicalEmail sets the Medical_Email field.
func (mc *MedicalCreate) SetMedicalEmail(s string) *MedicalCreate {
	mc.mutation.SetMedicalEmail(s)
	return mc
}

// SetMedicalPassword sets the Medical_Password field.
func (mc *MedicalCreate) SetMedicalPassword(s string) *MedicalCreate {
	mc.mutation.SetMedicalPassword(s)
	return mc
}

// SetMedicalTel sets the Medical_Tel field.
func (mc *MedicalCreate) SetMedicalTel(s string) *MedicalCreate {
	mc.mutation.SetMedicalTel(s)
	return mc
}

// Mutation returns the MedicalMutation object of the builder.
func (mc *MedicalCreate) Mutation() *MedicalMutation {
	return mc.mutation
}

// Save creates the Medical in the database.
func (mc *MedicalCreate) Save(ctx context.Context) (*Medical, error) {
	if _, ok := mc.mutation.MedicalName(); !ok {
		return nil, &ValidationError{Name: "Medical_Name", err: errors.New("ent: missing required field \"Medical_Name\"")}
	}
	if v, ok := mc.mutation.MedicalName(); ok {
		if err := medical.MedicalNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "Medical_Name", err: fmt.Errorf("ent: validator failed for field \"Medical_Name\": %w", err)}
		}
	}
	if _, ok := mc.mutation.MedicalEmail(); !ok {
		return nil, &ValidationError{Name: "Medical_Email", err: errors.New("ent: missing required field \"Medical_Email\"")}
	}
	if v, ok := mc.mutation.MedicalEmail(); ok {
		if err := medical.MedicalEmailValidator(v); err != nil {
			return nil, &ValidationError{Name: "Medical_Email", err: fmt.Errorf("ent: validator failed for field \"Medical_Email\": %w", err)}
		}
	}
	if _, ok := mc.mutation.MedicalPassword(); !ok {
		return nil, &ValidationError{Name: "Medical_Password", err: errors.New("ent: missing required field \"Medical_Password\"")}
	}
	if v, ok := mc.mutation.MedicalPassword(); ok {
		if err := medical.MedicalPasswordValidator(v); err != nil {
			return nil, &ValidationError{Name: "Medical_Password", err: fmt.Errorf("ent: validator failed for field \"Medical_Password\": %w", err)}
		}
	}
	if _, ok := mc.mutation.MedicalTel(); !ok {
		return nil, &ValidationError{Name: "Medical_Tel", err: errors.New("ent: missing required field \"Medical_Tel\"")}
	}
	if v, ok := mc.mutation.MedicalTel(); ok {
		if err := medical.MedicalTelValidator(v); err != nil {
			return nil, &ValidationError{Name: "Medical_Tel", err: fmt.Errorf("ent: validator failed for field \"Medical_Tel\": %w", err)}
		}
	}
	var (
		err  error
		node *Medical
	)
	if len(mc.hooks) == 0 {
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MedicalCreate) SaveX(ctx context.Context) *Medical {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mc *MedicalCreate) sqlSave(ctx context.Context) (*Medical, error) {
	m, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	m.ID = int(id)
	return m, nil
}

func (mc *MedicalCreate) createSpec() (*Medical, *sqlgraph.CreateSpec) {
	var (
		m     = &Medical{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: medical.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: medical.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.MedicalName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medical.FieldMedicalName,
		})
		m.MedicalName = value
	}
	if value, ok := mc.mutation.MedicalEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medical.FieldMedicalEmail,
		})
		m.MedicalEmail = value
	}
	if value, ok := mc.mutation.MedicalPassword(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medical.FieldMedicalPassword,
		})
		m.MedicalPassword = value
	}
	if value, ok := mc.mutation.MedicalTel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medical.FieldMedicalTel,
		})
		m.MedicalTel = value
	}
	return m, _spec
}
