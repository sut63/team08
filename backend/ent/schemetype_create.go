// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team08/ent/coveredperson"
	"github.com/sut63/team08/ent/schemetype"
)

// SchemeTypeCreate is the builder for creating a SchemeType entity.
type SchemeTypeCreate struct {
	config
	mutation *SchemeTypeMutation
	hooks    []Hook
}

// SetSchemeTypeName sets the SchemeType_Name field.
func (stc *SchemeTypeCreate) SetSchemeTypeName(s string) *SchemeTypeCreate {
	stc.mutation.SetSchemeTypeName(s)
	return stc
}

// AddSchemeTypeCoveredPersonIDs adds the SchemeType_CoveredPerson edge to CoveredPerson by ids.
func (stc *SchemeTypeCreate) AddSchemeTypeCoveredPersonIDs(ids ...int) *SchemeTypeCreate {
	stc.mutation.AddSchemeTypeCoveredPersonIDs(ids...)
	return stc
}

// AddSchemeTypeCoveredPerson adds the SchemeType_CoveredPerson edges to CoveredPerson.
func (stc *SchemeTypeCreate) AddSchemeTypeCoveredPerson(c ...*CoveredPerson) *SchemeTypeCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return stc.AddSchemeTypeCoveredPersonIDs(ids...)
}

// Mutation returns the SchemeTypeMutation object of the builder.
func (stc *SchemeTypeCreate) Mutation() *SchemeTypeMutation {
	return stc.mutation
}

// Save creates the SchemeType in the database.
func (stc *SchemeTypeCreate) Save(ctx context.Context) (*SchemeType, error) {
	if _, ok := stc.mutation.SchemeTypeName(); !ok {
		return nil, &ValidationError{Name: "SchemeType_Name", err: errors.New("ent: missing required field \"SchemeType_Name\"")}
	}
	if v, ok := stc.mutation.SchemeTypeName(); ok {
		if err := schemetype.SchemeTypeNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "SchemeType_Name", err: fmt.Errorf("ent: validator failed for field \"SchemeType_Name\": %w", err)}
		}
	}
	var (
		err  error
		node *SchemeType
	)
	if len(stc.hooks) == 0 {
		node, err = stc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SchemeTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stc.mutation = mutation
			node, err = stc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stc.hooks) - 1; i >= 0; i-- {
			mut = stc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (stc *SchemeTypeCreate) SaveX(ctx context.Context) *SchemeType {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (stc *SchemeTypeCreate) sqlSave(ctx context.Context) (*SchemeType, error) {
	st, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	st.ID = int(id)
	return st, nil
}

func (stc *SchemeTypeCreate) createSpec() (*SchemeType, *sqlgraph.CreateSpec) {
	var (
		st    = &SchemeType{config: stc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: schemetype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: schemetype.FieldID,
			},
		}
	)
	if value, ok := stc.mutation.SchemeTypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: schemetype.FieldSchemeTypeName,
		})
		st.SchemeTypeName = value
	}
	if nodes := stc.mutation.SchemeTypeCoveredPersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schemetype.SchemeTypeCoveredPersonTable,
			Columns: []string{schemetype.SchemeTypeCoveredPersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coveredperson.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return st, _spec
}
