// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team08/ent/schemetype"
)

// SchemeType is the model entity for the SchemeType schema.
type SchemeType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SchemeTypeName holds the value of the "SchemeType_Name" field.
	SchemeTypeName string `json:"SchemeType_Name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SchemeTypeQuery when eager-loading is set.
	Edges SchemeTypeEdges `json:"edges"`
}

// SchemeTypeEdges holds the relations/edges for other nodes in the graph.
type SchemeTypeEdges struct {
	// SchemeTypeCoveredPerson holds the value of the SchemeType_CoveredPerson edge.
	SchemeTypeCoveredPerson []*CoveredPerson
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SchemeTypeCoveredPersonOrErr returns the SchemeTypeCoveredPerson value or an error if the edge
// was not loaded in eager-loading.
func (e SchemeTypeEdges) SchemeTypeCoveredPersonOrErr() ([]*CoveredPerson, error) {
	if e.loadedTypes[0] {
		return e.SchemeTypeCoveredPerson, nil
	}
	return nil, &NotLoadedError{edge: "SchemeType_CoveredPerson"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SchemeType) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // SchemeType_Name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SchemeType fields.
func (st *SchemeType) assignValues(values ...interface{}) error {
	if m, n := len(values), len(schemetype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	st.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field SchemeType_Name", values[0])
	} else if value.Valid {
		st.SchemeTypeName = value.String
	}
	return nil
}

// QuerySchemeTypeCoveredPerson queries the SchemeType_CoveredPerson edge of the SchemeType.
func (st *SchemeType) QuerySchemeTypeCoveredPerson() *CoveredPersonQuery {
	return (&SchemeTypeClient{config: st.config}).QuerySchemeTypeCoveredPerson(st)
}

// Update returns a builder for updating this SchemeType.
// Note that, you need to call SchemeType.Unwrap() before calling this method, if this SchemeType
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SchemeType) Update() *SchemeTypeUpdateOne {
	return (&SchemeTypeClient{config: st.config}).UpdateOne(st)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (st *SchemeType) Unwrap() *SchemeType {
	tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SchemeType is not a transactional entity")
	}
	st.config.driver = tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SchemeType) String() string {
	var builder strings.Builder
	builder.WriteString("SchemeType(")
	builder.WriteString(fmt.Sprintf("id=%v", st.ID))
	builder.WriteString(", SchemeType_Name=")
	builder.WriteString(st.SchemeTypeName)
	builder.WriteByte(')')
	return builder.String()
}

// SchemeTypes is a parsable slice of SchemeType.
type SchemeTypes []*SchemeType

func (st SchemeTypes) config(cfg config) {
	for _i := range st {
		st[_i].config = cfg
	}
}
