/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Playlist Vidoe
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EntBloodtype,
    EntBloodtypeFromJSON,
    EntBloodtypeFromJSONTyped,
    EntBloodtypeToJSON,
    EntCoveredPerson,
    EntCoveredPersonFromJSON,
    EntCoveredPersonFromJSONTyped,
    EntCoveredPersonToJSON,
    EntDiagnose,
    EntDiagnoseFromJSON,
    EntDiagnoseFromJSONTyped,
    EntDiagnoseToJSON,
    EntGender,
    EntGenderFromJSON,
    EntGenderFromJSONTyped,
    EntGenderToJSON,
    EntPrefix,
    EntPrefixFromJSON,
    EntPrefixFromJSONTyped,
    EntPrefixToJSON,
    EntPrescription,
    EntPrescriptionFromJSON,
    EntPrescriptionFromJSONTyped,
    EntPrescriptionToJSON,
    EntRent,
    EntRentFromJSON,
    EntRentFromJSONTyped,
    EntRentToJSON,
} from './';

/**
 * 
 * @export
 * @interface EntPatientEdges
 */
export interface EntPatientEdges {
    /**
     * 
     * @type {EntBloodtype}
     * @memberof EntPatientEdges
     */
    bloodtype?: EntBloodtype;
    /**
     * 
     * @type {EntRent}
     * @memberof EntPatientEdges
     */
    frompatient?: EntRent;
    /**
     * 
     * @type {EntGender}
     * @memberof EntPatientEdges
     */
    gender?: EntGender;
    /**
     * PatientCoveredPerson holds the value of the Patient_CoveredPerson edge.
     * @type {Array<EntCoveredPerson>}
     * @memberof EntPatientEdges
     */
    patientCoveredPerson?: Array<EntCoveredPerson>;
    /**
     * PatientDiagnose holds the value of the patient_diagnose edge.
     * @type {Array<EntDiagnose>}
     * @memberof EntPatientEdges
     */
    patientDiagnose?: Array<EntDiagnose>;
    /**
     * PatientPrescription holds the value of the patient_prescription edge.
     * @type {Array<EntPrescription>}
     * @memberof EntPatientEdges
     */
    patientPrescription?: Array<EntPrescription>;
    /**
     * 
     * @type {EntPrefix}
     * @memberof EntPatientEdges
     */
    prefix?: EntPrefix;
}

export function EntPatientEdgesFromJSON(json: any): EntPatientEdges {
    return EntPatientEdgesFromJSONTyped(json, false);
}

export function EntPatientEdgesFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntPatientEdges {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bloodtype': !exists(json, 'bloodtype') ? undefined : EntBloodtypeFromJSON(json['bloodtype']),
        'frompatient': !exists(json, 'frompatient') ? undefined : EntRentFromJSON(json['frompatient']),
        'gender': !exists(json, 'gender') ? undefined : EntGenderFromJSON(json['gender']),
        'patientCoveredPerson': !exists(json, 'patientCoveredPerson') ? undefined : ((json['patientCoveredPerson'] as Array<any>).map(EntCoveredPersonFromJSON)),
        'patientDiagnose': !exists(json, 'patientDiagnose') ? undefined : ((json['patientDiagnose'] as Array<any>).map(EntDiagnoseFromJSON)),
        'patientPrescription': !exists(json, 'patientPrescription') ? undefined : ((json['patientPrescription'] as Array<any>).map(EntPrescriptionFromJSON)),
        'prefix': !exists(json, 'prefix') ? undefined : EntPrefixFromJSON(json['prefix']),
    };
}

export function EntPatientEdgesToJSON(value?: EntPatientEdges | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bloodtype': EntBloodtypeToJSON(value.bloodtype),
        'frompatient': EntRentToJSON(value.frompatient),
        'gender': EntGenderToJSON(value.gender),
        'patientCoveredPerson': value.patientCoveredPerson === undefined ? undefined : ((value.patientCoveredPerson as Array<any>).map(EntCoveredPersonToJSON)),
        'patientDiagnose': value.patientDiagnose === undefined ? undefined : ((value.patientDiagnose as Array<any>).map(EntDiagnoseToJSON)),
        'patientPrescription': value.patientPrescription === undefined ? undefined : ((value.patientPrescription as Array<any>).map(EntPrescriptionToJSON)),
        'prefix': EntPrefixToJSON(value.prefix),
    };
}


