/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Playlist Vidoe
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersCoveredPerson,
    ControllersCoveredPersonFromJSON,
    ControllersCoveredPersonToJSON,
    ControllersDiagnose,
    ControllersDiagnoseFromJSON,
    ControllersDiagnoseToJSON,
    ControllersOperativerecord,
    ControllersOperativerecordFromJSON,
    ControllersOperativerecordToJSON,
    ControllersPatient,
    ControllersPatientFromJSON,
    ControllersPatientToJSON,
    ControllersPrescription,
    ControllersPrescriptionFromJSON,
    ControllersPrescriptionToJSON,
    ControllersRent,
    ControllersRentFromJSON,
    ControllersRentToJSON,
    ControllersRoom,
    ControllersRoomFromJSON,
    ControllersRoomToJSON,
    EntBloodtype,
    EntBloodtypeFromJSON,
    EntBloodtypeToJSON,
    EntCertificate,
    EntCertificateFromJSON,
    EntCertificateToJSON,
    EntCoveredPerson,
    EntCoveredPersonFromJSON,
    EntCoveredPersonToJSON,
    EntDepartment,
    EntDepartmentFromJSON,
    EntDepartmentToJSON,
    EntDiagnose,
    EntDiagnoseFromJSON,
    EntDiagnoseToJSON,
    EntDisease,
    EntDiseaseFromJSON,
    EntDiseaseToJSON,
    EntDoctor,
    EntDoctorFromJSON,
    EntDoctorToJSON,
    EntDrug,
    EntDrugFromJSON,
    EntDrugToJSON,
    EntExaminationroom,
    EntExaminationroomFromJSON,
    EntExaminationroomToJSON,
    EntFund,
    EntFundFromJSON,
    EntFundToJSON,
    EntGender,
    EntGenderFromJSON,
    EntGenderToJSON,
    EntMedical,
    EntMedicalFromJSON,
    EntMedicalToJSON,
    EntNurse,
    EntNurseFromJSON,
    EntNurseToJSON,
    EntOperative,
    EntOperativeFromJSON,
    EntOperativeToJSON,
    EntOperativerecord,
    EntOperativerecordFromJSON,
    EntOperativerecordToJSON,
    EntPatient,
    EntPatientFromJSON,
    EntPatientToJSON,
    EntPrefix,
    EntPrefixFromJSON,
    EntPrefixToJSON,
    EntPrescription,
    EntPrescriptionFromJSON,
    EntPrescriptionToJSON,
    EntRent,
    EntRentFromJSON,
    EntRentToJSON,
    EntRoom,
    EntRoomFromJSON,
    EntRoomToJSON,
    EntRoomtype,
    EntRoomtypeFromJSON,
    EntRoomtypeToJSON,
    EntSchemeType,
    EntSchemeTypeFromJSON,
    EntSchemeTypeToJSON,
    EntTool,
    EntToolFromJSON,
    EntToolToJSON,
} from '../models';

export interface CreateBloodtypeRequest {
    bloodtype: EntBloodtype;
}

export interface CreateCertificateRequest {
    certificate: EntCertificate;
}

export interface CreateCoveredpersonRequest {
    coveredperson: ControllersCoveredPerson;
}

export interface CreateDepartmentRequest {
    department: EntDepartment;
}

export interface CreateDiagnoseRequest {
    diagnose: ControllersDiagnose;
}

export interface CreateDiseaseRequest {
    disease: EntDisease;
}

export interface CreateDoctorRequest {
    doctor: EntDoctor;
}

export interface CreateDrugRequest {
    drug: EntDrug;
}

export interface CreateExaminationroomRequest {
    examinationroom: EntExaminationroom;
}

export interface CreateFundRequest {
    fund: EntFund;
}

export interface CreateGenderRequest {
    gender: EntGender;
}

export interface CreateMedicalRequest {
    medical: EntMedical;
}

export interface CreateNurseRequest {
    nurse: EntNurse;
}

export interface CreateOperativeRequest {
    operative: EntOperative;
}

export interface CreateOperativerecordRequest {
    operativerecord: ControllersOperativerecord;
}

export interface CreatePatientRequest {
    patient: ControllersPatient;
}

export interface CreatePrefixRequest {
    prefix: EntPrefix;
}

export interface CreatePrescriptionRequest {
    prescription: ControllersPrescription;
}

export interface CreateRentRequest {
    rent: ControllersRent;
}

export interface CreateRoomRequest {
    room: ControllersRoom;
}

export interface CreateRoomtypeRequest {
    roomtype: EntRoomtype;
}

export interface CreateSchemeTypeRequest {
    schemeType: EntSchemeType;
}

export interface CreateToolRequest {
    tool: EntTool;
}

export interface DeleteCertificateRequest {
    id: number;
}

export interface DeleteCoveredpersonRequest {
    id: number;
}

export interface DeleteDepartmentRequest {
    id: number;
}

export interface DeleteDiagnoseRequest {
    id: number;
}

export interface DeleteDiseaseRequest {
    id: number;
}

export interface DeleteDoctorRequest {
    id: number;
}

export interface DeleteExaminationroomRequest {
    id: number;
}

export interface DeleteFundRequest {
    id: number;
}

export interface DeleteMedicalRequest {
    id: number;
}

export interface DeleteOperativeRequest {
    id: number;
}

export interface DeleteOperativerecordRequest {
    id: number;
}

export interface DeletePatientRequest {
    id: number;
}

export interface DeletePrescriptionRequest {
    id: number;
}

export interface DeleteRentRequest {
    id: number;
}

export interface DeleteSchemeTypeRequest {
    id: number;
}

export interface DeleteToolRequest {
    id: number;
}

export interface GetBloodtypeRequest {
    id: number;
}

export interface GetCertificateRequest {
    id: number;
}

export interface GetCoveredpersonRequest {
    id: number;
}

export interface GetDepartmentRequest {
    id: number;
}

export interface GetDiseaseRequest {
    id: number;
}

export interface GetDoctorRequest {
    id: number;
}

export interface GetDrugRequest {
    id: number;
}

export interface GetDrugAllergyRequest {
    id: number;
}

export interface GetExaminationroomRequest {
    id: number;
}

export interface GetFundRequest {
    id: number;
}

export interface GetGenderRequest {
    id: number;
}

export interface GetMedicalRequest {
    id: number;
}

export interface GetNurseRequest {
    id: number;
}

export interface GetOperativeRequest {
    id: number;
}

export interface GetOperativerecordRequest {
    id: number;
}

export interface GetPatientRequest {
    id: number;
}

export interface GetPrefixRequest {
    id: number;
}

export interface GetPrescriptionRequest {
    id: number;
}

export interface GetRentRequest {
    id: number;
}

export interface GetRoomRequest {
    id: number;
}

export interface GetRoomtypeRequest {
    id: number;
}

export interface GetSchemeTypeRequest {
    id: number;
}

export interface GetToolRequest {
    id: number;
}

export interface ListBloodtypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListCertificateRequest {
    limit?: number;
    offset?: number;
}

export interface ListCoveredpersonRequest {
    limit?: number;
    offset?: number;
}

export interface ListDepartmentRequest {
    limit?: number;
    offset?: number;
}

export interface ListDiagnoseRequest {
    limit?: number;
    offset?: number;
}

export interface ListDiseaseRequest {
    limit?: number;
    offset?: number;
}

export interface ListDoctorRequest {
    limit?: number;
    offset?: number;
}

export interface ListDrugRequest {
    limit?: number;
    offset?: number;
}

export interface ListExaminationroomRequest {
    limit?: number;
    offset?: number;
}

export interface ListFundRequest {
    limit?: number;
    offset?: number;
}

export interface ListGenderRequest {
    limit?: number;
    offset?: number;
}

export interface ListMedicalRequest {
    limit?: number;
    offset?: number;
}

export interface ListNurseRequest {
    limit?: number;
    offset?: number;
}

export interface ListOperativeRequest {
    limit?: number;
    offset?: number;
}

export interface ListOperativerecordRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientRequest {
    limit?: number;
    offset?: number;
}

export interface ListPrefixRequest {
    limit?: number;
    offset?: number;
}

export interface ListPrescriptionRequest {
    limit?: number;
    offset?: number;
}

export interface ListRentRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomtypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListSchemeTypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListToolRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateCertificateRequest {
    id: number;
    certificate: EntCertificate;
}

export interface UpdateCoveredpersonRequest {
    id: number;
    coveredperson: EntCoveredPerson;
}

export interface UpdateDepartmentRequest {
    id: number;
    department: EntDepartment;
}

export interface UpdateDiagnoseRequest {
    id: number;
    drugAllergy: EntDiagnose;
}

export interface UpdateDiseaseRequest {
    id: number;
    disease: EntDisease;
}

export interface UpdateDoctorRequest {
    id: number;
    doctor: EntDoctor;
}

export interface UpdateExaminationroomRequest {
    id: number;
    examinationroom: EntExaminationroom;
}

export interface UpdateFundRequest {
    id: number;
    fund: EntFund;
}

export interface UpdateMedicalRequest {
    id: number;
    medical: EntMedical;
}

export interface UpdateOperativeRequest {
    id: number;
    operative: EntOperative;
}

export interface UpdateOperativerecordRequest {
    id: number;
    operativerecord: EntOperativerecord;
}

export interface UpdatePatientRequest {
    id: number;
    patient: EntPatient;
}

export interface UpdatePrescriptionRequest {
    id: number;
    drugAllergy: EntPrescription;
}

export interface UpdateRentRequest {
    id: number;
    rent: EntRent;
}

export interface UpdateSchemeTypeRequest {
    id: number;
    schemeType: EntSchemeType;
}

export interface UpdateToolRequest {
    id: number;
    tool: EntTool;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create bloodtype
     * Create bloodtype
     */
    async createBloodtypeRaw(requestParameters: CreateBloodtypeRequest): Promise<runtime.ApiResponse<EntBloodtype>> {
        if (requestParameters.bloodtype === null || requestParameters.bloodtype === undefined) {
            throw new runtime.RequiredError('bloodtype','Required parameter requestParameters.bloodtype was null or undefined when calling createBloodtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bloodtypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntBloodtypeToJSON(requestParameters.bloodtype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBloodtypeFromJSON(jsonValue));
    }

    /**
     * Create bloodtype
     * Create bloodtype
     */
    async createBloodtype(requestParameters: CreateBloodtypeRequest): Promise<EntBloodtype> {
        const response = await this.createBloodtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create certificate
     * Create certificate
     */
    async createCertificateRaw(requestParameters: CreateCertificateRequest): Promise<runtime.ApiResponse<EntCertificate>> {
        if (requestParameters.certificate === null || requestParameters.certificate === undefined) {
            throw new runtime.RequiredError('certificate','Required parameter requestParameters.certificate was null or undefined when calling createCertificate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/certificates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntCertificateToJSON(requestParameters.certificate),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCertificateFromJSON(jsonValue));
    }

    /**
     * Create certificate
     * Create certificate
     */
    async createCertificate(requestParameters: CreateCertificateRequest): Promise<EntCertificate> {
        const response = await this.createCertificateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create coveredperson
     * Create coveredperson
     */
    async createCoveredpersonRaw(requestParameters: CreateCoveredpersonRequest): Promise<runtime.ApiResponse<EntCoveredPerson>> {
        if (requestParameters.coveredperson === null || requestParameters.coveredperson === undefined) {
            throw new runtime.RequiredError('coveredperson','Required parameter requestParameters.coveredperson was null or undefined when calling createCoveredperson.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/coveredpersons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersCoveredPersonToJSON(requestParameters.coveredperson),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCoveredPersonFromJSON(jsonValue));
    }

    /**
     * Create coveredperson
     * Create coveredperson
     */
    async createCoveredperson(requestParameters: CreateCoveredpersonRequest): Promise<EntCoveredPerson> {
        const response = await this.createCoveredpersonRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create department
     * Create Department
     */
    async createDepartmentRaw(requestParameters: CreateDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.department === null || requestParameters.department === undefined) {
            throw new runtime.RequiredError('department','Required parameter requestParameters.department was null or undefined when calling createDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/departments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDepartmentToJSON(requestParameters.department),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * Create department
     * Create Department
     */
    async createDepartment(requestParameters: CreateDepartmentRequest): Promise<EntDepartment> {
        const response = await this.createDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create diagnose
     * Create diagnose
     */
    async createDiagnoseRaw(requestParameters: CreateDiagnoseRequest): Promise<runtime.ApiResponse<EntDiagnose>> {
        if (requestParameters.diagnose === null || requestParameters.diagnose === undefined) {
            throw new runtime.RequiredError('diagnose','Required parameter requestParameters.diagnose was null or undefined when calling createDiagnose.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/diagnoses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersDiagnoseToJSON(requestParameters.diagnose),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiagnoseFromJSON(jsonValue));
    }

    /**
     * Create diagnose
     * Create diagnose
     */
    async createDiagnose(requestParameters: CreateDiagnoseRequest): Promise<EntDiagnose> {
        const response = await this.createDiagnoseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create disease
     * Create disease
     */
    async createDiseaseRaw(requestParameters: CreateDiseaseRequest): Promise<runtime.ApiResponse<EntDisease>> {
        if (requestParameters.disease === null || requestParameters.disease === undefined) {
            throw new runtime.RequiredError('disease','Required parameter requestParameters.disease was null or undefined when calling createDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/diseases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDiseaseToJSON(requestParameters.disease),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiseaseFromJSON(jsonValue));
    }

    /**
     * Create disease
     * Create disease
     */
    async createDisease(requestParameters: CreateDiseaseRequest): Promise<EntDisease> {
        const response = await this.createDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create doctor
     * Create doctor
     */
    async createDoctorRaw(requestParameters: CreateDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.doctor === null || requestParameters.doctor === undefined) {
            throw new runtime.RequiredError('doctor','Required parameter requestParameters.doctor was null or undefined when calling createDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/doctors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDoctorToJSON(requestParameters.doctor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * Create doctor
     * Create doctor
     */
    async createDoctor(requestParameters: CreateDoctorRequest): Promise<EntDoctor> {
        const response = await this.createDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create drug
     * Create drug
     */
    async createDrugRaw(requestParameters: CreateDrugRequest): Promise<runtime.ApiResponse<EntDrug>> {
        if (requestParameters.drug === null || requestParameters.drug === undefined) {
            throw new runtime.RequiredError('drug','Required parameter requestParameters.drug was null or undefined when calling createDrug.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/drugs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDrugToJSON(requestParameters.drug),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDrugFromJSON(jsonValue));
    }

    /**
     * Create drug
     * Create drug
     */
    async createDrug(requestParameters: CreateDrugRequest): Promise<EntDrug> {
        const response = await this.createDrugRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create examinationroom
     * Create examinationroom
     */
    async createExaminationroomRaw(requestParameters: CreateExaminationroomRequest): Promise<runtime.ApiResponse<EntExaminationroom>> {
        if (requestParameters.examinationroom === null || requestParameters.examinationroom === undefined) {
            throw new runtime.RequiredError('examinationroom','Required parameter requestParameters.examinationroom was null or undefined when calling createExaminationroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/examinationrooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntExaminationroomToJSON(requestParameters.examinationroom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntExaminationroomFromJSON(jsonValue));
    }

    /**
     * Create examinationroom
     * Create examinationroom
     */
    async createExaminationroom(requestParameters: CreateExaminationroomRequest): Promise<EntExaminationroom> {
        const response = await this.createExaminationroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create fund
     * Create fund
     */
    async createFundRaw(requestParameters: CreateFundRequest): Promise<runtime.ApiResponse<EntFund>> {
        if (requestParameters.fund === null || requestParameters.fund === undefined) {
            throw new runtime.RequiredError('fund','Required parameter requestParameters.fund was null or undefined when calling createFund.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/funds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntFundToJSON(requestParameters.fund),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFundFromJSON(jsonValue));
    }

    /**
     * Create fund
     * Create fund
     */
    async createFund(requestParameters: CreateFundRequest): Promise<EntFund> {
        const response = await this.createFundRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create gender
     * Create gender
     */
    async createGenderRaw(requestParameters: CreateGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.gender === null || requestParameters.gender === undefined) {
            throw new runtime.RequiredError('gender','Required parameter requestParameters.gender was null or undefined when calling createGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/genders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntGenderToJSON(requestParameters.gender),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * Create gender
     * Create gender
     */
    async createGender(requestParameters: CreateGenderRequest): Promise<EntGender> {
        const response = await this.createGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create medical
     * Create medical
     */
    async createMedicalRaw(requestParameters: CreateMedicalRequest): Promise<runtime.ApiResponse<EntMedical>> {
        if (requestParameters.medical === null || requestParameters.medical === undefined) {
            throw new runtime.RequiredError('medical','Required parameter requestParameters.medical was null or undefined when calling createMedical.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/medicals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntMedicalToJSON(requestParameters.medical),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicalFromJSON(jsonValue));
    }

    /**
     * Create medical
     * Create medical
     */
    async createMedical(requestParameters: CreateMedicalRequest): Promise<EntMedical> {
        const response = await this.createMedicalRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create nurse
     * Create nurse
     */
    async createNurseRaw(requestParameters: CreateNurseRequest): Promise<runtime.ApiResponse<EntNurse>> {
        if (requestParameters.nurse === null || requestParameters.nurse === undefined) {
            throw new runtime.RequiredError('nurse','Required parameter requestParameters.nurse was null or undefined when calling createNurse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/nurses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntNurseToJSON(requestParameters.nurse),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNurseFromJSON(jsonValue));
    }

    /**
     * Create nurse
     * Create nurse
     */
    async createNurse(requestParameters: CreateNurseRequest): Promise<EntNurse> {
        const response = await this.createNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create operative
     * Create operative
     */
    async createOperativeRaw(requestParameters: CreateOperativeRequest): Promise<runtime.ApiResponse<EntOperative>> {
        if (requestParameters.operative === null || requestParameters.operative === undefined) {
            throw new runtime.RequiredError('operative','Required parameter requestParameters.operative was null or undefined when calling createOperative.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/operatives`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntOperativeToJSON(requestParameters.operative),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntOperativeFromJSON(jsonValue));
    }

    /**
     * Create operative
     * Create operative
     */
    async createOperative(requestParameters: CreateOperativeRequest): Promise<EntOperative> {
        const response = await this.createOperativeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create operativerecord
     * Create operativerecord
     */
    async createOperativerecordRaw(requestParameters: CreateOperativerecordRequest): Promise<runtime.ApiResponse<EntOperativerecord>> {
        if (requestParameters.operativerecord === null || requestParameters.operativerecord === undefined) {
            throw new runtime.RequiredError('operativerecord','Required parameter requestParameters.operativerecord was null or undefined when calling createOperativerecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/operativerecords`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersOperativerecordToJSON(requestParameters.operativerecord),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntOperativerecordFromJSON(jsonValue));
    }

    /**
     * Create operativerecord
     * Create operativerecord
     */
    async createOperativerecord(requestParameters: CreateOperativerecordRequest): Promise<EntOperativerecord> {
        const response = await this.createOperativerecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatientRaw(requestParameters: CreatePatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling createPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersPatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatient(requestParameters: CreatePatientRequest): Promise<EntPatient> {
        const response = await this.createPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create prefix
     * Create prefix
     */
    async createPrefixRaw(requestParameters: CreatePrefixRequest): Promise<runtime.ApiResponse<EntPrefix>> {
        if (requestParameters.prefix === null || requestParameters.prefix === undefined) {
            throw new runtime.RequiredError('prefix','Required parameter requestParameters.prefix was null or undefined when calling createPrefix.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/prefixs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPrefixToJSON(requestParameters.prefix),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPrefixFromJSON(jsonValue));
    }

    /**
     * Create prefix
     * Create prefix
     */
    async createPrefix(requestParameters: CreatePrefixRequest): Promise<EntPrefix> {
        const response = await this.createPrefixRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create prescription
     * Create prescription
     */
    async createPrescriptionRaw(requestParameters: CreatePrescriptionRequest): Promise<runtime.ApiResponse<EntPrescription>> {
        if (requestParameters.prescription === null || requestParameters.prescription === undefined) {
            throw new runtime.RequiredError('prescription','Required parameter requestParameters.prescription was null or undefined when calling createPrescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/prescriptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersPrescriptionToJSON(requestParameters.prescription),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPrescriptionFromJSON(jsonValue));
    }

    /**
     * Create prescription
     * Create prescription
     */
    async createPrescription(requestParameters: CreatePrescriptionRequest): Promise<EntPrescription> {
        const response = await this.createPrescriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create rent
     * Create rent
     */
    async createRentRaw(requestParameters: CreateRentRequest): Promise<runtime.ApiResponse<EntRent>> {
        if (requestParameters.rent === null || requestParameters.rent === undefined) {
            throw new runtime.RequiredError('rent','Required parameter requestParameters.rent was null or undefined when calling createRent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersRentToJSON(requestParameters.rent),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRentFromJSON(jsonValue));
    }

    /**
     * Create rent
     * Create rent
     */
    async createRent(requestParameters: CreateRentRequest): Promise<EntRent> {
        const response = await this.createRentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create room
     * Create room
     */
    async createRoomRaw(requestParameters: CreateRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.room === null || requestParameters.room === undefined) {
            throw new runtime.RequiredError('room','Required parameter requestParameters.room was null or undefined when calling createRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersRoomToJSON(requestParameters.room),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * Create room
     * Create room
     */
    async createRoom(requestParameters: CreateRoomRequest): Promise<EntRoom> {
        const response = await this.createRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create roomtype
     * Create roomtype
     */
    async createRoomtypeRaw(requestParameters: CreateRoomtypeRequest): Promise<runtime.ApiResponse<EntRoomtype>> {
        if (requestParameters.roomtype === null || requestParameters.roomtype === undefined) {
            throw new runtime.RequiredError('roomtype','Required parameter requestParameters.roomtype was null or undefined when calling createRoomtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roomtypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomtypeToJSON(requestParameters.roomtype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomtypeFromJSON(jsonValue));
    }

    /**
     * Create roomtype
     * Create roomtype
     */
    async createRoomtype(requestParameters: CreateRoomtypeRequest): Promise<EntRoomtype> {
        const response = await this.createRoomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create schemeType
     * Create schemeType
     */
    async createSchemeTypeRaw(requestParameters: CreateSchemeTypeRequest): Promise<runtime.ApiResponse<EntSchemeType>> {
        if (requestParameters.schemeType === null || requestParameters.schemeType === undefined) {
            throw new runtime.RequiredError('schemeType','Required parameter requestParameters.schemeType was null or undefined when calling createSchemeType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/schemeTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntSchemeTypeToJSON(requestParameters.schemeType),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSchemeTypeFromJSON(jsonValue));
    }

    /**
     * Create schemeType
     * Create schemeType
     */
    async createSchemeType(requestParameters: CreateSchemeTypeRequest): Promise<EntSchemeType> {
        const response = await this.createSchemeTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create tool
     * Create tool
     */
    async createToolRaw(requestParameters: CreateToolRequest): Promise<runtime.ApiResponse<EntTool>> {
        if (requestParameters.tool === null || requestParameters.tool === undefined) {
            throw new runtime.RequiredError('tool','Required parameter requestParameters.tool was null or undefined when calling createTool.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tools`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntToolToJSON(requestParameters.tool),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntToolFromJSON(jsonValue));
    }

    /**
     * Create tool
     * Create tool
     */
    async createTool(requestParameters: CreateToolRequest): Promise<EntTool> {
        const response = await this.createToolRaw(requestParameters);
        return await response.value();
    }

    /**
     * get certificate by ID
     * Delete a certificate entity by ID
     */
    async deleteCertificateRaw(requestParameters: DeleteCertificateRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCertificate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/certificates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get certificate by ID
     * Delete a certificate entity by ID
     */
    async deleteCertificate(requestParameters: DeleteCertificateRequest): Promise<object> {
        const response = await this.deleteCertificateRaw(requestParameters);
        return await response.value();
    }

    /**
     * get coveredperson by ID
     * Delete a coveredperson entity by ID
     */
    async deleteCoveredpersonRaw(requestParameters: DeleteCoveredpersonRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCoveredperson.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coveredpersons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get coveredperson by ID
     * Delete a coveredperson entity by ID
     */
    async deleteCoveredperson(requestParameters: DeleteCoveredpersonRequest): Promise<object> {
        const response = await this.deleteCoveredpersonRaw(requestParameters);
        return await response.value();
    }

    /**
     * get department by ID
     * Delete a department entity by ID
     */
    async deleteDepartmentRaw(requestParameters: DeleteDepartmentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get department by ID
     * Delete a department entity by ID
     */
    async deleteDepartment(requestParameters: DeleteDepartmentRequest): Promise<object> {
        const response = await this.deleteDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get diagnose by ID
     * Delete a diagnose entity by ID
     */
    async deleteDiagnoseRaw(requestParameters: DeleteDiagnoseRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDiagnose.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diagnoses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get diagnose by ID
     * Delete a diagnose entity by ID
     */
    async deleteDiagnose(requestParameters: DeleteDiagnoseRequest): Promise<object> {
        const response = await this.deleteDiagnoseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get disease by ID
     * Delete a disease entity by ID
     */
    async deleteDiseaseRaw(requestParameters: DeleteDiseaseRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diseases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get disease by ID
     * Delete a disease entity by ID
     */
    async deleteDisease(requestParameters: DeleteDiseaseRequest): Promise<object> {
        const response = await this.deleteDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get doctor by ID
     * Delete a doctor entity by ID
     */
    async deleteDoctorRaw(requestParameters: DeleteDoctorRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get doctor by ID
     * Delete a doctor entity by ID
     */
    async deleteDoctor(requestParameters: DeleteDoctorRequest): Promise<object> {
        const response = await this.deleteDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * get examinationroom by ID
     * Delete a examinationroom entity by ID
     */
    async deleteExaminationroomRaw(requestParameters: DeleteExaminationroomRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteExaminationroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/examinationrooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get examinationroom by ID
     * Delete a examinationroom entity by ID
     */
    async deleteExaminationroom(requestParameters: DeleteExaminationroomRequest): Promise<object> {
        const response = await this.deleteExaminationroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get fund by ID
     * Delete a fund entity by ID
     */
    async deleteFundRaw(requestParameters: DeleteFundRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFund.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/funds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get fund by ID
     * Delete a fund entity by ID
     */
    async deleteFund(requestParameters: DeleteFundRequest): Promise<object> {
        const response = await this.deleteFundRaw(requestParameters);
        return await response.value();
    }

    /**
     * get medical by ID
     * Delete a medical entity by ID
     */
    async deleteMedicalRaw(requestParameters: DeleteMedicalRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMedical.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get medical by ID
     * Delete a medical entity by ID
     */
    async deleteMedical(requestParameters: DeleteMedicalRequest): Promise<object> {
        const response = await this.deleteMedicalRaw(requestParameters);
        return await response.value();
    }

    /**
     * get operative by ID
     * Delete a operative entity by ID
     */
    async deleteOperativeRaw(requestParameters: DeleteOperativeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOperative.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/operatives/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get operative by ID
     * Delete a operative entity by ID
     */
    async deleteOperative(requestParameters: DeleteOperativeRequest): Promise<object> {
        const response = await this.deleteOperativeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get operativerecord by ID
     * Delete a operativerecord entity by ID
     */
    async deleteOperativerecordRaw(requestParameters: DeleteOperativerecordRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOperativerecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/operativerecords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get operativerecord by ID
     * Delete a operativerecord entity by ID
     */
    async deleteOperativerecord(requestParameters: DeleteOperativerecordRequest): Promise<object> {
        const response = await this.deleteOperativerecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patient by ID
     * Delete a patient entity by ID
     */
    async deletePatientRaw(requestParameters: DeletePatientRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get patient by ID
     * Delete a patient entity by ID
     */
    async deletePatient(requestParameters: DeletePatientRequest): Promise<object> {
        const response = await this.deletePatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * get prescription by ID
     * Delete a prescription entity by ID
     */
    async deletePrescriptionRaw(requestParameters: DeletePrescriptionRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePrescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prescriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get prescription by ID
     * Delete a prescription entity by ID
     */
    async deletePrescription(requestParameters: DeletePrescriptionRequest): Promise<object> {
        const response = await this.deletePrescriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get rent by ID
     * Delete a rent entity by ID
     */
    async deleteRentRaw(requestParameters: DeleteRentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get rent by ID
     * Delete a rent entity by ID
     */
    async deleteRent(requestParameters: DeleteRentRequest): Promise<object> {
        const response = await this.deleteRentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get schemeType by ID
     * Delete a schemeType entity by ID
     */
    async deleteSchemeTypeRaw(requestParameters: DeleteSchemeTypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSchemeType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schemeTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get schemeType by ID
     * Delete a schemeType entity by ID
     */
    async deleteSchemeType(requestParameters: DeleteSchemeTypeRequest): Promise<object> {
        const response = await this.deleteSchemeTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get tool by ID
     * Delete a tool entity by ID
     */
    async deleteToolRaw(requestParameters: DeleteToolRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTool.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tools/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get tool by ID
     * Delete a tool entity by ID
     */
    async deleteTool(requestParameters: DeleteToolRequest): Promise<object> {
        const response = await this.deleteToolRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bloodtype by ID
     * Get a bloodtype entity by ID
     */
    async getBloodtypeRaw(requestParameters: GetBloodtypeRequest): Promise<runtime.ApiResponse<EntBloodtype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBloodtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bloodtypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBloodtypeFromJSON(jsonValue));
    }

    /**
     * get bloodtype by ID
     * Get a bloodtype entity by ID
     */
    async getBloodtype(requestParameters: GetBloodtypeRequest): Promise<EntBloodtype> {
        const response = await this.getBloodtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get certificate by ID
     * Get a certificate entity by ID
     */
    async getCertificateRaw(requestParameters: GetCertificateRequest): Promise<runtime.ApiResponse<EntCertificate>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCertificate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/certificates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCertificateFromJSON(jsonValue));
    }

    /**
     * get certificate by ID
     * Get a certificate entity by ID
     */
    async getCertificate(requestParameters: GetCertificateRequest): Promise<EntCertificate> {
        const response = await this.getCertificateRaw(requestParameters);
        return await response.value();
    }

    /**
     * get coveredperson by ID
     * Get a coveredperson entity by ID
     */
    async getCoveredpersonRaw(requestParameters: GetCoveredpersonRequest): Promise<runtime.ApiResponse<EntCoveredPerson>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCoveredperson.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coveredpersons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCoveredPersonFromJSON(jsonValue));
    }

    /**
     * get coveredperson by ID
     * Get a coveredperson entity by ID
     */
    async getCoveredperson(requestParameters: GetCoveredpersonRequest): Promise<EntCoveredPerson> {
        const response = await this.getCoveredpersonRaw(requestParameters);
        return await response.value();
    }

    /**
     * get department by ID
     * Get a department entity by ID
     */
    async getDepartmentRaw(requestParameters: GetDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * get department by ID
     * Get a department entity by ID
     */
    async getDepartment(requestParameters: GetDepartmentRequest): Promise<EntDepartment> {
        const response = await this.getDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get disease by ID
     * Get a disease entity by ID
     */
    async getDiseaseRaw(requestParameters: GetDiseaseRequest): Promise<runtime.ApiResponse<EntDisease>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diseases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiseaseFromJSON(jsonValue));
    }

    /**
     * get disease by ID
     * Get a disease entity by ID
     */
    async getDisease(requestParameters: GetDiseaseRequest): Promise<EntDisease> {
        const response = await this.getDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get doctor by ID
     * Get a doctor entity by ID
     */
    async getDoctorRaw(requestParameters: GetDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * get doctor by ID
     * Get a doctor entity by ID
     */
    async getDoctor(requestParameters: GetDoctorRequest): Promise<EntDoctor> {
        const response = await this.getDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * get drug by ID
     * Get a drug entity by ID
     */
    async getDrugRaw(requestParameters: GetDrugRequest): Promise<runtime.ApiResponse<EntDrug>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDrug.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drugs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDrugFromJSON(jsonValue));
    }

    /**
     * get drug by ID
     * Get a drug entity by ID
     */
    async getDrug(requestParameters: GetDrugRequest): Promise<EntDrug> {
        const response = await this.getDrugRaw(requestParameters);
        return await response.value();
    }

    /**
     * get diagnose by ID
     * Get a diagnose entity by ID
     */
    async getDrugAllergyRaw(requestParameters: GetDrugAllergyRequest): Promise<runtime.ApiResponse<EntDiagnose>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDrugAllergy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diagnoses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiagnoseFromJSON(jsonValue));
    }

    /**
     * get diagnose by ID
     * Get a diagnose entity by ID
     */
    async getDrugAllergy(requestParameters: GetDrugAllergyRequest): Promise<EntDiagnose> {
        const response = await this.getDrugAllergyRaw(requestParameters);
        return await response.value();
    }

    /**
     * get examinationroom by ID
     * Get a examinationroom entity by ID
     */
    async getExaminationroomRaw(requestParameters: GetExaminationroomRequest): Promise<runtime.ApiResponse<EntExaminationroom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getExaminationroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/examinationrooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntExaminationroomFromJSON(jsonValue));
    }

    /**
     * get examinationroom by ID
     * Get a examinationroom entity by ID
     */
    async getExaminationroom(requestParameters: GetExaminationroomRequest): Promise<EntExaminationroom> {
        const response = await this.getExaminationroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get fund by ID
     * Get a fund entity by ID
     */
    async getFundRaw(requestParameters: GetFundRequest): Promise<runtime.ApiResponse<EntFund>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFund.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/funds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFundFromJSON(jsonValue));
    }

    /**
     * get fund by ID
     * Get a fund entity by ID
     */
    async getFund(requestParameters: GetFundRequest): Promise<EntFund> {
        const response = await this.getFundRaw(requestParameters);
        return await response.value();
    }

    /**
     * get gender by ID
     * Get a gender entity by ID
     */
    async getGenderRaw(requestParameters: GetGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * get gender by ID
     * Get a gender entity by ID
     */
    async getGender(requestParameters: GetGenderRequest): Promise<EntGender> {
        const response = await this.getGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * get medical by ID
     * Get a medical entity by ID
     */
    async getMedicalRaw(requestParameters: GetMedicalRequest): Promise<runtime.ApiResponse<EntMedical>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMedical.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicalFromJSON(jsonValue));
    }

    /**
     * get medical by ID
     * Get a medical entity by ID
     */
    async getMedical(requestParameters: GetMedicalRequest): Promise<EntMedical> {
        const response = await this.getMedicalRaw(requestParameters);
        return await response.value();
    }

    /**
     * get nurse by ID
     * Get a nurse entity by ID
     */
    async getNurseRaw(requestParameters: GetNurseRequest): Promise<runtime.ApiResponse<EntNurse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNurse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nurses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNurseFromJSON(jsonValue));
    }

    /**
     * get nurse by ID
     * Get a nurse entity by ID
     */
    async getNurse(requestParameters: GetNurseRequest): Promise<EntNurse> {
        const response = await this.getNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get operative by ID
     * Get a operative entity by ID
     */
    async getOperativeRaw(requestParameters: GetOperativeRequest): Promise<runtime.ApiResponse<EntOperative>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOperative.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/operatives/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntOperativeFromJSON(jsonValue));
    }

    /**
     * get operative by ID
     * Get a operative entity by ID
     */
    async getOperative(requestParameters: GetOperativeRequest): Promise<EntOperative> {
        const response = await this.getOperativeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get operativerecord by ID
     * Get a operativerecord entity by ID
     */
    async getOperativerecordRaw(requestParameters: GetOperativerecordRequest): Promise<runtime.ApiResponse<EntOperativerecord>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOperativerecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/operativerecords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntOperativerecordFromJSON(jsonValue));
    }

    /**
     * get operativerecord by ID
     * Get a operativerecord entity by ID
     */
    async getOperativerecord(requestParameters: GetOperativerecordRequest): Promise<EntOperativerecord> {
        const response = await this.getOperativerecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patient by ID
     * Get a patient entity by ID
     */
    async getPatientRaw(requestParameters: GetPatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * get patient by ID
     * Get a patient entity by ID
     */
    async getPatient(requestParameters: GetPatientRequest): Promise<EntPatient> {
        const response = await this.getPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * get prefix by ID
     * Get a prefix entity by ID
     */
    async getPrefixRaw(requestParameters: GetPrefixRequest): Promise<runtime.ApiResponse<EntPrefix>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPrefix.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prefixs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPrefixFromJSON(jsonValue));
    }

    /**
     * get prefix by ID
     * Get a prefix entity by ID
     */
    async getPrefix(requestParameters: GetPrefixRequest): Promise<EntPrefix> {
        const response = await this.getPrefixRaw(requestParameters);
        return await response.value();
    }

    /**
     * get prescription by ID
     * Get a prescription entity by ID
     */
    async getPrescriptionRaw(requestParameters: GetPrescriptionRequest): Promise<runtime.ApiResponse<EntPrescription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPrescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prescriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPrescriptionFromJSON(jsonValue));
    }

    /**
     * get prescription by ID
     * Get a prescription entity by ID
     */
    async getPrescription(requestParameters: GetPrescriptionRequest): Promise<EntPrescription> {
        const response = await this.getPrescriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get rent by ID
     * Get a rent entity by ID
     */
    async getRentRaw(requestParameters: GetRentRequest): Promise<runtime.ApiResponse<EntRent>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRentFromJSON(jsonValue));
    }

    /**
     * get rent by ID
     * Get a rent entity by ID
     */
    async getRent(requestParameters: GetRentRequest): Promise<EntRent> {
        const response = await this.getRentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get room by ID
     * Get a room entity by ID
     */
    async getRoomRaw(requestParameters: GetRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * get room by ID
     * Get a room entity by ID
     */
    async getRoom(requestParameters: GetRoomRequest): Promise<EntRoom> {
        const response = await this.getRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roomtype by ID
     * Get a roomtype entity by ID
     */
    async getRoomtypeRaw(requestParameters: GetRoomtypeRequest): Promise<runtime.ApiResponse<EntRoomtype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoomtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomtypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomtypeFromJSON(jsonValue));
    }

    /**
     * get roomtype by ID
     * Get a roomtype entity by ID
     */
    async getRoomtype(requestParameters: GetRoomtypeRequest): Promise<EntRoomtype> {
        const response = await this.getRoomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get schemeType by ID
     * Get a schemeType entity by ID
     */
    async getSchemeTypeRaw(requestParameters: GetSchemeTypeRequest): Promise<runtime.ApiResponse<EntSchemeType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSchemeType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schemeTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSchemeTypeFromJSON(jsonValue));
    }

    /**
     * get schemeType by ID
     * Get a schemeType entity by ID
     */
    async getSchemeType(requestParameters: GetSchemeTypeRequest): Promise<EntSchemeType> {
        const response = await this.getSchemeTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get tool by ID
     * Get a tool entity by ID
     */
    async getToolRaw(requestParameters: GetToolRequest): Promise<runtime.ApiResponse<EntTool>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTool.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tools/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntToolFromJSON(jsonValue));
    }

    /**
     * get tool by ID
     * Get a tool entity by ID
     */
    async getTool(requestParameters: GetToolRequest): Promise<EntTool> {
        const response = await this.getToolRaw(requestParameters);
        return await response.value();
    }

    /**
     * list bloodtype entities
     * List bloodtype entities
     */
    async listBloodtypeRaw(requestParameters: ListBloodtypeRequest): Promise<runtime.ApiResponse<Array<EntBloodtype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bloodtypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBloodtypeFromJSON));
    }

    /**
     * list bloodtype entities
     * List bloodtype entities
     */
    async listBloodtype(requestParameters: ListBloodtypeRequest): Promise<Array<EntBloodtype>> {
        const response = await this.listBloodtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list certificate entities
     * List certificate entities
     */
    async listCertificateRaw(requestParameters: ListCertificateRequest): Promise<runtime.ApiResponse<Array<EntCertificate>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/certificates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCertificateFromJSON));
    }

    /**
     * list certificate entities
     * List certificate entities
     */
    async listCertificate(requestParameters: ListCertificateRequest): Promise<Array<EntCertificate>> {
        const response = await this.listCertificateRaw(requestParameters);
        return await response.value();
    }

    /**
     * list coveredperson entities
     * List coveredperson entities
     */
    async listCoveredpersonRaw(requestParameters: ListCoveredpersonRequest): Promise<runtime.ApiResponse<Array<EntCoveredPerson>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coveredpersons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCoveredPersonFromJSON));
    }

    /**
     * list coveredperson entities
     * List coveredperson entities
     */
    async listCoveredperson(requestParameters: ListCoveredpersonRequest): Promise<Array<EntCoveredPerson>> {
        const response = await this.listCoveredpersonRaw(requestParameters);
        return await response.value();
    }

    /**
     * list department entities
     * List department entities
     */
    async listDepartmentRaw(requestParameters: ListDepartmentRequest): Promise<runtime.ApiResponse<Array<EntDepartment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDepartmentFromJSON));
    }

    /**
     * list department entities
     * List department entities
     */
    async listDepartment(requestParameters: ListDepartmentRequest): Promise<Array<EntDepartment>> {
        const response = await this.listDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list Diagnose entities
     * List Diagnose entities
     */
    async listDiagnoseRaw(requestParameters: ListDiagnoseRequest): Promise<runtime.ApiResponse<Array<EntDiagnose>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diagnoses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDiagnoseFromJSON));
    }

    /**
     * list Diagnose entities
     * List Diagnose entities
     */
    async listDiagnose(requestParameters: ListDiagnoseRequest): Promise<Array<EntDiagnose>> {
        const response = await this.listDiagnoseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list disease entities
     * List disease entities
     */
    async listDiseaseRaw(requestParameters: ListDiseaseRequest): Promise<runtime.ApiResponse<Array<EntDisease>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diseases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDiseaseFromJSON));
    }

    /**
     * list disease entities
     * List disease entities
     */
    async listDisease(requestParameters: ListDiseaseRequest): Promise<Array<EntDisease>> {
        const response = await this.listDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list doctor entities
     * List doctor entities
     */
    async listDoctorRaw(requestParameters: ListDoctorRequest): Promise<runtime.ApiResponse<Array<EntDoctor>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDoctorFromJSON));
    }

    /**
     * list doctor entities
     * List doctor entities
     */
    async listDoctor(requestParameters: ListDoctorRequest): Promise<Array<EntDoctor>> {
        const response = await this.listDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * list drug entities
     * List drug entities
     */
    async listDrugRaw(requestParameters: ListDrugRequest): Promise<runtime.ApiResponse<Array<EntDrug>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drugs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDrugFromJSON));
    }

    /**
     * list drug entities
     * List drug entities
     */
    async listDrug(requestParameters: ListDrugRequest): Promise<Array<EntDrug>> {
        const response = await this.listDrugRaw(requestParameters);
        return await response.value();
    }

    /**
     * list examinationroom entities
     * List examinationroom entities
     */
    async listExaminationroomRaw(requestParameters: ListExaminationroomRequest): Promise<runtime.ApiResponse<Array<EntExaminationroom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/examinationrooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntExaminationroomFromJSON));
    }

    /**
     * list examinationroom entities
     * List examinationroom entities
     */
    async listExaminationroom(requestParameters: ListExaminationroomRequest): Promise<Array<EntExaminationroom>> {
        const response = await this.listExaminationroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list fund entities
     * List fund entities
     */
    async listFundRaw(requestParameters: ListFundRequest): Promise<runtime.ApiResponse<Array<EntFund>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/funds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntFundFromJSON));
    }

    /**
     * list fund entities
     * List fund entities
     */
    async listFund(requestParameters: ListFundRequest): Promise<Array<EntFund>> {
        const response = await this.listFundRaw(requestParameters);
        return await response.value();
    }

    /**
     * list gender entities
     * List gender entities
     */
    async listGenderRaw(requestParameters: ListGenderRequest): Promise<runtime.ApiResponse<Array<EntGender>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntGenderFromJSON));
    }

    /**
     * list gender entities
     * List gender entities
     */
    async listGender(requestParameters: ListGenderRequest): Promise<Array<EntGender>> {
        const response = await this.listGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * list medical entities
     * List medical entities
     */
    async listMedicalRaw(requestParameters: ListMedicalRequest): Promise<runtime.ApiResponse<Array<EntMedical>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMedicalFromJSON));
    }

    /**
     * list medical entities
     * List medical entities
     */
    async listMedical(requestParameters: ListMedicalRequest): Promise<Array<EntMedical>> {
        const response = await this.listMedicalRaw(requestParameters);
        return await response.value();
    }

    /**
     * list nurse entities
     * List nurse entities
     */
    async listNurseRaw(requestParameters: ListNurseRequest): Promise<runtime.ApiResponse<Array<EntNurse>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nurses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntNurseFromJSON));
    }

    /**
     * list nurse entities
     * List nurse entities
     */
    async listNurse(requestParameters: ListNurseRequest): Promise<Array<EntNurse>> {
        const response = await this.listNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list operative entities
     * List operative entities
     */
    async listOperativeRaw(requestParameters: ListOperativeRequest): Promise<runtime.ApiResponse<Array<EntOperative>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/operatives`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntOperativeFromJSON));
    }

    /**
     * list operative entities
     * List operative entities
     */
    async listOperative(requestParameters: ListOperativeRequest): Promise<Array<EntOperative>> {
        const response = await this.listOperativeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list operativerecord entities
     * List operativerecord entities
     */
    async listOperativerecordRaw(requestParameters: ListOperativerecordRequest): Promise<runtime.ApiResponse<Array<EntOperativerecord>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/operativerecords`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntOperativerecordFromJSON));
    }

    /**
     * list operativerecord entities
     * List operativerecord entities
     */
    async listOperativerecord(requestParameters: ListOperativerecordRequest): Promise<Array<EntOperativerecord>> {
        const response = await this.listOperativerecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatientRaw(requestParameters: ListPatientRequest): Promise<runtime.ApiResponse<Array<EntPatient>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientFromJSON));
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatient(requestParameters: ListPatientRequest): Promise<Array<EntPatient>> {
        const response = await this.listPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * list prefix entities
     * List prefix entities
     */
    async listPrefixRaw(requestParameters: ListPrefixRequest): Promise<runtime.ApiResponse<Array<EntPrefix>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prefixs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPrefixFromJSON));
    }

    /**
     * list prefix entities
     * List prefix entities
     */
    async listPrefix(requestParameters: ListPrefixRequest): Promise<Array<EntPrefix>> {
        const response = await this.listPrefixRaw(requestParameters);
        return await response.value();
    }

    /**
     * list prescription entities
     * List prescription entities
     */
    async listPrescriptionRaw(requestParameters: ListPrescriptionRequest): Promise<runtime.ApiResponse<Array<EntPrescription>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prescriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPrescriptionFromJSON));
    }

    /**
     * list prescription entities
     * List prescription entities
     */
    async listPrescription(requestParameters: ListPrescriptionRequest): Promise<Array<EntPrescription>> {
        const response = await this.listPrescriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list rent entities
     * List rent entities
     */
    async listRentRaw(requestParameters: ListRentRequest): Promise<runtime.ApiResponse<Array<EntRent>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRentFromJSON));
    }

    /**
     * list rent entities
     * List rent entities
     */
    async listRent(requestParameters: ListRentRequest): Promise<Array<EntRent>> {
        const response = await this.listRentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoomRaw(requestParameters: ListRoomRequest): Promise<runtime.ApiResponse<Array<EntRoom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomFromJSON));
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoom(requestParameters: ListRoomRequest): Promise<Array<EntRoom>> {
        const response = await this.listRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list roomtype entities
     * List roomtype entities
     */
    async listRoomtypeRaw(requestParameters: ListRoomtypeRequest): Promise<runtime.ApiResponse<Array<EntRoomtype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomtypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomtypeFromJSON));
    }

    /**
     * list roomtype entities
     * List roomtype entities
     */
    async listRoomtype(requestParameters: ListRoomtypeRequest): Promise<Array<EntRoomtype>> {
        const response = await this.listRoomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list schemeType entities
     * List schemeType entities
     */
    async listSchemeTypeRaw(requestParameters: ListSchemeTypeRequest): Promise<runtime.ApiResponse<Array<EntSchemeType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schemeTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSchemeTypeFromJSON));
    }

    /**
     * list schemeType entities
     * List schemeType entities
     */
    async listSchemeType(requestParameters: ListSchemeTypeRequest): Promise<Array<EntSchemeType>> {
        const response = await this.listSchemeTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list tool entities
     * List tool entities
     */
    async listToolRaw(requestParameters: ListToolRequest): Promise<runtime.ApiResponse<Array<EntTool>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tools`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntToolFromJSON));
    }

    /**
     * list tool entities
     * List tool entities
     */
    async listTool(requestParameters: ListToolRequest): Promise<Array<EntTool>> {
        const response = await this.listToolRaw(requestParameters);
        return await response.value();
    }

    /**
     * update certificate by ID
     * Update a certificate entity by ID
     */
    async updateCertificateRaw(requestParameters: UpdateCertificateRequest): Promise<runtime.ApiResponse<EntCertificate>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCertificate.');
        }

        if (requestParameters.certificate === null || requestParameters.certificate === undefined) {
            throw new runtime.RequiredError('certificate','Required parameter requestParameters.certificate was null or undefined when calling updateCertificate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/certificates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntCertificateToJSON(requestParameters.certificate),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCertificateFromJSON(jsonValue));
    }

    /**
     * update certificate by ID
     * Update a certificate entity by ID
     */
    async updateCertificate(requestParameters: UpdateCertificateRequest): Promise<EntCertificate> {
        const response = await this.updateCertificateRaw(requestParameters);
        return await response.value();
    }

    /**
     * update coveredperson by ID
     * Update a coveredperson entity by ID
     */
    async updateCoveredpersonRaw(requestParameters: UpdateCoveredpersonRequest): Promise<runtime.ApiResponse<EntCoveredPerson>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCoveredperson.');
        }

        if (requestParameters.coveredperson === null || requestParameters.coveredperson === undefined) {
            throw new runtime.RequiredError('coveredperson','Required parameter requestParameters.coveredperson was null or undefined when calling updateCoveredperson.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/coveredpersons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntCoveredPersonToJSON(requestParameters.coveredperson),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCoveredPersonFromJSON(jsonValue));
    }

    /**
     * update coveredperson by ID
     * Update a coveredperson entity by ID
     */
    async updateCoveredperson(requestParameters: UpdateCoveredpersonRequest): Promise<EntCoveredPerson> {
        const response = await this.updateCoveredpersonRaw(requestParameters);
        return await response.value();
    }

    /**
     * update department by ID
     * Update a department entity by ID
     */
    async updateDepartmentRaw(requestParameters: UpdateDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDepartment.');
        }

        if (requestParameters.department === null || requestParameters.department === undefined) {
            throw new runtime.RequiredError('department','Required parameter requestParameters.department was null or undefined when calling updateDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDepartmentToJSON(requestParameters.department),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * update department by ID
     * Update a department entity by ID
     */
    async updateDepartment(requestParameters: UpdateDepartmentRequest): Promise<EntDepartment> {
        const response = await this.updateDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * update diagnose by ID
     * Update a diagnose entity by ID
     */
    async updateDiagnoseRaw(requestParameters: UpdateDiagnoseRequest): Promise<runtime.ApiResponse<EntDiagnose>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDiagnose.');
        }

        if (requestParameters.drugAllergy === null || requestParameters.drugAllergy === undefined) {
            throw new runtime.RequiredError('drugAllergy','Required parameter requestParameters.drugAllergy was null or undefined when calling updateDiagnose.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/diagnoses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDiagnoseToJSON(requestParameters.drugAllergy),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiagnoseFromJSON(jsonValue));
    }

    /**
     * update diagnose by ID
     * Update a diagnose entity by ID
     */
    async updateDiagnose(requestParameters: UpdateDiagnoseRequest): Promise<EntDiagnose> {
        const response = await this.updateDiagnoseRaw(requestParameters);
        return await response.value();
    }

    /**
     * update disease by ID
     * Update a disease entity by ID
     */
    async updateDiseaseRaw(requestParameters: UpdateDiseaseRequest): Promise<runtime.ApiResponse<EntDisease>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDisease.');
        }

        if (requestParameters.disease === null || requestParameters.disease === undefined) {
            throw new runtime.RequiredError('disease','Required parameter requestParameters.disease was null or undefined when calling updateDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/diseases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDiseaseToJSON(requestParameters.disease),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiseaseFromJSON(jsonValue));
    }

    /**
     * update disease by ID
     * Update a disease entity by ID
     */
    async updateDisease(requestParameters: UpdateDiseaseRequest): Promise<EntDisease> {
        const response = await this.updateDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * update doctor by ID
     * Update a doctor entity by ID
     */
    async updateDoctorRaw(requestParameters: UpdateDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDoctor.');
        }

        if (requestParameters.doctor === null || requestParameters.doctor === undefined) {
            throw new runtime.RequiredError('doctor','Required parameter requestParameters.doctor was null or undefined when calling updateDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/doctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDoctorToJSON(requestParameters.doctor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * update doctor by ID
     * Update a doctor entity by ID
     */
    async updateDoctor(requestParameters: UpdateDoctorRequest): Promise<EntDoctor> {
        const response = await this.updateDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * update examinationroom by ID
     * Update a examinationroom entity by ID
     */
    async updateExaminationroomRaw(requestParameters: UpdateExaminationroomRequest): Promise<runtime.ApiResponse<EntExaminationroom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateExaminationroom.');
        }

        if (requestParameters.examinationroom === null || requestParameters.examinationroom === undefined) {
            throw new runtime.RequiredError('examinationroom','Required parameter requestParameters.examinationroom was null or undefined when calling updateExaminationroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/examinationrooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntExaminationroomToJSON(requestParameters.examinationroom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntExaminationroomFromJSON(jsonValue));
    }

    /**
     * update examinationroom by ID
     * Update a examinationroom entity by ID
     */
    async updateExaminationroom(requestParameters: UpdateExaminationroomRequest): Promise<EntExaminationroom> {
        const response = await this.updateExaminationroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * update fund by ID
     * Update a fund entity by ID
     */
    async updateFundRaw(requestParameters: UpdateFundRequest): Promise<runtime.ApiResponse<EntFund>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFund.');
        }

        if (requestParameters.fund === null || requestParameters.fund === undefined) {
            throw new runtime.RequiredError('fund','Required parameter requestParameters.fund was null or undefined when calling updateFund.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/funds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntFundToJSON(requestParameters.fund),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFundFromJSON(jsonValue));
    }

    /**
     * update fund by ID
     * Update a fund entity by ID
     */
    async updateFund(requestParameters: UpdateFundRequest): Promise<EntFund> {
        const response = await this.updateFundRaw(requestParameters);
        return await response.value();
    }

    /**
     * update medical by ID
     * Update a medical entity by ID
     */
    async updateMedicalRaw(requestParameters: UpdateMedicalRequest): Promise<runtime.ApiResponse<EntMedical>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMedical.');
        }

        if (requestParameters.medical === null || requestParameters.medical === undefined) {
            throw new runtime.RequiredError('medical','Required parameter requestParameters.medical was null or undefined when calling updateMedical.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/medicals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntMedicalToJSON(requestParameters.medical),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicalFromJSON(jsonValue));
    }

    /**
     * update medical by ID
     * Update a medical entity by ID
     */
    async updateMedical(requestParameters: UpdateMedicalRequest): Promise<EntMedical> {
        const response = await this.updateMedicalRaw(requestParameters);
        return await response.value();
    }

    /**
     * update operative by ID
     * Update a operative entity by ID
     */
    async updateOperativeRaw(requestParameters: UpdateOperativeRequest): Promise<runtime.ApiResponse<EntOperative>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOperative.');
        }

        if (requestParameters.operative === null || requestParameters.operative === undefined) {
            throw new runtime.RequiredError('operative','Required parameter requestParameters.operative was null or undefined when calling updateOperative.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/operatives/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntOperativeToJSON(requestParameters.operative),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntOperativeFromJSON(jsonValue));
    }

    /**
     * update operative by ID
     * Update a operative entity by ID
     */
    async updateOperative(requestParameters: UpdateOperativeRequest): Promise<EntOperative> {
        const response = await this.updateOperativeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update operativerecord by ID
     * Update a operativerecord entity by ID
     */
    async updateOperativerecordRaw(requestParameters: UpdateOperativerecordRequest): Promise<runtime.ApiResponse<EntOperativerecord>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOperativerecord.');
        }

        if (requestParameters.operativerecord === null || requestParameters.operativerecord === undefined) {
            throw new runtime.RequiredError('operativerecord','Required parameter requestParameters.operativerecord was null or undefined when calling updateOperativerecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/operativerecords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntOperativerecordToJSON(requestParameters.operativerecord),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntOperativerecordFromJSON(jsonValue));
    }

    /**
     * update operativerecord by ID
     * Update a operativerecord entity by ID
     */
    async updateOperativerecord(requestParameters: UpdateOperativerecordRequest): Promise<EntOperativerecord> {
        const response = await this.updateOperativerecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * update patient by ID
     * Update a patient entity by ID
     */
    async updatePatientRaw(requestParameters: UpdatePatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePatient.');
        }

        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling updatePatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * update patient by ID
     * Update a patient entity by ID
     */
    async updatePatient(requestParameters: UpdatePatientRequest): Promise<EntPatient> {
        const response = await this.updatePatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * update prescription by ID
     * Update a prescription entity by ID
     */
    async updatePrescriptionRaw(requestParameters: UpdatePrescriptionRequest): Promise<runtime.ApiResponse<EntPrescription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePrescription.');
        }

        if (requestParameters.drugAllergy === null || requestParameters.drugAllergy === undefined) {
            throw new runtime.RequiredError('drugAllergy','Required parameter requestParameters.drugAllergy was null or undefined when calling updatePrescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/prescriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPrescriptionToJSON(requestParameters.drugAllergy),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPrescriptionFromJSON(jsonValue));
    }

    /**
     * update prescription by ID
     * Update a prescription entity by ID
     */
    async updatePrescription(requestParameters: UpdatePrescriptionRequest): Promise<EntPrescription> {
        const response = await this.updatePrescriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * update rent by ID
     * Update a rent entity by ID
     */
    async updateRentRaw(requestParameters: UpdateRentRequest): Promise<runtime.ApiResponse<EntRent>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRent.');
        }

        if (requestParameters.rent === null || requestParameters.rent === undefined) {
            throw new runtime.RequiredError('rent','Required parameter requestParameters.rent was null or undefined when calling updateRent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRentToJSON(requestParameters.rent),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRentFromJSON(jsonValue));
    }

    /**
     * update rent by ID
     * Update a rent entity by ID
     */
    async updateRent(requestParameters: UpdateRentRequest): Promise<EntRent> {
        const response = await this.updateRentRaw(requestParameters);
        return await response.value();
    }

    /**
     * update schemeType by ID
     * Update a schemeType entity by ID
     */
    async updateSchemeTypeRaw(requestParameters: UpdateSchemeTypeRequest): Promise<runtime.ApiResponse<EntSchemeType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSchemeType.');
        }

        if (requestParameters.schemeType === null || requestParameters.schemeType === undefined) {
            throw new runtime.RequiredError('schemeType','Required parameter requestParameters.schemeType was null or undefined when calling updateSchemeType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/schemeTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntSchemeTypeToJSON(requestParameters.schemeType),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSchemeTypeFromJSON(jsonValue));
    }

    /**
     * update schemeType by ID
     * Update a schemeType entity by ID
     */
    async updateSchemeType(requestParameters: UpdateSchemeTypeRequest): Promise<EntSchemeType> {
        const response = await this.updateSchemeTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update tool by ID
     * Update a tool entity by ID
     */
    async updateToolRaw(requestParameters: UpdateToolRequest): Promise<runtime.ApiResponse<EntTool>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTool.');
        }

        if (requestParameters.tool === null || requestParameters.tool === undefined) {
            throw new runtime.RequiredError('tool','Required parameter requestParameters.tool was null or undefined when calling updateTool.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tools/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntToolToJSON(requestParameters.tool),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntToolFromJSON(jsonValue));
    }

    /**
     * update tool by ID
     * Update a tool entity by ID
     */
    async updateTool(requestParameters: UpdateToolRequest): Promise<EntTool> {
        const response = await this.updateToolRaw(requestParameters);
        return await response.value();
    }

}
