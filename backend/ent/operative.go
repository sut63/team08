// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team08/ent/operative"
)

// Operative is the model entity for the Operative schema.
type Operative struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OperativeName holds the value of the "operative_Name" field.
	OperativeName string `json:"operative_Name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OperativeQuery when eager-loading is set.
	Edges OperativeEdges `json:"edges"`
}

// OperativeEdges holds the relations/edges for other nodes in the graph.
type OperativeEdges struct {
	// OperativeOperativerecord holds the value of the Operative_Operativerecord edge.
	OperativeOperativerecord []*Operativerecord
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OperativeOperativerecordOrErr returns the OperativeOperativerecord value or an error if the edge
// was not loaded in eager-loading.
func (e OperativeEdges) OperativeOperativerecordOrErr() ([]*Operativerecord, error) {
	if e.loadedTypes[0] {
		return e.OperativeOperativerecord, nil
	}
	return nil, &NotLoadedError{edge: "Operative_Operativerecord"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Operative) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // operative_Name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Operative fields.
func (o *Operative) assignValues(values ...interface{}) error {
	if m, n := len(values), len(operative.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	o.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field operative_Name", values[0])
	} else if value.Valid {
		o.OperativeName = value.String
	}
	return nil
}

// QueryOperativeOperativerecord queries the Operative_Operativerecord edge of the Operative.
func (o *Operative) QueryOperativeOperativerecord() *OperativerecordQuery {
	return (&OperativeClient{config: o.config}).QueryOperativeOperativerecord(o)
}

// Update returns a builder for updating this Operative.
// Note that, you need to call Operative.Unwrap() before calling this method, if this Operative
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Operative) Update() *OperativeUpdateOne {
	return (&OperativeClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (o *Operative) Unwrap() *Operative {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Operative is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Operative) String() string {
	var builder strings.Builder
	builder.WriteString("Operative(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", operative_Name=")
	builder.WriteString(o.OperativeName)
	builder.WriteByte(')')
	return builder.String()
}

// Operatives is a parsable slice of Operative.
type Operatives []*Operative

func (o Operatives) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
