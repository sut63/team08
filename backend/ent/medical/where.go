// Code generated by entc, DO NOT EDIT.

package medical

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team08/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// MedicalName applies equality check predicate on the "Medical_Name" field. It's identical to MedicalNameEQ.
func MedicalName(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMedicalName), v))
	})
}

// MedicalEmail applies equality check predicate on the "Medical_Email" field. It's identical to MedicalEmailEQ.
func MedicalEmail(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMedicalEmail), v))
	})
}

// MedicalPassword applies equality check predicate on the "Medical_Password" field. It's identical to MedicalPasswordEQ.
func MedicalPassword(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMedicalPassword), v))
	})
}

// MedicalTel applies equality check predicate on the "Medical_Tel" field. It's identical to MedicalTelEQ.
func MedicalTel(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMedicalTel), v))
	})
}

// MedicalNameEQ applies the EQ predicate on the "Medical_Name" field.
func MedicalNameEQ(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMedicalName), v))
	})
}

// MedicalNameNEQ applies the NEQ predicate on the "Medical_Name" field.
func MedicalNameNEQ(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMedicalName), v))
	})
}

// MedicalNameIn applies the In predicate on the "Medical_Name" field.
func MedicalNameIn(vs ...string) predicate.Medical {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medical(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMedicalName), v...))
	})
}

// MedicalNameNotIn applies the NotIn predicate on the "Medical_Name" field.
func MedicalNameNotIn(vs ...string) predicate.Medical {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medical(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMedicalName), v...))
	})
}

// MedicalNameGT applies the GT predicate on the "Medical_Name" field.
func MedicalNameGT(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMedicalName), v))
	})
}

// MedicalNameGTE applies the GTE predicate on the "Medical_Name" field.
func MedicalNameGTE(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMedicalName), v))
	})
}

// MedicalNameLT applies the LT predicate on the "Medical_Name" field.
func MedicalNameLT(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMedicalName), v))
	})
}

// MedicalNameLTE applies the LTE predicate on the "Medical_Name" field.
func MedicalNameLTE(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMedicalName), v))
	})
}

// MedicalNameContains applies the Contains predicate on the "Medical_Name" field.
func MedicalNameContains(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMedicalName), v))
	})
}

// MedicalNameHasPrefix applies the HasPrefix predicate on the "Medical_Name" field.
func MedicalNameHasPrefix(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMedicalName), v))
	})
}

// MedicalNameHasSuffix applies the HasSuffix predicate on the "Medical_Name" field.
func MedicalNameHasSuffix(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMedicalName), v))
	})
}

// MedicalNameEqualFold applies the EqualFold predicate on the "Medical_Name" field.
func MedicalNameEqualFold(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMedicalName), v))
	})
}

// MedicalNameContainsFold applies the ContainsFold predicate on the "Medical_Name" field.
func MedicalNameContainsFold(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMedicalName), v))
	})
}

// MedicalEmailEQ applies the EQ predicate on the "Medical_Email" field.
func MedicalEmailEQ(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMedicalEmail), v))
	})
}

// MedicalEmailNEQ applies the NEQ predicate on the "Medical_Email" field.
func MedicalEmailNEQ(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMedicalEmail), v))
	})
}

// MedicalEmailIn applies the In predicate on the "Medical_Email" field.
func MedicalEmailIn(vs ...string) predicate.Medical {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medical(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMedicalEmail), v...))
	})
}

// MedicalEmailNotIn applies the NotIn predicate on the "Medical_Email" field.
func MedicalEmailNotIn(vs ...string) predicate.Medical {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medical(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMedicalEmail), v...))
	})
}

// MedicalEmailGT applies the GT predicate on the "Medical_Email" field.
func MedicalEmailGT(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMedicalEmail), v))
	})
}

// MedicalEmailGTE applies the GTE predicate on the "Medical_Email" field.
func MedicalEmailGTE(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMedicalEmail), v))
	})
}

// MedicalEmailLT applies the LT predicate on the "Medical_Email" field.
func MedicalEmailLT(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMedicalEmail), v))
	})
}

// MedicalEmailLTE applies the LTE predicate on the "Medical_Email" field.
func MedicalEmailLTE(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMedicalEmail), v))
	})
}

// MedicalEmailContains applies the Contains predicate on the "Medical_Email" field.
func MedicalEmailContains(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMedicalEmail), v))
	})
}

// MedicalEmailHasPrefix applies the HasPrefix predicate on the "Medical_Email" field.
func MedicalEmailHasPrefix(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMedicalEmail), v))
	})
}

// MedicalEmailHasSuffix applies the HasSuffix predicate on the "Medical_Email" field.
func MedicalEmailHasSuffix(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMedicalEmail), v))
	})
}

// MedicalEmailEqualFold applies the EqualFold predicate on the "Medical_Email" field.
func MedicalEmailEqualFold(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMedicalEmail), v))
	})
}

// MedicalEmailContainsFold applies the ContainsFold predicate on the "Medical_Email" field.
func MedicalEmailContainsFold(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMedicalEmail), v))
	})
}

// MedicalPasswordEQ applies the EQ predicate on the "Medical_Password" field.
func MedicalPasswordEQ(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMedicalPassword), v))
	})
}

// MedicalPasswordNEQ applies the NEQ predicate on the "Medical_Password" field.
func MedicalPasswordNEQ(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMedicalPassword), v))
	})
}

// MedicalPasswordIn applies the In predicate on the "Medical_Password" field.
func MedicalPasswordIn(vs ...string) predicate.Medical {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medical(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMedicalPassword), v...))
	})
}

// MedicalPasswordNotIn applies the NotIn predicate on the "Medical_Password" field.
func MedicalPasswordNotIn(vs ...string) predicate.Medical {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medical(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMedicalPassword), v...))
	})
}

// MedicalPasswordGT applies the GT predicate on the "Medical_Password" field.
func MedicalPasswordGT(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMedicalPassword), v))
	})
}

// MedicalPasswordGTE applies the GTE predicate on the "Medical_Password" field.
func MedicalPasswordGTE(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMedicalPassword), v))
	})
}

// MedicalPasswordLT applies the LT predicate on the "Medical_Password" field.
func MedicalPasswordLT(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMedicalPassword), v))
	})
}

// MedicalPasswordLTE applies the LTE predicate on the "Medical_Password" field.
func MedicalPasswordLTE(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMedicalPassword), v))
	})
}

// MedicalPasswordContains applies the Contains predicate on the "Medical_Password" field.
func MedicalPasswordContains(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMedicalPassword), v))
	})
}

// MedicalPasswordHasPrefix applies the HasPrefix predicate on the "Medical_Password" field.
func MedicalPasswordHasPrefix(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMedicalPassword), v))
	})
}

// MedicalPasswordHasSuffix applies the HasSuffix predicate on the "Medical_Password" field.
func MedicalPasswordHasSuffix(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMedicalPassword), v))
	})
}

// MedicalPasswordEqualFold applies the EqualFold predicate on the "Medical_Password" field.
func MedicalPasswordEqualFold(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMedicalPassword), v))
	})
}

// MedicalPasswordContainsFold applies the ContainsFold predicate on the "Medical_Password" field.
func MedicalPasswordContainsFold(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMedicalPassword), v))
	})
}

// MedicalTelEQ applies the EQ predicate on the "Medical_Tel" field.
func MedicalTelEQ(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMedicalTel), v))
	})
}

// MedicalTelNEQ applies the NEQ predicate on the "Medical_Tel" field.
func MedicalTelNEQ(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMedicalTel), v))
	})
}

// MedicalTelIn applies the In predicate on the "Medical_Tel" field.
func MedicalTelIn(vs ...string) predicate.Medical {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medical(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMedicalTel), v...))
	})
}

// MedicalTelNotIn applies the NotIn predicate on the "Medical_Tel" field.
func MedicalTelNotIn(vs ...string) predicate.Medical {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medical(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMedicalTel), v...))
	})
}

// MedicalTelGT applies the GT predicate on the "Medical_Tel" field.
func MedicalTelGT(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMedicalTel), v))
	})
}

// MedicalTelGTE applies the GTE predicate on the "Medical_Tel" field.
func MedicalTelGTE(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMedicalTel), v))
	})
}

// MedicalTelLT applies the LT predicate on the "Medical_Tel" field.
func MedicalTelLT(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMedicalTel), v))
	})
}

// MedicalTelLTE applies the LTE predicate on the "Medical_Tel" field.
func MedicalTelLTE(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMedicalTel), v))
	})
}

// MedicalTelContains applies the Contains predicate on the "Medical_Tel" field.
func MedicalTelContains(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMedicalTel), v))
	})
}

// MedicalTelHasPrefix applies the HasPrefix predicate on the "Medical_Tel" field.
func MedicalTelHasPrefix(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMedicalTel), v))
	})
}

// MedicalTelHasSuffix applies the HasSuffix predicate on the "Medical_Tel" field.
func MedicalTelHasSuffix(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMedicalTel), v))
	})
}

// MedicalTelEqualFold applies the EqualFold predicate on the "Medical_Tel" field.
func MedicalTelEqualFold(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMedicalTel), v))
	})
}

// MedicalTelContainsFold applies the ContainsFold predicate on the "Medical_Tel" field.
func MedicalTelContainsFold(v string) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMedicalTel), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Medical) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Medical) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Medical) predicate.Medical {
	return predicate.Medical(func(s *sql.Selector) {
		p(s.Not())
	})
}
