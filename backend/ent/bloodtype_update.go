// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team08/ent/bloodtype"
	"github.com/sut63/team08/ent/patient"
	"github.com/sut63/team08/ent/predicate"
)

// BloodtypeUpdate is the builder for updating Bloodtype entities.
type BloodtypeUpdate struct {
	config
	hooks      []Hook
	mutation   *BloodtypeMutation
	predicates []predicate.Bloodtype
}

// Where adds a new predicate for the builder.
func (bu *BloodtypeUpdate) Where(ps ...predicate.Bloodtype) *BloodtypeUpdate {
	bu.predicates = append(bu.predicates, ps...)
	return bu
}

// SetBTname sets the BTname field.
func (bu *BloodtypeUpdate) SetBTname(s string) *BloodtypeUpdate {
	bu.mutation.SetBTname(s)
	return bu
}

// AddFrombloodtypeIDs adds the frombloodtype edge to Patient by ids.
func (bu *BloodtypeUpdate) AddFrombloodtypeIDs(ids ...int) *BloodtypeUpdate {
	bu.mutation.AddFrombloodtypeIDs(ids...)
	return bu
}

// AddFrombloodtype adds the frombloodtype edges to Patient.
func (bu *BloodtypeUpdate) AddFrombloodtype(p ...*Patient) *BloodtypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.AddFrombloodtypeIDs(ids...)
}

// Mutation returns the BloodtypeMutation object of the builder.
func (bu *BloodtypeUpdate) Mutation() *BloodtypeMutation {
	return bu.mutation
}

// RemoveFrombloodtypeIDs removes the frombloodtype edge to Patient by ids.
func (bu *BloodtypeUpdate) RemoveFrombloodtypeIDs(ids ...int) *BloodtypeUpdate {
	bu.mutation.RemoveFrombloodtypeIDs(ids...)
	return bu
}

// RemoveFrombloodtype removes frombloodtype edges to Patient.
func (bu *BloodtypeUpdate) RemoveFrombloodtype(p ...*Patient) *BloodtypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.RemoveFrombloodtypeIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (bu *BloodtypeUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := bu.mutation.BTname(); ok {
		if err := bloodtype.BTnameValidator(v); err != nil {
			return 0, &ValidationError{Name: "BTname", err: fmt.Errorf("ent: validator failed for field \"BTname\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BloodtypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BloodtypeUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BloodtypeUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BloodtypeUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BloodtypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bloodtype.Table,
			Columns: bloodtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bloodtype.FieldID,
			},
		},
	}
	if ps := bu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.BTname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bloodtype.FieldBTname,
		})
	}
	if nodes := bu.mutation.RemovedFrombloodtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bloodtype.FrombloodtypeTable,
			Columns: []string{bloodtype.FrombloodtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.FrombloodtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bloodtype.FrombloodtypeTable,
			Columns: []string{bloodtype.FrombloodtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bloodtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BloodtypeUpdateOne is the builder for updating a single Bloodtype entity.
type BloodtypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *BloodtypeMutation
}

// SetBTname sets the BTname field.
func (buo *BloodtypeUpdateOne) SetBTname(s string) *BloodtypeUpdateOne {
	buo.mutation.SetBTname(s)
	return buo
}

// AddFrombloodtypeIDs adds the frombloodtype edge to Patient by ids.
func (buo *BloodtypeUpdateOne) AddFrombloodtypeIDs(ids ...int) *BloodtypeUpdateOne {
	buo.mutation.AddFrombloodtypeIDs(ids...)
	return buo
}

// AddFrombloodtype adds the frombloodtype edges to Patient.
func (buo *BloodtypeUpdateOne) AddFrombloodtype(p ...*Patient) *BloodtypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.AddFrombloodtypeIDs(ids...)
}

// Mutation returns the BloodtypeMutation object of the builder.
func (buo *BloodtypeUpdateOne) Mutation() *BloodtypeMutation {
	return buo.mutation
}

// RemoveFrombloodtypeIDs removes the frombloodtype edge to Patient by ids.
func (buo *BloodtypeUpdateOne) RemoveFrombloodtypeIDs(ids ...int) *BloodtypeUpdateOne {
	buo.mutation.RemoveFrombloodtypeIDs(ids...)
	return buo
}

// RemoveFrombloodtype removes frombloodtype edges to Patient.
func (buo *BloodtypeUpdateOne) RemoveFrombloodtype(p ...*Patient) *BloodtypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.RemoveFrombloodtypeIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (buo *BloodtypeUpdateOne) Save(ctx context.Context) (*Bloodtype, error) {
	if v, ok := buo.mutation.BTname(); ok {
		if err := bloodtype.BTnameValidator(v); err != nil {
			return nil, &ValidationError{Name: "BTname", err: fmt.Errorf("ent: validator failed for field \"BTname\": %w", err)}
		}
	}

	var (
		err  error
		node *Bloodtype
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BloodtypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BloodtypeUpdateOne) SaveX(ctx context.Context) *Bloodtype {
	b, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return b
}

// Exec executes the query on the entity.
func (buo *BloodtypeUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BloodtypeUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BloodtypeUpdateOne) sqlSave(ctx context.Context) (b *Bloodtype, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bloodtype.Table,
			Columns: bloodtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bloodtype.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Bloodtype.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := buo.mutation.BTname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bloodtype.FieldBTname,
		})
	}
	if nodes := buo.mutation.RemovedFrombloodtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bloodtype.FrombloodtypeTable,
			Columns: []string{bloodtype.FrombloodtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.FrombloodtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bloodtype.FrombloodtypeTable,
			Columns: []string{bloodtype.FrombloodtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	b = &Bloodtype{config: buo.config}
	_spec.Assign = b.assignValues
	_spec.ScanValues = b.scanValues()
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bloodtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return b, nil
}
