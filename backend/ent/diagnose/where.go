// Code generated by entc, DO NOT EDIT.

package diagnose

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/sut63/team08/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DiagnoseID applies equality check predicate on the "Diagnose_ID" field. It's identical to DiagnoseIDEQ.
func DiagnoseID(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiagnoseID), v))
	})
}

// DiagnoseSymptoms applies equality check predicate on the "Diagnose_Symptoms" field. It's identical to DiagnoseSymptomsEQ.
func DiagnoseSymptoms(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiagnoseSymptoms), v))
	})
}

// DiagnoseNote applies equality check predicate on the "Diagnose_Note" field. It's identical to DiagnoseNoteEQ.
func DiagnoseNote(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiagnoseNote), v))
	})
}

// DiagnoseIDEQ applies the EQ predicate on the "Diagnose_ID" field.
func DiagnoseIDEQ(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiagnoseID), v))
	})
}

// DiagnoseIDNEQ applies the NEQ predicate on the "Diagnose_ID" field.
func DiagnoseIDNEQ(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiagnoseID), v))
	})
}

// DiagnoseIDIn applies the In predicate on the "Diagnose_ID" field.
func DiagnoseIDIn(vs ...string) predicate.Diagnose {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Diagnose(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDiagnoseID), v...))
	})
}

// DiagnoseIDNotIn applies the NotIn predicate on the "Diagnose_ID" field.
func DiagnoseIDNotIn(vs ...string) predicate.Diagnose {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Diagnose(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDiagnoseID), v...))
	})
}

// DiagnoseIDGT applies the GT predicate on the "Diagnose_ID" field.
func DiagnoseIDGT(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiagnoseID), v))
	})
}

// DiagnoseIDGTE applies the GTE predicate on the "Diagnose_ID" field.
func DiagnoseIDGTE(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiagnoseID), v))
	})
}

// DiagnoseIDLT applies the LT predicate on the "Diagnose_ID" field.
func DiagnoseIDLT(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiagnoseID), v))
	})
}

// DiagnoseIDLTE applies the LTE predicate on the "Diagnose_ID" field.
func DiagnoseIDLTE(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiagnoseID), v))
	})
}

// DiagnoseIDContains applies the Contains predicate on the "Diagnose_ID" field.
func DiagnoseIDContains(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDiagnoseID), v))
	})
}

// DiagnoseIDHasPrefix applies the HasPrefix predicate on the "Diagnose_ID" field.
func DiagnoseIDHasPrefix(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDiagnoseID), v))
	})
}

// DiagnoseIDHasSuffix applies the HasSuffix predicate on the "Diagnose_ID" field.
func DiagnoseIDHasSuffix(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDiagnoseID), v))
	})
}

// DiagnoseIDEqualFold applies the EqualFold predicate on the "Diagnose_ID" field.
func DiagnoseIDEqualFold(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDiagnoseID), v))
	})
}

// DiagnoseIDContainsFold applies the ContainsFold predicate on the "Diagnose_ID" field.
func DiagnoseIDContainsFold(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDiagnoseID), v))
	})
}

// DiagnoseSymptomsEQ applies the EQ predicate on the "Diagnose_Symptoms" field.
func DiagnoseSymptomsEQ(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiagnoseSymptoms), v))
	})
}

// DiagnoseSymptomsNEQ applies the NEQ predicate on the "Diagnose_Symptoms" field.
func DiagnoseSymptomsNEQ(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiagnoseSymptoms), v))
	})
}

// DiagnoseSymptomsIn applies the In predicate on the "Diagnose_Symptoms" field.
func DiagnoseSymptomsIn(vs ...string) predicate.Diagnose {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Diagnose(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDiagnoseSymptoms), v...))
	})
}

// DiagnoseSymptomsNotIn applies the NotIn predicate on the "Diagnose_Symptoms" field.
func DiagnoseSymptomsNotIn(vs ...string) predicate.Diagnose {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Diagnose(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDiagnoseSymptoms), v...))
	})
}

// DiagnoseSymptomsGT applies the GT predicate on the "Diagnose_Symptoms" field.
func DiagnoseSymptomsGT(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiagnoseSymptoms), v))
	})
}

// DiagnoseSymptomsGTE applies the GTE predicate on the "Diagnose_Symptoms" field.
func DiagnoseSymptomsGTE(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiagnoseSymptoms), v))
	})
}

// DiagnoseSymptomsLT applies the LT predicate on the "Diagnose_Symptoms" field.
func DiagnoseSymptomsLT(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiagnoseSymptoms), v))
	})
}

// DiagnoseSymptomsLTE applies the LTE predicate on the "Diagnose_Symptoms" field.
func DiagnoseSymptomsLTE(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiagnoseSymptoms), v))
	})
}

// DiagnoseSymptomsContains applies the Contains predicate on the "Diagnose_Symptoms" field.
func DiagnoseSymptomsContains(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDiagnoseSymptoms), v))
	})
}

// DiagnoseSymptomsHasPrefix applies the HasPrefix predicate on the "Diagnose_Symptoms" field.
func DiagnoseSymptomsHasPrefix(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDiagnoseSymptoms), v))
	})
}

// DiagnoseSymptomsHasSuffix applies the HasSuffix predicate on the "Diagnose_Symptoms" field.
func DiagnoseSymptomsHasSuffix(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDiagnoseSymptoms), v))
	})
}

// DiagnoseSymptomsEqualFold applies the EqualFold predicate on the "Diagnose_Symptoms" field.
func DiagnoseSymptomsEqualFold(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDiagnoseSymptoms), v))
	})
}

// DiagnoseSymptomsContainsFold applies the ContainsFold predicate on the "Diagnose_Symptoms" field.
func DiagnoseSymptomsContainsFold(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDiagnoseSymptoms), v))
	})
}

// DiagnoseNoteEQ applies the EQ predicate on the "Diagnose_Note" field.
func DiagnoseNoteEQ(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiagnoseNote), v))
	})
}

// DiagnoseNoteNEQ applies the NEQ predicate on the "Diagnose_Note" field.
func DiagnoseNoteNEQ(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiagnoseNote), v))
	})
}

// DiagnoseNoteIn applies the In predicate on the "Diagnose_Note" field.
func DiagnoseNoteIn(vs ...string) predicate.Diagnose {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Diagnose(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDiagnoseNote), v...))
	})
}

// DiagnoseNoteNotIn applies the NotIn predicate on the "Diagnose_Note" field.
func DiagnoseNoteNotIn(vs ...string) predicate.Diagnose {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Diagnose(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDiagnoseNote), v...))
	})
}

// DiagnoseNoteGT applies the GT predicate on the "Diagnose_Note" field.
func DiagnoseNoteGT(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiagnoseNote), v))
	})
}

// DiagnoseNoteGTE applies the GTE predicate on the "Diagnose_Note" field.
func DiagnoseNoteGTE(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiagnoseNote), v))
	})
}

// DiagnoseNoteLT applies the LT predicate on the "Diagnose_Note" field.
func DiagnoseNoteLT(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiagnoseNote), v))
	})
}

// DiagnoseNoteLTE applies the LTE predicate on the "Diagnose_Note" field.
func DiagnoseNoteLTE(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiagnoseNote), v))
	})
}

// DiagnoseNoteContains applies the Contains predicate on the "Diagnose_Note" field.
func DiagnoseNoteContains(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDiagnoseNote), v))
	})
}

// DiagnoseNoteHasPrefix applies the HasPrefix predicate on the "Diagnose_Note" field.
func DiagnoseNoteHasPrefix(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDiagnoseNote), v))
	})
}

// DiagnoseNoteHasSuffix applies the HasSuffix predicate on the "Diagnose_Note" field.
func DiagnoseNoteHasSuffix(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDiagnoseNote), v))
	})
}

// DiagnoseNoteEqualFold applies the EqualFold predicate on the "Diagnose_Note" field.
func DiagnoseNoteEqualFold(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDiagnoseNote), v))
	})
}

// DiagnoseNoteContainsFold applies the ContainsFold predicate on the "Diagnose_Note" field.
func DiagnoseNoteContainsFold(v string) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDiagnoseNote), v))
	})
}

// HasDisease applies the HasEdge predicate on the "disease" edge.
func HasDisease() predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DiseaseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DiseaseTable, DiseaseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDiseaseWith applies the HasEdge predicate on the "disease" edge with a given conditions (other predicates).
func HasDiseaseWith(preds ...predicate.Disease) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DiseaseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DiseaseTable, DiseaseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDepartment applies the HasEdge predicate on the "department" edge.
func HasDepartment() predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DepartmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DepartmentTable, DepartmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDepartmentWith applies the HasEdge predicate on the "department" edge with a given conditions (other predicates).
func HasDepartmentWith(preds ...predicate.Department) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DepartmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DepartmentTable, DepartmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDoctor applies the HasEdge predicate on the "doctor" edge.
func HasDoctor() predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DoctorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DoctorTable, DoctorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDoctorWith applies the HasEdge predicate on the "doctor" edge with a given conditions (other predicates).
func HasDoctorWith(preds ...predicate.Doctor) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DoctorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DoctorTable, DoctorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Diagnose) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Diagnose) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Diagnose) predicate.Diagnose {
	return predicate.Diagnose(func(s *sql.Selector) {
		p(s.Not())
	})
}
