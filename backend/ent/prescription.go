// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team08/ent/doctor"
	"github.com/sut63/team08/ent/drug"
	"github.com/sut63/team08/ent/nurse"
	"github.com/sut63/team08/ent/patient"
	"github.com/sut63/team08/ent/prescription"
)

// Prescription is the model entity for the Prescription schema.
type Prescription struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PrescripNote holds the value of the "Prescrip_Note" field.
	PrescripNote string `json:"Prescrip_Note,omitempty"`
	// PrescripDateTime holds the value of the "Prescrip_DateTime" field.
	PrescripDateTime time.Time `json:"Prescrip_DateTime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PrescriptionQuery when eager-loading is set.
	Edges      PrescriptionEdges `json:"edges"`
	doctor_id  *int
	drug_id    *int
	nurse_id   *int
	patient_id *int
}

// PrescriptionEdges holds the relations/edges for other nodes in the graph.
type PrescriptionEdges struct {
	// Doctor holds the value of the doctor edge.
	Doctor *Doctor
	// Patient holds the value of the patient edge.
	Patient *Patient
	// Nurse holds the value of the nurse edge.
	Nurse *Nurse
	// Drug holds the value of the drug edge.
	Drug *Drug
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// DoctorOrErr returns the Doctor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrescriptionEdges) DoctorOrErr() (*Doctor, error) {
	if e.loadedTypes[0] {
		if e.Doctor == nil {
			// The edge doctor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: doctor.Label}
		}
		return e.Doctor, nil
	}
	return nil, &NotLoadedError{edge: "doctor"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrescriptionEdges) PatientOrErr() (*Patient, error) {
	if e.loadedTypes[1] {
		if e.Patient == nil {
			// The edge patient was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// NurseOrErr returns the Nurse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrescriptionEdges) NurseOrErr() (*Nurse, error) {
	if e.loadedTypes[2] {
		if e.Nurse == nil {
			// The edge nurse was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: nurse.Label}
		}
		return e.Nurse, nil
	}
	return nil, &NotLoadedError{edge: "nurse"}
}

// DrugOrErr returns the Drug value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrescriptionEdges) DrugOrErr() (*Drug, error) {
	if e.loadedTypes[3] {
		if e.Drug == nil {
			// The edge drug was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: drug.Label}
		}
		return e.Drug, nil
	}
	return nil, &NotLoadedError{edge: "drug"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Prescription) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Prescrip_Note
		&sql.NullTime{},   // Prescrip_DateTime
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Prescription) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // doctor_id
		&sql.NullInt64{}, // drug_id
		&sql.NullInt64{}, // nurse_id
		&sql.NullInt64{}, // patient_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Prescription fields.
func (pr *Prescription) assignValues(values ...interface{}) error {
	if m, n := len(values), len(prescription.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Prescrip_Note", values[0])
	} else if value.Valid {
		pr.PrescripNote = value.String
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field Prescrip_DateTime", values[1])
	} else if value.Valid {
		pr.PrescripDateTime = value.Time
	}
	values = values[2:]
	if len(values) == len(prescription.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field doctor_id", value)
		} else if value.Valid {
			pr.doctor_id = new(int)
			*pr.doctor_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field drug_id", value)
		} else if value.Valid {
			pr.drug_id = new(int)
			*pr.drug_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field nurse_id", value)
		} else if value.Valid {
			pr.nurse_id = new(int)
			*pr.nurse_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field patient_id", value)
		} else if value.Valid {
			pr.patient_id = new(int)
			*pr.patient_id = int(value.Int64)
		}
	}
	return nil
}

// QueryDoctor queries the doctor edge of the Prescription.
func (pr *Prescription) QueryDoctor() *DoctorQuery {
	return (&PrescriptionClient{config: pr.config}).QueryDoctor(pr)
}

// QueryPatient queries the patient edge of the Prescription.
func (pr *Prescription) QueryPatient() *PatientQuery {
	return (&PrescriptionClient{config: pr.config}).QueryPatient(pr)
}

// QueryNurse queries the nurse edge of the Prescription.
func (pr *Prescription) QueryNurse() *NurseQuery {
	return (&PrescriptionClient{config: pr.config}).QueryNurse(pr)
}

// QueryDrug queries the drug edge of the Prescription.
func (pr *Prescription) QueryDrug() *DrugQuery {
	return (&PrescriptionClient{config: pr.config}).QueryDrug(pr)
}

// Update returns a builder for updating this Prescription.
// Note that, you need to call Prescription.Unwrap() before calling this method, if this Prescription
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Prescription) Update() *PrescriptionUpdateOne {
	return (&PrescriptionClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Prescription) Unwrap() *Prescription {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Prescription is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Prescription) String() string {
	var builder strings.Builder
	builder.WriteString("Prescription(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", Prescrip_Note=")
	builder.WriteString(pr.PrescripNote)
	builder.WriteString(", Prescrip_DateTime=")
	builder.WriteString(pr.PrescripDateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Prescriptions is a parsable slice of Prescription.
type Prescriptions []*Prescription

func (pr Prescriptions) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
