// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/sut63/team08/ent/migrate"

	"github.com/sut63/team08/ent/bloodtype"
	"github.com/sut63/team08/ent/certificate"
	"github.com/sut63/team08/ent/coveredperson"
	"github.com/sut63/team08/ent/department"
	"github.com/sut63/team08/ent/diagnose"
	"github.com/sut63/team08/ent/disease"
	"github.com/sut63/team08/ent/doctor"
	"github.com/sut63/team08/ent/drug"
	"github.com/sut63/team08/ent/examinationroom"
	"github.com/sut63/team08/ent/fund"
	"github.com/sut63/team08/ent/gender"
	"github.com/sut63/team08/ent/medical"
	"github.com/sut63/team08/ent/nurse"
	"github.com/sut63/team08/ent/operative"
	"github.com/sut63/team08/ent/operativerecord"
	"github.com/sut63/team08/ent/patient"
	"github.com/sut63/team08/ent/prefix"
	"github.com/sut63/team08/ent/prescription"
	"github.com/sut63/team08/ent/rent"
	"github.com/sut63/team08/ent/room"
	"github.com/sut63/team08/ent/roomtype"
	"github.com/sut63/team08/ent/schemetype"
	"github.com/sut63/team08/ent/tool"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Bloodtype is the client for interacting with the Bloodtype builders.
	Bloodtype *BloodtypeClient
	// Certificate is the client for interacting with the Certificate builders.
	Certificate *CertificateClient
	// CoveredPerson is the client for interacting with the CoveredPerson builders.
	CoveredPerson *CoveredPersonClient
	// Department is the client for interacting with the Department builders.
	Department *DepartmentClient
	// Diagnose is the client for interacting with the Diagnose builders.
	Diagnose *DiagnoseClient
	// Disease is the client for interacting with the Disease builders.
	Disease *DiseaseClient
	// Doctor is the client for interacting with the Doctor builders.
	Doctor *DoctorClient
	// Drug is the client for interacting with the Drug builders.
	Drug *DrugClient
	// Examinationroom is the client for interacting with the Examinationroom builders.
	Examinationroom *ExaminationroomClient
	// Fund is the client for interacting with the Fund builders.
	Fund *FundClient
	// Gender is the client for interacting with the Gender builders.
	Gender *GenderClient
	// Medical is the client for interacting with the Medical builders.
	Medical *MedicalClient
	// Nurse is the client for interacting with the Nurse builders.
	Nurse *NurseClient
	// Operative is the client for interacting with the Operative builders.
	Operative *OperativeClient
	// Operativerecord is the client for interacting with the Operativerecord builders.
	Operativerecord *OperativerecordClient
	// Patient is the client for interacting with the Patient builders.
	Patient *PatientClient
	// Prefix is the client for interacting with the Prefix builders.
	Prefix *PrefixClient
	// Prescription is the client for interacting with the Prescription builders.
	Prescription *PrescriptionClient
	// Rent is the client for interacting with the Rent builders.
	Rent *RentClient
	// Room is the client for interacting with the Room builders.
	Room *RoomClient
	// Roomtype is the client for interacting with the Roomtype builders.
	Roomtype *RoomtypeClient
	// SchemeType is the client for interacting with the SchemeType builders.
	SchemeType *SchemeTypeClient
	// Tool is the client for interacting with the Tool builders.
	Tool *ToolClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Bloodtype = NewBloodtypeClient(c.config)
	c.Certificate = NewCertificateClient(c.config)
	c.CoveredPerson = NewCoveredPersonClient(c.config)
	c.Department = NewDepartmentClient(c.config)
	c.Diagnose = NewDiagnoseClient(c.config)
	c.Disease = NewDiseaseClient(c.config)
	c.Doctor = NewDoctorClient(c.config)
	c.Drug = NewDrugClient(c.config)
	c.Examinationroom = NewExaminationroomClient(c.config)
	c.Fund = NewFundClient(c.config)
	c.Gender = NewGenderClient(c.config)
	c.Medical = NewMedicalClient(c.config)
	c.Nurse = NewNurseClient(c.config)
	c.Operative = NewOperativeClient(c.config)
	c.Operativerecord = NewOperativerecordClient(c.config)
	c.Patient = NewPatientClient(c.config)
	c.Prefix = NewPrefixClient(c.config)
	c.Prescription = NewPrescriptionClient(c.config)
	c.Rent = NewRentClient(c.config)
	c.Room = NewRoomClient(c.config)
	c.Roomtype = NewRoomtypeClient(c.config)
	c.SchemeType = NewSchemeTypeClient(c.config)
	c.Tool = NewToolClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Bloodtype:       NewBloodtypeClient(cfg),
		Certificate:     NewCertificateClient(cfg),
		CoveredPerson:   NewCoveredPersonClient(cfg),
		Department:      NewDepartmentClient(cfg),
		Diagnose:        NewDiagnoseClient(cfg),
		Disease:         NewDiseaseClient(cfg),
		Doctor:          NewDoctorClient(cfg),
		Drug:            NewDrugClient(cfg),
		Examinationroom: NewExaminationroomClient(cfg),
		Fund:            NewFundClient(cfg),
		Gender:          NewGenderClient(cfg),
		Medical:         NewMedicalClient(cfg),
		Nurse:           NewNurseClient(cfg),
		Operative:       NewOperativeClient(cfg),
		Operativerecord: NewOperativerecordClient(cfg),
		Patient:         NewPatientClient(cfg),
		Prefix:          NewPrefixClient(cfg),
		Prescription:    NewPrescriptionClient(cfg),
		Rent:            NewRentClient(cfg),
		Room:            NewRoomClient(cfg),
		Roomtype:        NewRoomtypeClient(cfg),
		SchemeType:      NewSchemeTypeClient(cfg),
		Tool:            NewToolClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:          cfg,
		Bloodtype:       NewBloodtypeClient(cfg),
		Certificate:     NewCertificateClient(cfg),
		CoveredPerson:   NewCoveredPersonClient(cfg),
		Department:      NewDepartmentClient(cfg),
		Diagnose:        NewDiagnoseClient(cfg),
		Disease:         NewDiseaseClient(cfg),
		Doctor:          NewDoctorClient(cfg),
		Drug:            NewDrugClient(cfg),
		Examinationroom: NewExaminationroomClient(cfg),
		Fund:            NewFundClient(cfg),
		Gender:          NewGenderClient(cfg),
		Medical:         NewMedicalClient(cfg),
		Nurse:           NewNurseClient(cfg),
		Operative:       NewOperativeClient(cfg),
		Operativerecord: NewOperativerecordClient(cfg),
		Patient:         NewPatientClient(cfg),
		Prefix:          NewPrefixClient(cfg),
		Prescription:    NewPrescriptionClient(cfg),
		Rent:            NewRentClient(cfg),
		Room:            NewRoomClient(cfg),
		Roomtype:        NewRoomtypeClient(cfg),
		SchemeType:      NewSchemeTypeClient(cfg),
		Tool:            NewToolClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Bloodtype.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Bloodtype.Use(hooks...)
	c.Certificate.Use(hooks...)
	c.CoveredPerson.Use(hooks...)
	c.Department.Use(hooks...)
	c.Diagnose.Use(hooks...)
	c.Disease.Use(hooks...)
	c.Doctor.Use(hooks...)
	c.Drug.Use(hooks...)
	c.Examinationroom.Use(hooks...)
	c.Fund.Use(hooks...)
	c.Gender.Use(hooks...)
	c.Medical.Use(hooks...)
	c.Nurse.Use(hooks...)
	c.Operative.Use(hooks...)
	c.Operativerecord.Use(hooks...)
	c.Patient.Use(hooks...)
	c.Prefix.Use(hooks...)
	c.Prescription.Use(hooks...)
	c.Rent.Use(hooks...)
	c.Room.Use(hooks...)
	c.Roomtype.Use(hooks...)
	c.SchemeType.Use(hooks...)
	c.Tool.Use(hooks...)
}

// BloodtypeClient is a client for the Bloodtype schema.
type BloodtypeClient struct {
	config
}

// NewBloodtypeClient returns a client for the Bloodtype from the given config.
func NewBloodtypeClient(c config) *BloodtypeClient {
	return &BloodtypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bloodtype.Hooks(f(g(h())))`.
func (c *BloodtypeClient) Use(hooks ...Hook) {
	c.hooks.Bloodtype = append(c.hooks.Bloodtype, hooks...)
}

// Create returns a create builder for Bloodtype.
func (c *BloodtypeClient) Create() *BloodtypeCreate {
	mutation := newBloodtypeMutation(c.config, OpCreate)
	return &BloodtypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Bloodtype.
func (c *BloodtypeClient) Update() *BloodtypeUpdate {
	mutation := newBloodtypeMutation(c.config, OpUpdate)
	return &BloodtypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BloodtypeClient) UpdateOne(b *Bloodtype) *BloodtypeUpdateOne {
	mutation := newBloodtypeMutation(c.config, OpUpdateOne, withBloodtype(b))
	return &BloodtypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BloodtypeClient) UpdateOneID(id int) *BloodtypeUpdateOne {
	mutation := newBloodtypeMutation(c.config, OpUpdateOne, withBloodtypeID(id))
	return &BloodtypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bloodtype.
func (c *BloodtypeClient) Delete() *BloodtypeDelete {
	mutation := newBloodtypeMutation(c.config, OpDelete)
	return &BloodtypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BloodtypeClient) DeleteOne(b *Bloodtype) *BloodtypeDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BloodtypeClient) DeleteOneID(id int) *BloodtypeDeleteOne {
	builder := c.Delete().Where(bloodtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BloodtypeDeleteOne{builder}
}

// Create returns a query builder for Bloodtype.
func (c *BloodtypeClient) Query() *BloodtypeQuery {
	return &BloodtypeQuery{config: c.config}
}

// Get returns a Bloodtype entity by its id.
func (c *BloodtypeClient) Get(ctx context.Context, id int) (*Bloodtype, error) {
	return c.Query().Where(bloodtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BloodtypeClient) GetX(ctx context.Context, id int) *Bloodtype {
	b, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return b
}

// QueryFrombloodtype queries the frombloodtype edge of a Bloodtype.
func (c *BloodtypeClient) QueryFrombloodtype(b *Bloodtype) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bloodtype.Table, bloodtype.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bloodtype.FrombloodtypeTable, bloodtype.FrombloodtypeColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BloodtypeClient) Hooks() []Hook {
	return c.hooks.Bloodtype
}

// CertificateClient is a client for the Certificate schema.
type CertificateClient struct {
	config
}

// NewCertificateClient returns a client for the Certificate from the given config.
func NewCertificateClient(c config) *CertificateClient {
	return &CertificateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `certificate.Hooks(f(g(h())))`.
func (c *CertificateClient) Use(hooks ...Hook) {
	c.hooks.Certificate = append(c.hooks.Certificate, hooks...)
}

// Create returns a create builder for Certificate.
func (c *CertificateClient) Create() *CertificateCreate {
	mutation := newCertificateMutation(c.config, OpCreate)
	return &CertificateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Certificate.
func (c *CertificateClient) Update() *CertificateUpdate {
	mutation := newCertificateMutation(c.config, OpUpdate)
	return &CertificateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CertificateClient) UpdateOne(ce *Certificate) *CertificateUpdateOne {
	mutation := newCertificateMutation(c.config, OpUpdateOne, withCertificate(ce))
	return &CertificateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CertificateClient) UpdateOneID(id int) *CertificateUpdateOne {
	mutation := newCertificateMutation(c.config, OpUpdateOne, withCertificateID(id))
	return &CertificateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Certificate.
func (c *CertificateClient) Delete() *CertificateDelete {
	mutation := newCertificateMutation(c.config, OpDelete)
	return &CertificateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CertificateClient) DeleteOne(ce *Certificate) *CertificateDeleteOne {
	return c.DeleteOneID(ce.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CertificateClient) DeleteOneID(id int) *CertificateDeleteOne {
	builder := c.Delete().Where(certificate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CertificateDeleteOne{builder}
}

// Create returns a query builder for Certificate.
func (c *CertificateClient) Query() *CertificateQuery {
	return &CertificateQuery{config: c.config}
}

// Get returns a Certificate entity by its id.
func (c *CertificateClient) Get(ctx context.Context, id int) (*Certificate, error) {
	return c.Query().Where(certificate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CertificateClient) GetX(ctx context.Context, id int) *Certificate {
	ce, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ce
}

// QueryCertificateCoveredPerson queries the Certificate_CoveredPerson edge of a Certificate.
func (c *CertificateClient) QueryCertificateCoveredPerson(ce *Certificate) *CoveredPersonQuery {
	query := &CoveredPersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(certificate.Table, certificate.FieldID, id),
			sqlgraph.To(coveredperson.Table, coveredperson.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, certificate.CertificateCoveredPersonTable, certificate.CertificateCoveredPersonColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CertificateClient) Hooks() []Hook {
	return c.hooks.Certificate
}

// CoveredPersonClient is a client for the CoveredPerson schema.
type CoveredPersonClient struct {
	config
}

// NewCoveredPersonClient returns a client for the CoveredPerson from the given config.
func NewCoveredPersonClient(c config) *CoveredPersonClient {
	return &CoveredPersonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coveredperson.Hooks(f(g(h())))`.
func (c *CoveredPersonClient) Use(hooks ...Hook) {
	c.hooks.CoveredPerson = append(c.hooks.CoveredPerson, hooks...)
}

// Create returns a create builder for CoveredPerson.
func (c *CoveredPersonClient) Create() *CoveredPersonCreate {
	mutation := newCoveredPersonMutation(c.config, OpCreate)
	return &CoveredPersonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for CoveredPerson.
func (c *CoveredPersonClient) Update() *CoveredPersonUpdate {
	mutation := newCoveredPersonMutation(c.config, OpUpdate)
	return &CoveredPersonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoveredPersonClient) UpdateOne(cp *CoveredPerson) *CoveredPersonUpdateOne {
	mutation := newCoveredPersonMutation(c.config, OpUpdateOne, withCoveredPerson(cp))
	return &CoveredPersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoveredPersonClient) UpdateOneID(id int) *CoveredPersonUpdateOne {
	mutation := newCoveredPersonMutation(c.config, OpUpdateOne, withCoveredPersonID(id))
	return &CoveredPersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CoveredPerson.
func (c *CoveredPersonClient) Delete() *CoveredPersonDelete {
	mutation := newCoveredPersonMutation(c.config, OpDelete)
	return &CoveredPersonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CoveredPersonClient) DeleteOne(cp *CoveredPerson) *CoveredPersonDeleteOne {
	return c.DeleteOneID(cp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CoveredPersonClient) DeleteOneID(id int) *CoveredPersonDeleteOne {
	builder := c.Delete().Where(coveredperson.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoveredPersonDeleteOne{builder}
}

// Create returns a query builder for CoveredPerson.
func (c *CoveredPersonClient) Query() *CoveredPersonQuery {
	return &CoveredPersonQuery{config: c.config}
}

// Get returns a CoveredPerson entity by its id.
func (c *CoveredPersonClient) Get(ctx context.Context, id int) (*CoveredPerson, error) {
	return c.Query().Where(coveredperson.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoveredPersonClient) GetX(ctx context.Context, id int) *CoveredPerson {
	cp, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cp
}

// QueryPatient queries the Patient edge of a CoveredPerson.
func (c *CoveredPersonClient) QueryPatient(cp *CoveredPerson) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coveredperson.Table, coveredperson.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coveredperson.PatientTable, coveredperson.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySchemeType queries the SchemeType edge of a CoveredPerson.
func (c *CoveredPersonClient) QuerySchemeType(cp *CoveredPerson) *SchemeTypeQuery {
	query := &SchemeTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coveredperson.Table, coveredperson.FieldID, id),
			sqlgraph.To(schemetype.Table, schemetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coveredperson.SchemeTypeTable, coveredperson.SchemeTypeColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFund queries the Fund edge of a CoveredPerson.
func (c *CoveredPersonClient) QueryFund(cp *CoveredPerson) *FundQuery {
	query := &FundQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coveredperson.Table, coveredperson.FieldID, id),
			sqlgraph.To(fund.Table, fund.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coveredperson.FundTable, coveredperson.FundColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCertificate queries the Certificate edge of a CoveredPerson.
func (c *CoveredPersonClient) QueryCertificate(cp *CoveredPerson) *CertificateQuery {
	query := &CertificateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coveredperson.Table, coveredperson.FieldID, id),
			sqlgraph.To(certificate.Table, certificate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coveredperson.CertificateTable, coveredperson.CertificateColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CoveredPersonClient) Hooks() []Hook {
	return c.hooks.CoveredPerson
}

// DepartmentClient is a client for the Department schema.
type DepartmentClient struct {
	config
}

// NewDepartmentClient returns a client for the Department from the given config.
func NewDepartmentClient(c config) *DepartmentClient {
	return &DepartmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `department.Hooks(f(g(h())))`.
func (c *DepartmentClient) Use(hooks ...Hook) {
	c.hooks.Department = append(c.hooks.Department, hooks...)
}

// Create returns a create builder for Department.
func (c *DepartmentClient) Create() *DepartmentCreate {
	mutation := newDepartmentMutation(c.config, OpCreate)
	return &DepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Department.
func (c *DepartmentClient) Update() *DepartmentUpdate {
	mutation := newDepartmentMutation(c.config, OpUpdate)
	return &DepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DepartmentClient) UpdateOne(d *Department) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartment(d))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DepartmentClient) UpdateOneID(id int) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartmentID(id))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Department.
func (c *DepartmentClient) Delete() *DepartmentDelete {
	mutation := newDepartmentMutation(c.config, OpDelete)
	return &DepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DepartmentClient) DeleteOne(d *Department) *DepartmentDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DepartmentClient) DeleteOneID(id int) *DepartmentDeleteOne {
	builder := c.Delete().Where(department.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DepartmentDeleteOne{builder}
}

// Create returns a query builder for Department.
func (c *DepartmentClient) Query() *DepartmentQuery {
	return &DepartmentQuery{config: c.config}
}

// Get returns a Department entity by its id.
func (c *DepartmentClient) Get(ctx context.Context, id int) (*Department, error) {
	return c.Query().Where(department.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DepartmentClient) GetX(ctx context.Context, id int) *Department {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryDepartmentDiagnose queries the department_diagnose edge of a Department.
func (c *DepartmentClient) QueryDepartmentDiagnose(d *Department) *DiagnoseQuery {
	query := &DiagnoseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(department.Table, department.FieldID, id),
			sqlgraph.To(diagnose.Table, diagnose.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, department.DepartmentDiagnoseTable, department.DepartmentDiagnoseColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DepartmentClient) Hooks() []Hook {
	return c.hooks.Department
}

// DiagnoseClient is a client for the Diagnose schema.
type DiagnoseClient struct {
	config
}

// NewDiagnoseClient returns a client for the Diagnose from the given config.
func NewDiagnoseClient(c config) *DiagnoseClient {
	return &DiagnoseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `diagnose.Hooks(f(g(h())))`.
func (c *DiagnoseClient) Use(hooks ...Hook) {
	c.hooks.Diagnose = append(c.hooks.Diagnose, hooks...)
}

// Create returns a create builder for Diagnose.
func (c *DiagnoseClient) Create() *DiagnoseCreate {
	mutation := newDiagnoseMutation(c.config, OpCreate)
	return &DiagnoseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Diagnose.
func (c *DiagnoseClient) Update() *DiagnoseUpdate {
	mutation := newDiagnoseMutation(c.config, OpUpdate)
	return &DiagnoseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DiagnoseClient) UpdateOne(d *Diagnose) *DiagnoseUpdateOne {
	mutation := newDiagnoseMutation(c.config, OpUpdateOne, withDiagnose(d))
	return &DiagnoseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DiagnoseClient) UpdateOneID(id int) *DiagnoseUpdateOne {
	mutation := newDiagnoseMutation(c.config, OpUpdateOne, withDiagnoseID(id))
	return &DiagnoseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Diagnose.
func (c *DiagnoseClient) Delete() *DiagnoseDelete {
	mutation := newDiagnoseMutation(c.config, OpDelete)
	return &DiagnoseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DiagnoseClient) DeleteOne(d *Diagnose) *DiagnoseDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DiagnoseClient) DeleteOneID(id int) *DiagnoseDeleteOne {
	builder := c.Delete().Where(diagnose.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DiagnoseDeleteOne{builder}
}

// Create returns a query builder for Diagnose.
func (c *DiagnoseClient) Query() *DiagnoseQuery {
	return &DiagnoseQuery{config: c.config}
}

// Get returns a Diagnose entity by its id.
func (c *DiagnoseClient) Get(ctx context.Context, id int) (*Diagnose, error) {
	return c.Query().Where(diagnose.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DiagnoseClient) GetX(ctx context.Context, id int) *Diagnose {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryDisease queries the disease edge of a Diagnose.
func (c *DiagnoseClient) QueryDisease(d *Diagnose) *DiseaseQuery {
	query := &DiseaseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(diagnose.Table, diagnose.FieldID, id),
			sqlgraph.To(disease.Table, disease.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, diagnose.DiseaseTable, diagnose.DiseaseColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDepartment queries the department edge of a Diagnose.
func (c *DiagnoseClient) QueryDepartment(d *Diagnose) *DepartmentQuery {
	query := &DepartmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(diagnose.Table, diagnose.FieldID, id),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, diagnose.DepartmentTable, diagnose.DepartmentColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatient queries the patient edge of a Diagnose.
func (c *DiagnoseClient) QueryPatient(d *Diagnose) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(diagnose.Table, diagnose.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, diagnose.PatientTable, diagnose.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDoctor queries the doctor edge of a Diagnose.
func (c *DiagnoseClient) QueryDoctor(d *Diagnose) *DoctorQuery {
	query := &DoctorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(diagnose.Table, diagnose.FieldID, id),
			sqlgraph.To(doctor.Table, doctor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, diagnose.DoctorTable, diagnose.DoctorColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DiagnoseClient) Hooks() []Hook {
	return c.hooks.Diagnose
}

// DiseaseClient is a client for the Disease schema.
type DiseaseClient struct {
	config
}

// NewDiseaseClient returns a client for the Disease from the given config.
func NewDiseaseClient(c config) *DiseaseClient {
	return &DiseaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `disease.Hooks(f(g(h())))`.
func (c *DiseaseClient) Use(hooks ...Hook) {
	c.hooks.Disease = append(c.hooks.Disease, hooks...)
}

// Create returns a create builder for Disease.
func (c *DiseaseClient) Create() *DiseaseCreate {
	mutation := newDiseaseMutation(c.config, OpCreate)
	return &DiseaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Disease.
func (c *DiseaseClient) Update() *DiseaseUpdate {
	mutation := newDiseaseMutation(c.config, OpUpdate)
	return &DiseaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DiseaseClient) UpdateOne(d *Disease) *DiseaseUpdateOne {
	mutation := newDiseaseMutation(c.config, OpUpdateOne, withDisease(d))
	return &DiseaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DiseaseClient) UpdateOneID(id int) *DiseaseUpdateOne {
	mutation := newDiseaseMutation(c.config, OpUpdateOne, withDiseaseID(id))
	return &DiseaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Disease.
func (c *DiseaseClient) Delete() *DiseaseDelete {
	mutation := newDiseaseMutation(c.config, OpDelete)
	return &DiseaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DiseaseClient) DeleteOne(d *Disease) *DiseaseDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DiseaseClient) DeleteOneID(id int) *DiseaseDeleteOne {
	builder := c.Delete().Where(disease.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DiseaseDeleteOne{builder}
}

// Create returns a query builder for Disease.
func (c *DiseaseClient) Query() *DiseaseQuery {
	return &DiseaseQuery{config: c.config}
}

// Get returns a Disease entity by its id.
func (c *DiseaseClient) Get(ctx context.Context, id int) (*Disease, error) {
	return c.Query().Where(disease.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DiseaseClient) GetX(ctx context.Context, id int) *Disease {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryDiseaseDiagnose queries the disease_diagnose edge of a Disease.
func (c *DiseaseClient) QueryDiseaseDiagnose(d *Disease) *DiagnoseQuery {
	query := &DiagnoseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(disease.Table, disease.FieldID, id),
			sqlgraph.To(diagnose.Table, diagnose.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, disease.DiseaseDiagnoseTable, disease.DiseaseDiagnoseColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DiseaseClient) Hooks() []Hook {
	return c.hooks.Disease
}

// DoctorClient is a client for the Doctor schema.
type DoctorClient struct {
	config
}

// NewDoctorClient returns a client for the Doctor from the given config.
func NewDoctorClient(c config) *DoctorClient {
	return &DoctorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `doctor.Hooks(f(g(h())))`.
func (c *DoctorClient) Use(hooks ...Hook) {
	c.hooks.Doctor = append(c.hooks.Doctor, hooks...)
}

// Create returns a create builder for Doctor.
func (c *DoctorClient) Create() *DoctorCreate {
	mutation := newDoctorMutation(c.config, OpCreate)
	return &DoctorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Doctor.
func (c *DoctorClient) Update() *DoctorUpdate {
	mutation := newDoctorMutation(c.config, OpUpdate)
	return &DoctorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DoctorClient) UpdateOne(d *Doctor) *DoctorUpdateOne {
	mutation := newDoctorMutation(c.config, OpUpdateOne, withDoctor(d))
	return &DoctorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DoctorClient) UpdateOneID(id int) *DoctorUpdateOne {
	mutation := newDoctorMutation(c.config, OpUpdateOne, withDoctorID(id))
	return &DoctorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Doctor.
func (c *DoctorClient) Delete() *DoctorDelete {
	mutation := newDoctorMutation(c.config, OpDelete)
	return &DoctorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DoctorClient) DeleteOne(d *Doctor) *DoctorDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DoctorClient) DeleteOneID(id int) *DoctorDeleteOne {
	builder := c.Delete().Where(doctor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DoctorDeleteOne{builder}
}

// Create returns a query builder for Doctor.
func (c *DoctorClient) Query() *DoctorQuery {
	return &DoctorQuery{config: c.config}
}

// Get returns a Doctor entity by its id.
func (c *DoctorClient) Get(ctx context.Context, id int) (*Doctor, error) {
	return c.Query().Where(doctor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DoctorClient) GetX(ctx context.Context, id int) *Doctor {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryDoctorDiagnose queries the doctor_diagnose edge of a Doctor.
func (c *DoctorClient) QueryDoctorDiagnose(d *Doctor) *DiagnoseQuery {
	query := &DiagnoseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(doctor.Table, doctor.FieldID, id),
			sqlgraph.To(diagnose.Table, diagnose.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, doctor.DoctorDiagnoseTable, doctor.DoctorDiagnoseColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDoctorPrescription queries the doctor_prescription edge of a Doctor.
func (c *DoctorClient) QueryDoctorPrescription(d *Doctor) *PrescriptionQuery {
	query := &PrescriptionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(doctor.Table, doctor.FieldID, id),
			sqlgraph.To(prescription.Table, prescription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, doctor.DoctorPrescriptionTable, doctor.DoctorPrescriptionColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DoctorClient) Hooks() []Hook {
	return c.hooks.Doctor
}

// DrugClient is a client for the Drug schema.
type DrugClient struct {
	config
}

// NewDrugClient returns a client for the Drug from the given config.
func NewDrugClient(c config) *DrugClient {
	return &DrugClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `drug.Hooks(f(g(h())))`.
func (c *DrugClient) Use(hooks ...Hook) {
	c.hooks.Drug = append(c.hooks.Drug, hooks...)
}

// Create returns a create builder for Drug.
func (c *DrugClient) Create() *DrugCreate {
	mutation := newDrugMutation(c.config, OpCreate)
	return &DrugCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Drug.
func (c *DrugClient) Update() *DrugUpdate {
	mutation := newDrugMutation(c.config, OpUpdate)
	return &DrugUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DrugClient) UpdateOne(d *Drug) *DrugUpdateOne {
	mutation := newDrugMutation(c.config, OpUpdateOne, withDrug(d))
	return &DrugUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DrugClient) UpdateOneID(id int) *DrugUpdateOne {
	mutation := newDrugMutation(c.config, OpUpdateOne, withDrugID(id))
	return &DrugUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Drug.
func (c *DrugClient) Delete() *DrugDelete {
	mutation := newDrugMutation(c.config, OpDelete)
	return &DrugDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DrugClient) DeleteOne(d *Drug) *DrugDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DrugClient) DeleteOneID(id int) *DrugDeleteOne {
	builder := c.Delete().Where(drug.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DrugDeleteOne{builder}
}

// Create returns a query builder for Drug.
func (c *DrugClient) Query() *DrugQuery {
	return &DrugQuery{config: c.config}
}

// Get returns a Drug entity by its id.
func (c *DrugClient) Get(ctx context.Context, id int) (*Drug, error) {
	return c.Query().Where(drug.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DrugClient) GetX(ctx context.Context, id int) *Drug {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryDrugPrescription queries the drug_prescription edge of a Drug.
func (c *DrugClient) QueryDrugPrescription(d *Drug) *PrescriptionQuery {
	query := &PrescriptionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(drug.Table, drug.FieldID, id),
			sqlgraph.To(prescription.Table, prescription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, drug.DrugPrescriptionTable, drug.DrugPrescriptionColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DrugClient) Hooks() []Hook {
	return c.hooks.Drug
}

// ExaminationroomClient is a client for the Examinationroom schema.
type ExaminationroomClient struct {
	config
}

// NewExaminationroomClient returns a client for the Examinationroom from the given config.
func NewExaminationroomClient(c config) *ExaminationroomClient {
	return &ExaminationroomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `examinationroom.Hooks(f(g(h())))`.
func (c *ExaminationroomClient) Use(hooks ...Hook) {
	c.hooks.Examinationroom = append(c.hooks.Examinationroom, hooks...)
}

// Create returns a create builder for Examinationroom.
func (c *ExaminationroomClient) Create() *ExaminationroomCreate {
	mutation := newExaminationroomMutation(c.config, OpCreate)
	return &ExaminationroomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Examinationroom.
func (c *ExaminationroomClient) Update() *ExaminationroomUpdate {
	mutation := newExaminationroomMutation(c.config, OpUpdate)
	return &ExaminationroomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExaminationroomClient) UpdateOne(e *Examinationroom) *ExaminationroomUpdateOne {
	mutation := newExaminationroomMutation(c.config, OpUpdateOne, withExaminationroom(e))
	return &ExaminationroomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExaminationroomClient) UpdateOneID(id int) *ExaminationroomUpdateOne {
	mutation := newExaminationroomMutation(c.config, OpUpdateOne, withExaminationroomID(id))
	return &ExaminationroomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Examinationroom.
func (c *ExaminationroomClient) Delete() *ExaminationroomDelete {
	mutation := newExaminationroomMutation(c.config, OpDelete)
	return &ExaminationroomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ExaminationroomClient) DeleteOne(e *Examinationroom) *ExaminationroomDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ExaminationroomClient) DeleteOneID(id int) *ExaminationroomDeleteOne {
	builder := c.Delete().Where(examinationroom.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExaminationroomDeleteOne{builder}
}

// Create returns a query builder for Examinationroom.
func (c *ExaminationroomClient) Query() *ExaminationroomQuery {
	return &ExaminationroomQuery{config: c.config}
}

// Get returns a Examinationroom entity by its id.
func (c *ExaminationroomClient) Get(ctx context.Context, id int) (*Examinationroom, error) {
	return c.Query().Where(examinationroom.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExaminationroomClient) GetX(ctx context.Context, id int) *Examinationroom {
	e, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return e
}

// QueryExaminationroomOperativerecord queries the Examinationroom_Operativerecord edge of a Examinationroom.
func (c *ExaminationroomClient) QueryExaminationroomOperativerecord(e *Examinationroom) *OperativerecordQuery {
	query := &OperativerecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examinationroom.Table, examinationroom.FieldID, id),
			sqlgraph.To(operativerecord.Table, operativerecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, examinationroom.ExaminationroomOperativerecordTable, examinationroom.ExaminationroomOperativerecordColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExaminationroomClient) Hooks() []Hook {
	return c.hooks.Examinationroom
}

// FundClient is a client for the Fund schema.
type FundClient struct {
	config
}

// NewFundClient returns a client for the Fund from the given config.
func NewFundClient(c config) *FundClient {
	return &FundClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fund.Hooks(f(g(h())))`.
func (c *FundClient) Use(hooks ...Hook) {
	c.hooks.Fund = append(c.hooks.Fund, hooks...)
}

// Create returns a create builder for Fund.
func (c *FundClient) Create() *FundCreate {
	mutation := newFundMutation(c.config, OpCreate)
	return &FundCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Fund.
func (c *FundClient) Update() *FundUpdate {
	mutation := newFundMutation(c.config, OpUpdate)
	return &FundUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FundClient) UpdateOne(f *Fund) *FundUpdateOne {
	mutation := newFundMutation(c.config, OpUpdateOne, withFund(f))
	return &FundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FundClient) UpdateOneID(id int) *FundUpdateOne {
	mutation := newFundMutation(c.config, OpUpdateOne, withFundID(id))
	return &FundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Fund.
func (c *FundClient) Delete() *FundDelete {
	mutation := newFundMutation(c.config, OpDelete)
	return &FundDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FundClient) DeleteOne(f *Fund) *FundDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FundClient) DeleteOneID(id int) *FundDeleteOne {
	builder := c.Delete().Where(fund.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FundDeleteOne{builder}
}

// Create returns a query builder for Fund.
func (c *FundClient) Query() *FundQuery {
	return &FundQuery{config: c.config}
}

// Get returns a Fund entity by its id.
func (c *FundClient) Get(ctx context.Context, id int) (*Fund, error) {
	return c.Query().Where(fund.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FundClient) GetX(ctx context.Context, id int) *Fund {
	f, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return f
}

// QueryFundCoveredPerson queries the Fund_CoveredPerson edge of a Fund.
func (c *FundClient) QueryFundCoveredPerson(f *Fund) *CoveredPersonQuery {
	query := &CoveredPersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fund.Table, fund.FieldID, id),
			sqlgraph.To(coveredperson.Table, coveredperson.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fund.FundCoveredPersonTable, fund.FundCoveredPersonColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FundClient) Hooks() []Hook {
	return c.hooks.Fund
}

// GenderClient is a client for the Gender schema.
type GenderClient struct {
	config
}

// NewGenderClient returns a client for the Gender from the given config.
func NewGenderClient(c config) *GenderClient {
	return &GenderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gender.Hooks(f(g(h())))`.
func (c *GenderClient) Use(hooks ...Hook) {
	c.hooks.Gender = append(c.hooks.Gender, hooks...)
}

// Create returns a create builder for Gender.
func (c *GenderClient) Create() *GenderCreate {
	mutation := newGenderMutation(c.config, OpCreate)
	return &GenderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Gender.
func (c *GenderClient) Update() *GenderUpdate {
	mutation := newGenderMutation(c.config, OpUpdate)
	return &GenderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GenderClient) UpdateOne(ge *Gender) *GenderUpdateOne {
	mutation := newGenderMutation(c.config, OpUpdateOne, withGender(ge))
	return &GenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GenderClient) UpdateOneID(id int) *GenderUpdateOne {
	mutation := newGenderMutation(c.config, OpUpdateOne, withGenderID(id))
	return &GenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Gender.
func (c *GenderClient) Delete() *GenderDelete {
	mutation := newGenderMutation(c.config, OpDelete)
	return &GenderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GenderClient) DeleteOne(ge *Gender) *GenderDeleteOne {
	return c.DeleteOneID(ge.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GenderClient) DeleteOneID(id int) *GenderDeleteOne {
	builder := c.Delete().Where(gender.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GenderDeleteOne{builder}
}

// Create returns a query builder for Gender.
func (c *GenderClient) Query() *GenderQuery {
	return &GenderQuery{config: c.config}
}

// Get returns a Gender entity by its id.
func (c *GenderClient) Get(ctx context.Context, id int) (*Gender, error) {
	return c.Query().Where(gender.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GenderClient) GetX(ctx context.Context, id int) *Gender {
	ge, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ge
}

// QueryFromgender queries the fromgender edge of a Gender.
func (c *GenderClient) QueryFromgender(ge *Gender) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gender.Table, gender.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gender.FromgenderTable, gender.FromgenderColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GenderClient) Hooks() []Hook {
	return c.hooks.Gender
}

// MedicalClient is a client for the Medical schema.
type MedicalClient struct {
	config
}

// NewMedicalClient returns a client for the Medical from the given config.
func NewMedicalClient(c config) *MedicalClient {
	return &MedicalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `medical.Hooks(f(g(h())))`.
func (c *MedicalClient) Use(hooks ...Hook) {
	c.hooks.Medical = append(c.hooks.Medical, hooks...)
}

// Create returns a create builder for Medical.
func (c *MedicalClient) Create() *MedicalCreate {
	mutation := newMedicalMutation(c.config, OpCreate)
	return &MedicalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Medical.
func (c *MedicalClient) Update() *MedicalUpdate {
	mutation := newMedicalMutation(c.config, OpUpdate)
	return &MedicalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MedicalClient) UpdateOne(m *Medical) *MedicalUpdateOne {
	mutation := newMedicalMutation(c.config, OpUpdateOne, withMedical(m))
	return &MedicalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MedicalClient) UpdateOneID(id int) *MedicalUpdateOne {
	mutation := newMedicalMutation(c.config, OpUpdateOne, withMedicalID(id))
	return &MedicalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Medical.
func (c *MedicalClient) Delete() *MedicalDelete {
	mutation := newMedicalMutation(c.config, OpDelete)
	return &MedicalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MedicalClient) DeleteOne(m *Medical) *MedicalDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MedicalClient) DeleteOneID(id int) *MedicalDeleteOne {
	builder := c.Delete().Where(medical.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MedicalDeleteOne{builder}
}

// Create returns a query builder for Medical.
func (c *MedicalClient) Query() *MedicalQuery {
	return &MedicalQuery{config: c.config}
}

// Get returns a Medical entity by its id.
func (c *MedicalClient) Get(ctx context.Context, id int) (*Medical, error) {
	return c.Query().Where(medical.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MedicalClient) GetX(ctx context.Context, id int) *Medical {
	m, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return m
}

// Hooks returns the client hooks.
func (c *MedicalClient) Hooks() []Hook {
	return c.hooks.Medical
}

// NurseClient is a client for the Nurse schema.
type NurseClient struct {
	config
}

// NewNurseClient returns a client for the Nurse from the given config.
func NewNurseClient(c config) *NurseClient {
	return &NurseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `nurse.Hooks(f(g(h())))`.
func (c *NurseClient) Use(hooks ...Hook) {
	c.hooks.Nurse = append(c.hooks.Nurse, hooks...)
}

// Create returns a create builder for Nurse.
func (c *NurseClient) Create() *NurseCreate {
	mutation := newNurseMutation(c.config, OpCreate)
	return &NurseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Nurse.
func (c *NurseClient) Update() *NurseUpdate {
	mutation := newNurseMutation(c.config, OpUpdate)
	return &NurseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NurseClient) UpdateOne(n *Nurse) *NurseUpdateOne {
	mutation := newNurseMutation(c.config, OpUpdateOne, withNurse(n))
	return &NurseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NurseClient) UpdateOneID(id int) *NurseUpdateOne {
	mutation := newNurseMutation(c.config, OpUpdateOne, withNurseID(id))
	return &NurseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Nurse.
func (c *NurseClient) Delete() *NurseDelete {
	mutation := newNurseMutation(c.config, OpDelete)
	return &NurseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NurseClient) DeleteOne(n *Nurse) *NurseDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NurseClient) DeleteOneID(id int) *NurseDeleteOne {
	builder := c.Delete().Where(nurse.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NurseDeleteOne{builder}
}

// Create returns a query builder for Nurse.
func (c *NurseClient) Query() *NurseQuery {
	return &NurseQuery{config: c.config}
}

// Get returns a Nurse entity by its id.
func (c *NurseClient) Get(ctx context.Context, id int) (*Nurse, error) {
	return c.Query().Where(nurse.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NurseClient) GetX(ctx context.Context, id int) *Nurse {
	n, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return n
}

// QueryFromnurse queries the fromnurse edge of a Nurse.
func (c *NurseClient) QueryFromnurse(n *Nurse) *RentQuery {
	query := &RentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nurse.Table, nurse.FieldID, id),
			sqlgraph.To(rent.Table, rent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, nurse.FromnurseTable, nurse.FromnurseColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNursePrescription queries the nurse_prescription edge of a Nurse.
func (c *NurseClient) QueryNursePrescription(n *Nurse) *PrescriptionQuery {
	query := &PrescriptionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nurse.Table, nurse.FieldID, id),
			sqlgraph.To(prescription.Table, prescription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, nurse.NursePrescriptionTable, nurse.NursePrescriptionColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNurseOperativerecord queries the Nurse_Operativerecord edge of a Nurse.
func (c *NurseClient) QueryNurseOperativerecord(n *Nurse) *OperativerecordQuery {
	query := &OperativerecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nurse.Table, nurse.FieldID, id),
			sqlgraph.To(operativerecord.Table, operativerecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, nurse.NurseOperativerecordTable, nurse.NurseOperativerecordColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NurseClient) Hooks() []Hook {
	return c.hooks.Nurse
}

// OperativeClient is a client for the Operative schema.
type OperativeClient struct {
	config
}

// NewOperativeClient returns a client for the Operative from the given config.
func NewOperativeClient(c config) *OperativeClient {
	return &OperativeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `operative.Hooks(f(g(h())))`.
func (c *OperativeClient) Use(hooks ...Hook) {
	c.hooks.Operative = append(c.hooks.Operative, hooks...)
}

// Create returns a create builder for Operative.
func (c *OperativeClient) Create() *OperativeCreate {
	mutation := newOperativeMutation(c.config, OpCreate)
	return &OperativeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Operative.
func (c *OperativeClient) Update() *OperativeUpdate {
	mutation := newOperativeMutation(c.config, OpUpdate)
	return &OperativeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OperativeClient) UpdateOne(o *Operative) *OperativeUpdateOne {
	mutation := newOperativeMutation(c.config, OpUpdateOne, withOperative(o))
	return &OperativeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OperativeClient) UpdateOneID(id int) *OperativeUpdateOne {
	mutation := newOperativeMutation(c.config, OpUpdateOne, withOperativeID(id))
	return &OperativeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Operative.
func (c *OperativeClient) Delete() *OperativeDelete {
	mutation := newOperativeMutation(c.config, OpDelete)
	return &OperativeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OperativeClient) DeleteOne(o *Operative) *OperativeDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OperativeClient) DeleteOneID(id int) *OperativeDeleteOne {
	builder := c.Delete().Where(operative.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OperativeDeleteOne{builder}
}

// Create returns a query builder for Operative.
func (c *OperativeClient) Query() *OperativeQuery {
	return &OperativeQuery{config: c.config}
}

// Get returns a Operative entity by its id.
func (c *OperativeClient) Get(ctx context.Context, id int) (*Operative, error) {
	return c.Query().Where(operative.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OperativeClient) GetX(ctx context.Context, id int) *Operative {
	o, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return o
}

// QueryOperativeOperativerecord queries the Operative_Operativerecord edge of a Operative.
func (c *OperativeClient) QueryOperativeOperativerecord(o *Operative) *OperativerecordQuery {
	query := &OperativerecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(operative.Table, operative.FieldID, id),
			sqlgraph.To(operativerecord.Table, operativerecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, operative.OperativeOperativerecordTable, operative.OperativeOperativerecordColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OperativeClient) Hooks() []Hook {
	return c.hooks.Operative
}

// OperativerecordClient is a client for the Operativerecord schema.
type OperativerecordClient struct {
	config
}

// NewOperativerecordClient returns a client for the Operativerecord from the given config.
func NewOperativerecordClient(c config) *OperativerecordClient {
	return &OperativerecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `operativerecord.Hooks(f(g(h())))`.
func (c *OperativerecordClient) Use(hooks ...Hook) {
	c.hooks.Operativerecord = append(c.hooks.Operativerecord, hooks...)
}

// Create returns a create builder for Operativerecord.
func (c *OperativerecordClient) Create() *OperativerecordCreate {
	mutation := newOperativerecordMutation(c.config, OpCreate)
	return &OperativerecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Operativerecord.
func (c *OperativerecordClient) Update() *OperativerecordUpdate {
	mutation := newOperativerecordMutation(c.config, OpUpdate)
	return &OperativerecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OperativerecordClient) UpdateOne(o *Operativerecord) *OperativerecordUpdateOne {
	mutation := newOperativerecordMutation(c.config, OpUpdateOne, withOperativerecord(o))
	return &OperativerecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OperativerecordClient) UpdateOneID(id int) *OperativerecordUpdateOne {
	mutation := newOperativerecordMutation(c.config, OpUpdateOne, withOperativerecordID(id))
	return &OperativerecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Operativerecord.
func (c *OperativerecordClient) Delete() *OperativerecordDelete {
	mutation := newOperativerecordMutation(c.config, OpDelete)
	return &OperativerecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OperativerecordClient) DeleteOne(o *Operativerecord) *OperativerecordDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OperativerecordClient) DeleteOneID(id int) *OperativerecordDeleteOne {
	builder := c.Delete().Where(operativerecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OperativerecordDeleteOne{builder}
}

// Create returns a query builder for Operativerecord.
func (c *OperativerecordClient) Query() *OperativerecordQuery {
	return &OperativerecordQuery{config: c.config}
}

// Get returns a Operativerecord entity by its id.
func (c *OperativerecordClient) Get(ctx context.Context, id int) (*Operativerecord, error) {
	return c.Query().Where(operativerecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OperativerecordClient) GetX(ctx context.Context, id int) *Operativerecord {
	o, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return o
}

// QueryExaminationroom queries the Examinationroom edge of a Operativerecord.
func (c *OperativerecordClient) QueryExaminationroom(o *Operativerecord) *ExaminationroomQuery {
	query := &ExaminationroomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(operativerecord.Table, operativerecord.FieldID, id),
			sqlgraph.To(examinationroom.Table, examinationroom.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, operativerecord.ExaminationroomTable, operativerecord.ExaminationroomColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNurse queries the Nurse edge of a Operativerecord.
func (c *OperativerecordClient) QueryNurse(o *Operativerecord) *NurseQuery {
	query := &NurseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(operativerecord.Table, operativerecord.FieldID, id),
			sqlgraph.To(nurse.Table, nurse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, operativerecord.NurseTable, operativerecord.NurseColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOperative queries the Operative edge of a Operativerecord.
func (c *OperativerecordClient) QueryOperative(o *Operativerecord) *OperativeQuery {
	query := &OperativeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(operativerecord.Table, operativerecord.FieldID, id),
			sqlgraph.To(operative.Table, operative.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, operativerecord.OperativeTable, operativerecord.OperativeColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTool queries the Tool edge of a Operativerecord.
func (c *OperativerecordClient) QueryTool(o *Operativerecord) *ToolQuery {
	query := &ToolQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(operativerecord.Table, operativerecord.FieldID, id),
			sqlgraph.To(tool.Table, tool.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, operativerecord.ToolTable, operativerecord.ToolColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OperativerecordClient) Hooks() []Hook {
	return c.hooks.Operativerecord
}

// PatientClient is a client for the Patient schema.
type PatientClient struct {
	config
}

// NewPatientClient returns a client for the Patient from the given config.
func NewPatientClient(c config) *PatientClient {
	return &PatientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patient.Hooks(f(g(h())))`.
func (c *PatientClient) Use(hooks ...Hook) {
	c.hooks.Patient = append(c.hooks.Patient, hooks...)
}

// Create returns a create builder for Patient.
func (c *PatientClient) Create() *PatientCreate {
	mutation := newPatientMutation(c.config, OpCreate)
	return &PatientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Patient.
func (c *PatientClient) Update() *PatientUpdate {
	mutation := newPatientMutation(c.config, OpUpdate)
	return &PatientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientClient) UpdateOne(pa *Patient) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatient(pa))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientClient) UpdateOneID(id int) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatientID(id))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patient.
func (c *PatientClient) Delete() *PatientDelete {
	mutation := newPatientMutation(c.config, OpDelete)
	return &PatientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientClient) DeleteOne(pa *Patient) *PatientDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientClient) DeleteOneID(id int) *PatientDeleteOne {
	builder := c.Delete().Where(patient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientDeleteOne{builder}
}

// Create returns a query builder for Patient.
func (c *PatientClient) Query() *PatientQuery {
	return &PatientQuery{config: c.config}
}

// Get returns a Patient entity by its id.
func (c *PatientClient) Get(ctx context.Context, id int) (*Patient, error) {
	return c.Query().Where(patient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientClient) GetX(ctx context.Context, id int) *Patient {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryGender queries the gender edge of a Patient.
func (c *PatientClient) QueryGender(pa *Patient) *GenderQuery {
	query := &GenderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(gender.Table, gender.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patient.GenderTable, patient.GenderColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrefix queries the prefix edge of a Patient.
func (c *PatientClient) QueryPrefix(pa *Patient) *PrefixQuery {
	query := &PrefixQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(prefix.Table, prefix.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patient.PrefixTable, patient.PrefixColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBloodtype queries the bloodtype edge of a Patient.
func (c *PatientClient) QueryBloodtype(pa *Patient) *BloodtypeQuery {
	query := &BloodtypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(bloodtype.Table, bloodtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patient.BloodtypeTable, patient.BloodtypeColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFrompatient queries the frompatient edge of a Patient.
func (c *PatientClient) QueryFrompatient(pa *Patient) *RentQuery {
	query := &RentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(rent.Table, rent.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, patient.FrompatientTable, patient.FrompatientColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientCoveredPerson queries the Patient_CoveredPerson edge of a Patient.
func (c *PatientClient) QueryPatientCoveredPerson(pa *Patient) *CoveredPersonQuery {
	query := &CoveredPersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(coveredperson.Table, coveredperson.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.PatientCoveredPersonTable, patient.PatientCoveredPersonColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientDiagnose queries the patient_diagnose edge of a Patient.
func (c *PatientClient) QueryPatientDiagnose(pa *Patient) *DiagnoseQuery {
	query := &DiagnoseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(diagnose.Table, diagnose.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.PatientDiagnoseTable, patient.PatientDiagnoseColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientPrescription queries the patient_prescription edge of a Patient.
func (c *PatientClient) QueryPatientPrescription(pa *Patient) *PrescriptionQuery {
	query := &PrescriptionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(prescription.Table, prescription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.PatientPrescriptionTable, patient.PatientPrescriptionColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientClient) Hooks() []Hook {
	return c.hooks.Patient
}

// PrefixClient is a client for the Prefix schema.
type PrefixClient struct {
	config
}

// NewPrefixClient returns a client for the Prefix from the given config.
func NewPrefixClient(c config) *PrefixClient {
	return &PrefixClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prefix.Hooks(f(g(h())))`.
func (c *PrefixClient) Use(hooks ...Hook) {
	c.hooks.Prefix = append(c.hooks.Prefix, hooks...)
}

// Create returns a create builder for Prefix.
func (c *PrefixClient) Create() *PrefixCreate {
	mutation := newPrefixMutation(c.config, OpCreate)
	return &PrefixCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Prefix.
func (c *PrefixClient) Update() *PrefixUpdate {
	mutation := newPrefixMutation(c.config, OpUpdate)
	return &PrefixUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PrefixClient) UpdateOne(pr *Prefix) *PrefixUpdateOne {
	mutation := newPrefixMutation(c.config, OpUpdateOne, withPrefix(pr))
	return &PrefixUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PrefixClient) UpdateOneID(id int) *PrefixUpdateOne {
	mutation := newPrefixMutation(c.config, OpUpdateOne, withPrefixID(id))
	return &PrefixUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Prefix.
func (c *PrefixClient) Delete() *PrefixDelete {
	mutation := newPrefixMutation(c.config, OpDelete)
	return &PrefixDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PrefixClient) DeleteOne(pr *Prefix) *PrefixDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PrefixClient) DeleteOneID(id int) *PrefixDeleteOne {
	builder := c.Delete().Where(prefix.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PrefixDeleteOne{builder}
}

// Create returns a query builder for Prefix.
func (c *PrefixClient) Query() *PrefixQuery {
	return &PrefixQuery{config: c.config}
}

// Get returns a Prefix entity by its id.
func (c *PrefixClient) Get(ctx context.Context, id int) (*Prefix, error) {
	return c.Query().Where(prefix.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PrefixClient) GetX(ctx context.Context, id int) *Prefix {
	pr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pr
}

// QueryFromprefix queries the fromprefix edge of a Prefix.
func (c *PrefixClient) QueryFromprefix(pr *Prefix) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prefix.Table, prefix.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, prefix.FromprefixTable, prefix.FromprefixColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PrefixClient) Hooks() []Hook {
	return c.hooks.Prefix
}

// PrescriptionClient is a client for the Prescription schema.
type PrescriptionClient struct {
	config
}

// NewPrescriptionClient returns a client for the Prescription from the given config.
func NewPrescriptionClient(c config) *PrescriptionClient {
	return &PrescriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prescription.Hooks(f(g(h())))`.
func (c *PrescriptionClient) Use(hooks ...Hook) {
	c.hooks.Prescription = append(c.hooks.Prescription, hooks...)
}

// Create returns a create builder for Prescription.
func (c *PrescriptionClient) Create() *PrescriptionCreate {
	mutation := newPrescriptionMutation(c.config, OpCreate)
	return &PrescriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Prescription.
func (c *PrescriptionClient) Update() *PrescriptionUpdate {
	mutation := newPrescriptionMutation(c.config, OpUpdate)
	return &PrescriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PrescriptionClient) UpdateOne(pr *Prescription) *PrescriptionUpdateOne {
	mutation := newPrescriptionMutation(c.config, OpUpdateOne, withPrescription(pr))
	return &PrescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PrescriptionClient) UpdateOneID(id int) *PrescriptionUpdateOne {
	mutation := newPrescriptionMutation(c.config, OpUpdateOne, withPrescriptionID(id))
	return &PrescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Prescription.
func (c *PrescriptionClient) Delete() *PrescriptionDelete {
	mutation := newPrescriptionMutation(c.config, OpDelete)
	return &PrescriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PrescriptionClient) DeleteOne(pr *Prescription) *PrescriptionDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PrescriptionClient) DeleteOneID(id int) *PrescriptionDeleteOne {
	builder := c.Delete().Where(prescription.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PrescriptionDeleteOne{builder}
}

// Create returns a query builder for Prescription.
func (c *PrescriptionClient) Query() *PrescriptionQuery {
	return &PrescriptionQuery{config: c.config}
}

// Get returns a Prescription entity by its id.
func (c *PrescriptionClient) Get(ctx context.Context, id int) (*Prescription, error) {
	return c.Query().Where(prescription.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PrescriptionClient) GetX(ctx context.Context, id int) *Prescription {
	pr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pr
}

// QueryDoctor queries the doctor edge of a Prescription.
func (c *PrescriptionClient) QueryDoctor(pr *Prescription) *DoctorQuery {
	query := &DoctorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prescription.Table, prescription.FieldID, id),
			sqlgraph.To(doctor.Table, doctor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prescription.DoctorTable, prescription.DoctorColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatient queries the patient edge of a Prescription.
func (c *PrescriptionClient) QueryPatient(pr *Prescription) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prescription.Table, prescription.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prescription.PatientTable, prescription.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNurse queries the nurse edge of a Prescription.
func (c *PrescriptionClient) QueryNurse(pr *Prescription) *NurseQuery {
	query := &NurseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prescription.Table, prescription.FieldID, id),
			sqlgraph.To(nurse.Table, nurse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prescription.NurseTable, prescription.NurseColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDrug queries the drug edge of a Prescription.
func (c *PrescriptionClient) QueryDrug(pr *Prescription) *DrugQuery {
	query := &DrugQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prescription.Table, prescription.FieldID, id),
			sqlgraph.To(drug.Table, drug.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prescription.DrugTable, prescription.DrugColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PrescriptionClient) Hooks() []Hook {
	return c.hooks.Prescription
}

// RentClient is a client for the Rent schema.
type RentClient struct {
	config
}

// NewRentClient returns a client for the Rent from the given config.
func NewRentClient(c config) *RentClient {
	return &RentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rent.Hooks(f(g(h())))`.
func (c *RentClient) Use(hooks ...Hook) {
	c.hooks.Rent = append(c.hooks.Rent, hooks...)
}

// Create returns a create builder for Rent.
func (c *RentClient) Create() *RentCreate {
	mutation := newRentMutation(c.config, OpCreate)
	return &RentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Rent.
func (c *RentClient) Update() *RentUpdate {
	mutation := newRentMutation(c.config, OpUpdate)
	return &RentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RentClient) UpdateOne(r *Rent) *RentUpdateOne {
	mutation := newRentMutation(c.config, OpUpdateOne, withRent(r))
	return &RentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RentClient) UpdateOneID(id int) *RentUpdateOne {
	mutation := newRentMutation(c.config, OpUpdateOne, withRentID(id))
	return &RentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rent.
func (c *RentClient) Delete() *RentDelete {
	mutation := newRentMutation(c.config, OpDelete)
	return &RentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RentClient) DeleteOne(r *Rent) *RentDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RentClient) DeleteOneID(id int) *RentDeleteOne {
	builder := c.Delete().Where(rent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RentDeleteOne{builder}
}

// Create returns a query builder for Rent.
func (c *RentClient) Query() *RentQuery {
	return &RentQuery{config: c.config}
}

// Get returns a Rent entity by its id.
func (c *RentClient) Get(ctx context.Context, id int) (*Rent, error) {
	return c.Query().Where(rent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RentClient) GetX(ctx context.Context, id int) *Rent {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryRoom queries the room edge of a Rent.
func (c *RentClient) QueryRoom(r *Rent) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent.Table, rent.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, rent.RoomTable, rent.RoomColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatient queries the patient edge of a Rent.
func (c *RentClient) QueryPatient(r *Rent) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent.Table, rent.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, rent.PatientTable, rent.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNurse queries the nurse edge of a Rent.
func (c *RentClient) QueryNurse(r *Rent) *NurseQuery {
	query := &NurseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent.Table, rent.FieldID, id),
			sqlgraph.To(nurse.Table, nurse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rent.NurseTable, rent.NurseColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RentClient) Hooks() []Hook {
	return c.hooks.Rent
}

// RoomClient is a client for the Room schema.
type RoomClient struct {
	config
}

// NewRoomClient returns a client for the Room from the given config.
func NewRoomClient(c config) *RoomClient {
	return &RoomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `room.Hooks(f(g(h())))`.
func (c *RoomClient) Use(hooks ...Hook) {
	c.hooks.Room = append(c.hooks.Room, hooks...)
}

// Create returns a create builder for Room.
func (c *RoomClient) Create() *RoomCreate {
	mutation := newRoomMutation(c.config, OpCreate)
	return &RoomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Room.
func (c *RoomClient) Update() *RoomUpdate {
	mutation := newRoomMutation(c.config, OpUpdate)
	return &RoomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomClient) UpdateOne(r *Room) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoom(r))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomClient) UpdateOneID(id int) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoomID(id))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Room.
func (c *RoomClient) Delete() *RoomDelete {
	mutation := newRoomMutation(c.config, OpDelete)
	return &RoomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomClient) DeleteOne(r *Room) *RoomDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomClient) DeleteOneID(id int) *RoomDeleteOne {
	builder := c.Delete().Where(room.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomDeleteOne{builder}
}

// Create returns a query builder for Room.
func (c *RoomClient) Query() *RoomQuery {
	return &RoomQuery{config: c.config}
}

// Get returns a Room entity by its id.
func (c *RoomClient) Get(ctx context.Context, id int) (*Room, error) {
	return c.Query().Where(room.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomClient) GetX(ctx context.Context, id int) *Room {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryRents queries the rents edge of a Room.
func (c *RoomClient) QueryRents(r *Room) *RentQuery {
	query := &RentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(rent.Table, rent.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, room.RentsTable, room.RentsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoomtype queries the roomtype edge of a Room.
func (c *RoomClient) QueryRoomtype(r *Room) *RoomtypeQuery {
	query := &RoomtypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(roomtype.Table, roomtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, room.RoomtypeTable, room.RoomtypeColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomClient) Hooks() []Hook {
	return c.hooks.Room
}

// RoomtypeClient is a client for the Roomtype schema.
type RoomtypeClient struct {
	config
}

// NewRoomtypeClient returns a client for the Roomtype from the given config.
func NewRoomtypeClient(c config) *RoomtypeClient {
	return &RoomtypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roomtype.Hooks(f(g(h())))`.
func (c *RoomtypeClient) Use(hooks ...Hook) {
	c.hooks.Roomtype = append(c.hooks.Roomtype, hooks...)
}

// Create returns a create builder for Roomtype.
func (c *RoomtypeClient) Create() *RoomtypeCreate {
	mutation := newRoomtypeMutation(c.config, OpCreate)
	return &RoomtypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Roomtype.
func (c *RoomtypeClient) Update() *RoomtypeUpdate {
	mutation := newRoomtypeMutation(c.config, OpUpdate)
	return &RoomtypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomtypeClient) UpdateOne(r *Roomtype) *RoomtypeUpdateOne {
	mutation := newRoomtypeMutation(c.config, OpUpdateOne, withRoomtype(r))
	return &RoomtypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomtypeClient) UpdateOneID(id int) *RoomtypeUpdateOne {
	mutation := newRoomtypeMutation(c.config, OpUpdateOne, withRoomtypeID(id))
	return &RoomtypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Roomtype.
func (c *RoomtypeClient) Delete() *RoomtypeDelete {
	mutation := newRoomtypeMutation(c.config, OpDelete)
	return &RoomtypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomtypeClient) DeleteOne(r *Roomtype) *RoomtypeDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomtypeClient) DeleteOneID(id int) *RoomtypeDeleteOne {
	builder := c.Delete().Where(roomtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomtypeDeleteOne{builder}
}

// Create returns a query builder for Roomtype.
func (c *RoomtypeClient) Query() *RoomtypeQuery {
	return &RoomtypeQuery{config: c.config}
}

// Get returns a Roomtype entity by its id.
func (c *RoomtypeClient) Get(ctx context.Context, id int) (*Roomtype, error) {
	return c.Query().Where(roomtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomtypeClient) GetX(ctx context.Context, id int) *Roomtype {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryRooms queries the rooms edge of a Roomtype.
func (c *RoomtypeClient) QueryRooms(r *Roomtype) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomtype.Table, roomtype.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roomtype.RoomsTable, roomtype.RoomsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomtypeClient) Hooks() []Hook {
	return c.hooks.Roomtype
}

// SchemeTypeClient is a client for the SchemeType schema.
type SchemeTypeClient struct {
	config
}

// NewSchemeTypeClient returns a client for the SchemeType from the given config.
func NewSchemeTypeClient(c config) *SchemeTypeClient {
	return &SchemeTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `schemetype.Hooks(f(g(h())))`.
func (c *SchemeTypeClient) Use(hooks ...Hook) {
	c.hooks.SchemeType = append(c.hooks.SchemeType, hooks...)
}

// Create returns a create builder for SchemeType.
func (c *SchemeTypeClient) Create() *SchemeTypeCreate {
	mutation := newSchemeTypeMutation(c.config, OpCreate)
	return &SchemeTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for SchemeType.
func (c *SchemeTypeClient) Update() *SchemeTypeUpdate {
	mutation := newSchemeTypeMutation(c.config, OpUpdate)
	return &SchemeTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SchemeTypeClient) UpdateOne(st *SchemeType) *SchemeTypeUpdateOne {
	mutation := newSchemeTypeMutation(c.config, OpUpdateOne, withSchemeType(st))
	return &SchemeTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SchemeTypeClient) UpdateOneID(id int) *SchemeTypeUpdateOne {
	mutation := newSchemeTypeMutation(c.config, OpUpdateOne, withSchemeTypeID(id))
	return &SchemeTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SchemeType.
func (c *SchemeTypeClient) Delete() *SchemeTypeDelete {
	mutation := newSchemeTypeMutation(c.config, OpDelete)
	return &SchemeTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SchemeTypeClient) DeleteOne(st *SchemeType) *SchemeTypeDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SchemeTypeClient) DeleteOneID(id int) *SchemeTypeDeleteOne {
	builder := c.Delete().Where(schemetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SchemeTypeDeleteOne{builder}
}

// Create returns a query builder for SchemeType.
func (c *SchemeTypeClient) Query() *SchemeTypeQuery {
	return &SchemeTypeQuery{config: c.config}
}

// Get returns a SchemeType entity by its id.
func (c *SchemeTypeClient) Get(ctx context.Context, id int) (*SchemeType, error) {
	return c.Query().Where(schemetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SchemeTypeClient) GetX(ctx context.Context, id int) *SchemeType {
	st, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return st
}

// QuerySchemeTypeCoveredPerson queries the SchemeType_CoveredPerson edge of a SchemeType.
func (c *SchemeTypeClient) QuerySchemeTypeCoveredPerson(st *SchemeType) *CoveredPersonQuery {
	query := &CoveredPersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(schemetype.Table, schemetype.FieldID, id),
			sqlgraph.To(coveredperson.Table, coveredperson.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, schemetype.SchemeTypeCoveredPersonTable, schemetype.SchemeTypeCoveredPersonColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SchemeTypeClient) Hooks() []Hook {
	return c.hooks.SchemeType
}

// ToolClient is a client for the Tool schema.
type ToolClient struct {
	config
}

// NewToolClient returns a client for the Tool from the given config.
func NewToolClient(c config) *ToolClient {
	return &ToolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tool.Hooks(f(g(h())))`.
func (c *ToolClient) Use(hooks ...Hook) {
	c.hooks.Tool = append(c.hooks.Tool, hooks...)
}

// Create returns a create builder for Tool.
func (c *ToolClient) Create() *ToolCreate {
	mutation := newToolMutation(c.config, OpCreate)
	return &ToolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Tool.
func (c *ToolClient) Update() *ToolUpdate {
	mutation := newToolMutation(c.config, OpUpdate)
	return &ToolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ToolClient) UpdateOne(t *Tool) *ToolUpdateOne {
	mutation := newToolMutation(c.config, OpUpdateOne, withTool(t))
	return &ToolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ToolClient) UpdateOneID(id int) *ToolUpdateOne {
	mutation := newToolMutation(c.config, OpUpdateOne, withToolID(id))
	return &ToolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tool.
func (c *ToolClient) Delete() *ToolDelete {
	mutation := newToolMutation(c.config, OpDelete)
	return &ToolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ToolClient) DeleteOne(t *Tool) *ToolDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ToolClient) DeleteOneID(id int) *ToolDeleteOne {
	builder := c.Delete().Where(tool.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ToolDeleteOne{builder}
}

// Create returns a query builder for Tool.
func (c *ToolClient) Query() *ToolQuery {
	return &ToolQuery{config: c.config}
}

// Get returns a Tool entity by its id.
func (c *ToolClient) Get(ctx context.Context, id int) (*Tool, error) {
	return c.Query().Where(tool.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ToolClient) GetX(ctx context.Context, id int) *Tool {
	t, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return t
}

// QueryToolOperativerecord queries the Tool_Operativerecord edge of a Tool.
func (c *ToolClient) QueryToolOperativerecord(t *Tool) *OperativerecordQuery {
	query := &OperativerecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tool.Table, tool.FieldID, id),
			sqlgraph.To(operativerecord.Table, operativerecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tool.ToolOperativerecordTable, tool.ToolOperativerecordColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ToolClient) Hooks() []Hook {
	return c.hooks.Tool
}
