// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team08/ent/certificate"
	"github.com/sut63/team08/ent/coveredperson"
	"github.com/sut63/team08/ent/fund"
	"github.com/sut63/team08/ent/patient"
	"github.com/sut63/team08/ent/schemetype"
)

// CoveredPerson is the model entity for the CoveredPerson schema.
type CoveredPerson struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CoveredPersonQuery when eager-loading is set.
	Edges          CoveredPersonEdges `json:"edges"`
	Certificate_id *int
	Fund_id        *int
	Patient_id     *int
	SchemeType_id  *int
}

// CoveredPersonEdges holds the relations/edges for other nodes in the graph.
type CoveredPersonEdges struct {
	// Patient holds the value of the Patient edge.
	Patient *Patient
	// SchemeType holds the value of the SchemeType edge.
	SchemeType *SchemeType
	// Fund holds the value of the Fund edge.
	Fund *Fund
	// Certificate holds the value of the Certificate edge.
	Certificate *Certificate
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CoveredPersonEdges) PatientOrErr() (*Patient, error) {
	if e.loadedTypes[0] {
		if e.Patient == nil {
			// The edge Patient was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "Patient"}
}

// SchemeTypeOrErr returns the SchemeType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CoveredPersonEdges) SchemeTypeOrErr() (*SchemeType, error) {
	if e.loadedTypes[1] {
		if e.SchemeType == nil {
			// The edge SchemeType was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: schemetype.Label}
		}
		return e.SchemeType, nil
	}
	return nil, &NotLoadedError{edge: "SchemeType"}
}

// FundOrErr returns the Fund value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CoveredPersonEdges) FundOrErr() (*Fund, error) {
	if e.loadedTypes[2] {
		if e.Fund == nil {
			// The edge Fund was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: fund.Label}
		}
		return e.Fund, nil
	}
	return nil, &NotLoadedError{edge: "Fund"}
}

// CertificateOrErr returns the Certificate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CoveredPersonEdges) CertificateOrErr() (*Certificate, error) {
	if e.loadedTypes[3] {
		if e.Certificate == nil {
			// The edge Certificate was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: certificate.Label}
		}
		return e.Certificate, nil
	}
	return nil, &NotLoadedError{edge: "Certificate"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CoveredPerson) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*CoveredPerson) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // Certificate_id
		&sql.NullInt64{}, // Fund_id
		&sql.NullInt64{}, // Patient_id
		&sql.NullInt64{}, // SchemeType_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CoveredPerson fields.
func (cp *CoveredPerson) assignValues(values ...interface{}) error {
	if m, n := len(values), len(coveredperson.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	cp.ID = int(value.Int64)
	values = values[1:]
	values = values[0:]
	if len(values) == len(coveredperson.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Certificate_id", value)
		} else if value.Valid {
			cp.Certificate_id = new(int)
			*cp.Certificate_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Fund_id", value)
		} else if value.Valid {
			cp.Fund_id = new(int)
			*cp.Fund_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Patient_id", value)
		} else if value.Valid {
			cp.Patient_id = new(int)
			*cp.Patient_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field SchemeType_id", value)
		} else if value.Valid {
			cp.SchemeType_id = new(int)
			*cp.SchemeType_id = int(value.Int64)
		}
	}
	return nil
}

// QueryPatient queries the Patient edge of the CoveredPerson.
func (cp *CoveredPerson) QueryPatient() *PatientQuery {
	return (&CoveredPersonClient{config: cp.config}).QueryPatient(cp)
}

// QuerySchemeType queries the SchemeType edge of the CoveredPerson.
func (cp *CoveredPerson) QuerySchemeType() *SchemeTypeQuery {
	return (&CoveredPersonClient{config: cp.config}).QuerySchemeType(cp)
}

// QueryFund queries the Fund edge of the CoveredPerson.
func (cp *CoveredPerson) QueryFund() *FundQuery {
	return (&CoveredPersonClient{config: cp.config}).QueryFund(cp)
}

// QueryCertificate queries the Certificate edge of the CoveredPerson.
func (cp *CoveredPerson) QueryCertificate() *CertificateQuery {
	return (&CoveredPersonClient{config: cp.config}).QueryCertificate(cp)
}

// Update returns a builder for updating this CoveredPerson.
// Note that, you need to call CoveredPerson.Unwrap() before calling this method, if this CoveredPerson
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *CoveredPerson) Update() *CoveredPersonUpdateOne {
	return (&CoveredPersonClient{config: cp.config}).UpdateOne(cp)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (cp *CoveredPerson) Unwrap() *CoveredPerson {
	tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: CoveredPerson is not a transactional entity")
	}
	cp.config.driver = tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *CoveredPerson) String() string {
	var builder strings.Builder
	builder.WriteString("CoveredPerson(")
	builder.WriteString(fmt.Sprintf("id=%v", cp.ID))
	builder.WriteByte(')')
	return builder.String()
}

// CoveredPersons is a parsable slice of CoveredPerson.
type CoveredPersons []*CoveredPerson

func (cp CoveredPersons) config(cfg config) {
	for _i := range cp {
		cp[_i].config = cfg
	}
}
