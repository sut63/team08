// Code generated by entc, DO NOT EDIT.

package prescription

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/sut63/team08/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// PrescripNote applies equality check predicate on the "Prescrip_Note" field. It's identical to PrescripNoteEQ.
func PrescripNote(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrescripNote), v))
	})
}

// PrescripDateTime applies equality check predicate on the "Prescrip_DateTime" field. It's identical to PrescripDateTimeEQ.
func PrescripDateTime(v time.Time) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrescripDateTime), v))
	})
}

// PrescripNoteEQ applies the EQ predicate on the "Prescrip_Note" field.
func PrescripNoteEQ(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrescripNote), v))
	})
}

// PrescripNoteNEQ applies the NEQ predicate on the "Prescrip_Note" field.
func PrescripNoteNEQ(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrescripNote), v))
	})
}

// PrescripNoteIn applies the In predicate on the "Prescrip_Note" field.
func PrescripNoteIn(vs ...string) predicate.Prescription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Prescription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrescripNote), v...))
	})
}

// PrescripNoteNotIn applies the NotIn predicate on the "Prescrip_Note" field.
func PrescripNoteNotIn(vs ...string) predicate.Prescription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Prescription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrescripNote), v...))
	})
}

// PrescripNoteGT applies the GT predicate on the "Prescrip_Note" field.
func PrescripNoteGT(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrescripNote), v))
	})
}

// PrescripNoteGTE applies the GTE predicate on the "Prescrip_Note" field.
func PrescripNoteGTE(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrescripNote), v))
	})
}

// PrescripNoteLT applies the LT predicate on the "Prescrip_Note" field.
func PrescripNoteLT(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrescripNote), v))
	})
}

// PrescripNoteLTE applies the LTE predicate on the "Prescrip_Note" field.
func PrescripNoteLTE(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrescripNote), v))
	})
}

// PrescripNoteContains applies the Contains predicate on the "Prescrip_Note" field.
func PrescripNoteContains(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrescripNote), v))
	})
}

// PrescripNoteHasPrefix applies the HasPrefix predicate on the "Prescrip_Note" field.
func PrescripNoteHasPrefix(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrescripNote), v))
	})
}

// PrescripNoteHasSuffix applies the HasSuffix predicate on the "Prescrip_Note" field.
func PrescripNoteHasSuffix(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrescripNote), v))
	})
}

// PrescripNoteEqualFold applies the EqualFold predicate on the "Prescrip_Note" field.
func PrescripNoteEqualFold(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrescripNote), v))
	})
}

// PrescripNoteContainsFold applies the ContainsFold predicate on the "Prescrip_Note" field.
func PrescripNoteContainsFold(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrescripNote), v))
	})
}

// PrescripDateTimeEQ applies the EQ predicate on the "Prescrip_DateTime" field.
func PrescripDateTimeEQ(v time.Time) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrescripDateTime), v))
	})
}

// PrescripDateTimeNEQ applies the NEQ predicate on the "Prescrip_DateTime" field.
func PrescripDateTimeNEQ(v time.Time) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrescripDateTime), v))
	})
}

// PrescripDateTimeIn applies the In predicate on the "Prescrip_DateTime" field.
func PrescripDateTimeIn(vs ...time.Time) predicate.Prescription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Prescription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrescripDateTime), v...))
	})
}

// PrescripDateTimeNotIn applies the NotIn predicate on the "Prescrip_DateTime" field.
func PrescripDateTimeNotIn(vs ...time.Time) predicate.Prescription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Prescription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrescripDateTime), v...))
	})
}

// PrescripDateTimeGT applies the GT predicate on the "Prescrip_DateTime" field.
func PrescripDateTimeGT(v time.Time) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrescripDateTime), v))
	})
}

// PrescripDateTimeGTE applies the GTE predicate on the "Prescrip_DateTime" field.
func PrescripDateTimeGTE(v time.Time) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrescripDateTime), v))
	})
}

// PrescripDateTimeLT applies the LT predicate on the "Prescrip_DateTime" field.
func PrescripDateTimeLT(v time.Time) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrescripDateTime), v))
	})
}

// PrescripDateTimeLTE applies the LTE predicate on the "Prescrip_DateTime" field.
func PrescripDateTimeLTE(v time.Time) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrescripDateTime), v))
	})
}

// HasDoctor applies the HasEdge predicate on the "doctor" edge.
func HasDoctor() predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DoctorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DoctorTable, DoctorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDoctorWith applies the HasEdge predicate on the "doctor" edge with a given conditions (other predicates).
func HasDoctorWith(preds ...predicate.Doctor) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DoctorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DoctorTable, DoctorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNurse applies the HasEdge predicate on the "nurse" edge.
func HasNurse() predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NurseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NurseTable, NurseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNurseWith applies the HasEdge predicate on the "nurse" edge with a given conditions (other predicates).
func HasNurseWith(preds ...predicate.Nurse) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NurseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NurseTable, NurseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDrug applies the HasEdge predicate on the "drug" edge.
func HasDrug() predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DrugTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DrugTable, DrugColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDrugWith applies the HasEdge predicate on the "drug" edge with a given conditions (other predicates).
func HasDrugWith(preds ...predicate.Drug) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DrugInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DrugTable, DrugColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Prescription) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Prescription) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Prescription) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		p(s.Not())
	})
}
