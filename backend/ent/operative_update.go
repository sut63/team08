// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team08/ent/operative"
	"github.com/sut63/team08/ent/operativerecord"
	"github.com/sut63/team08/ent/predicate"
)

// OperativeUpdate is the builder for updating Operative entities.
type OperativeUpdate struct {
	config
	hooks      []Hook
	mutation   *OperativeMutation
	predicates []predicate.Operative
}

// Where adds a new predicate for the builder.
func (ou *OperativeUpdate) Where(ps ...predicate.Operative) *OperativeUpdate {
	ou.predicates = append(ou.predicates, ps...)
	return ou
}

// SetOperativeName sets the operative_Name field.
func (ou *OperativeUpdate) SetOperativeName(s string) *OperativeUpdate {
	ou.mutation.SetOperativeName(s)
	return ou
}

// AddOperativeOperativerecordIDs adds the Operative_Operativerecord edge to Operativerecord by ids.
func (ou *OperativeUpdate) AddOperativeOperativerecordIDs(ids ...int) *OperativeUpdate {
	ou.mutation.AddOperativeOperativerecordIDs(ids...)
	return ou
}

// AddOperativeOperativerecord adds the Operative_Operativerecord edges to Operativerecord.
func (ou *OperativeUpdate) AddOperativeOperativerecord(o ...*Operativerecord) *OperativeUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOperativeOperativerecordIDs(ids...)
}

// Mutation returns the OperativeMutation object of the builder.
func (ou *OperativeUpdate) Mutation() *OperativeMutation {
	return ou.mutation
}

// RemoveOperativeOperativerecordIDs removes the Operative_Operativerecord edge to Operativerecord by ids.
func (ou *OperativeUpdate) RemoveOperativeOperativerecordIDs(ids ...int) *OperativeUpdate {
	ou.mutation.RemoveOperativeOperativerecordIDs(ids...)
	return ou
}

// RemoveOperativeOperativerecord removes Operative_Operativerecord edges to Operativerecord.
func (ou *OperativeUpdate) RemoveOperativeOperativerecord(o ...*Operativerecord) *OperativeUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOperativeOperativerecordIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ou *OperativeUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := ou.mutation.OperativeName(); ok {
		if err := operative.OperativeNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "operative_Name", err: fmt.Errorf("ent: validator failed for field \"operative_Name\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(ou.hooks) == 0 {
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OperativeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OperativeUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OperativeUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OperativeUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OperativeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   operative.Table,
			Columns: operative.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: operative.FieldID,
			},
		},
	}
	if ps := ou.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.OperativeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operative.FieldOperativeName,
		})
	}
	if nodes := ou.mutation.RemovedOperativeOperativerecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operative.OperativeOperativerecordTable,
			Columns: []string{operative.OperativeOperativerecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: operativerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OperativeOperativerecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operative.OperativeOperativerecordTable,
			Columns: []string{operative.OperativeOperativerecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: operativerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operative.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OperativeUpdateOne is the builder for updating a single Operative entity.
type OperativeUpdateOne struct {
	config
	hooks    []Hook
	mutation *OperativeMutation
}

// SetOperativeName sets the operative_Name field.
func (ouo *OperativeUpdateOne) SetOperativeName(s string) *OperativeUpdateOne {
	ouo.mutation.SetOperativeName(s)
	return ouo
}

// AddOperativeOperativerecordIDs adds the Operative_Operativerecord edge to Operativerecord by ids.
func (ouo *OperativeUpdateOne) AddOperativeOperativerecordIDs(ids ...int) *OperativeUpdateOne {
	ouo.mutation.AddOperativeOperativerecordIDs(ids...)
	return ouo
}

// AddOperativeOperativerecord adds the Operative_Operativerecord edges to Operativerecord.
func (ouo *OperativeUpdateOne) AddOperativeOperativerecord(o ...*Operativerecord) *OperativeUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOperativeOperativerecordIDs(ids...)
}

// Mutation returns the OperativeMutation object of the builder.
func (ouo *OperativeUpdateOne) Mutation() *OperativeMutation {
	return ouo.mutation
}

// RemoveOperativeOperativerecordIDs removes the Operative_Operativerecord edge to Operativerecord by ids.
func (ouo *OperativeUpdateOne) RemoveOperativeOperativerecordIDs(ids ...int) *OperativeUpdateOne {
	ouo.mutation.RemoveOperativeOperativerecordIDs(ids...)
	return ouo
}

// RemoveOperativeOperativerecord removes Operative_Operativerecord edges to Operativerecord.
func (ouo *OperativeUpdateOne) RemoveOperativeOperativerecord(o ...*Operativerecord) *OperativeUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOperativeOperativerecordIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ouo *OperativeUpdateOne) Save(ctx context.Context) (*Operative, error) {
	if v, ok := ouo.mutation.OperativeName(); ok {
		if err := operative.OperativeNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "operative_Name", err: fmt.Errorf("ent: validator failed for field \"operative_Name\": %w", err)}
		}
	}

	var (
		err  error
		node *Operative
	)
	if len(ouo.hooks) == 0 {
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OperativeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			mut = ouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OperativeUpdateOne) SaveX(ctx context.Context) *Operative {
	o, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return o
}

// Exec executes the query on the entity.
func (ouo *OperativeUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OperativeUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OperativeUpdateOne) sqlSave(ctx context.Context) (o *Operative, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   operative.Table,
			Columns: operative.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: operative.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Operative.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ouo.mutation.OperativeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operative.FieldOperativeName,
		})
	}
	if nodes := ouo.mutation.RemovedOperativeOperativerecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operative.OperativeOperativerecordTable,
			Columns: []string{operative.OperativeOperativerecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: operativerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OperativeOperativerecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operative.OperativeOperativerecordTable,
			Columns: []string{operative.OperativeOperativerecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: operativerecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	o = &Operative{config: ouo.config}
	_spec.Assign = o.assignValues
	_spec.ScanValues = o.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operative.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return o, nil
}
