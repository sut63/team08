// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team08/ent/certificate"
	"github.com/sut63/team08/ent/coveredperson"
	"github.com/sut63/team08/ent/fund"
	"github.com/sut63/team08/ent/patient"
	"github.com/sut63/team08/ent/predicate"
	"github.com/sut63/team08/ent/schemetype"
)

// CoveredPersonUpdate is the builder for updating CoveredPerson entities.
type CoveredPersonUpdate struct {
	config
	hooks      []Hook
	mutation   *CoveredPersonMutation
	predicates []predicate.CoveredPerson
}

// Where adds a new predicate for the builder.
func (cpu *CoveredPersonUpdate) Where(ps ...predicate.CoveredPerson) *CoveredPersonUpdate {
	cpu.predicates = append(cpu.predicates, ps...)
	return cpu
}

// SetPatientID sets the Patient edge to Patient by id.
func (cpu *CoveredPersonUpdate) SetPatientID(id int) *CoveredPersonUpdate {
	cpu.mutation.SetPatientID(id)
	return cpu
}

// SetNillablePatientID sets the Patient edge to Patient by id if the given value is not nil.
func (cpu *CoveredPersonUpdate) SetNillablePatientID(id *int) *CoveredPersonUpdate {
	if id != nil {
		cpu = cpu.SetPatientID(*id)
	}
	return cpu
}

// SetPatient sets the Patient edge to Patient.
func (cpu *CoveredPersonUpdate) SetPatient(p *Patient) *CoveredPersonUpdate {
	return cpu.SetPatientID(p.ID)
}

// SetSchemeTypeID sets the SchemeType edge to SchemeType by id.
func (cpu *CoveredPersonUpdate) SetSchemeTypeID(id int) *CoveredPersonUpdate {
	cpu.mutation.SetSchemeTypeID(id)
	return cpu
}

// SetNillableSchemeTypeID sets the SchemeType edge to SchemeType by id if the given value is not nil.
func (cpu *CoveredPersonUpdate) SetNillableSchemeTypeID(id *int) *CoveredPersonUpdate {
	if id != nil {
		cpu = cpu.SetSchemeTypeID(*id)
	}
	return cpu
}

// SetSchemeType sets the SchemeType edge to SchemeType.
func (cpu *CoveredPersonUpdate) SetSchemeType(s *SchemeType) *CoveredPersonUpdate {
	return cpu.SetSchemeTypeID(s.ID)
}

// SetFundID sets the Fund edge to Fund by id.
func (cpu *CoveredPersonUpdate) SetFundID(id int) *CoveredPersonUpdate {
	cpu.mutation.SetFundID(id)
	return cpu
}

// SetNillableFundID sets the Fund edge to Fund by id if the given value is not nil.
func (cpu *CoveredPersonUpdate) SetNillableFundID(id *int) *CoveredPersonUpdate {
	if id != nil {
		cpu = cpu.SetFundID(*id)
	}
	return cpu
}

// SetFund sets the Fund edge to Fund.
func (cpu *CoveredPersonUpdate) SetFund(f *Fund) *CoveredPersonUpdate {
	return cpu.SetFundID(f.ID)
}

// SetCertificateID sets the Certificate edge to Certificate by id.
func (cpu *CoveredPersonUpdate) SetCertificateID(id int) *CoveredPersonUpdate {
	cpu.mutation.SetCertificateID(id)
	return cpu
}

// SetNillableCertificateID sets the Certificate edge to Certificate by id if the given value is not nil.
func (cpu *CoveredPersonUpdate) SetNillableCertificateID(id *int) *CoveredPersonUpdate {
	if id != nil {
		cpu = cpu.SetCertificateID(*id)
	}
	return cpu
}

// SetCertificate sets the Certificate edge to Certificate.
func (cpu *CoveredPersonUpdate) SetCertificate(c *Certificate) *CoveredPersonUpdate {
	return cpu.SetCertificateID(c.ID)
}

// Mutation returns the CoveredPersonMutation object of the builder.
func (cpu *CoveredPersonUpdate) Mutation() *CoveredPersonMutation {
	return cpu.mutation
}

// ClearPatient clears the Patient edge to Patient.
func (cpu *CoveredPersonUpdate) ClearPatient() *CoveredPersonUpdate {
	cpu.mutation.ClearPatient()
	return cpu
}

// ClearSchemeType clears the SchemeType edge to SchemeType.
func (cpu *CoveredPersonUpdate) ClearSchemeType() *CoveredPersonUpdate {
	cpu.mutation.ClearSchemeType()
	return cpu
}

// ClearFund clears the Fund edge to Fund.
func (cpu *CoveredPersonUpdate) ClearFund() *CoveredPersonUpdate {
	cpu.mutation.ClearFund()
	return cpu
}

// ClearCertificate clears the Certificate edge to Certificate.
func (cpu *CoveredPersonUpdate) ClearCertificate() *CoveredPersonUpdate {
	cpu.mutation.ClearCertificate()
	return cpu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cpu *CoveredPersonUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(cpu.hooks) == 0 {
		affected, err = cpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoveredPersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cpu.mutation = mutation
			affected, err = cpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cpu.hooks) - 1; i >= 0; i-- {
			mut = cpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cpu *CoveredPersonUpdate) SaveX(ctx context.Context) int {
	affected, err := cpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpu *CoveredPersonUpdate) Exec(ctx context.Context) error {
	_, err := cpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpu *CoveredPersonUpdate) ExecX(ctx context.Context) {
	if err := cpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cpu *CoveredPersonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coveredperson.Table,
			Columns: coveredperson.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: coveredperson.FieldID,
			},
		},
	}
	if ps := cpu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cpu.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.PatientTable,
			Columns: []string{coveredperson.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.PatientTable,
			Columns: []string{coveredperson.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpu.mutation.SchemeTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.SchemeTypeTable,
			Columns: []string{coveredperson.SchemeTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schemetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.SchemeTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.SchemeTypeTable,
			Columns: []string{coveredperson.SchemeTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schemetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpu.mutation.FundCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.FundTable,
			Columns: []string{coveredperson.FundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fund.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.FundIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.FundTable,
			Columns: []string{coveredperson.FundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fund.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpu.mutation.CertificateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.CertificateTable,
			Columns: []string{coveredperson.CertificateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: certificate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.CertificateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.CertificateTable,
			Columns: []string{coveredperson.CertificateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: certificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coveredperson.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CoveredPersonUpdateOne is the builder for updating a single CoveredPerson entity.
type CoveredPersonUpdateOne struct {
	config
	hooks    []Hook
	mutation *CoveredPersonMutation
}

// SetPatientID sets the Patient edge to Patient by id.
func (cpuo *CoveredPersonUpdateOne) SetPatientID(id int) *CoveredPersonUpdateOne {
	cpuo.mutation.SetPatientID(id)
	return cpuo
}

// SetNillablePatientID sets the Patient edge to Patient by id if the given value is not nil.
func (cpuo *CoveredPersonUpdateOne) SetNillablePatientID(id *int) *CoveredPersonUpdateOne {
	if id != nil {
		cpuo = cpuo.SetPatientID(*id)
	}
	return cpuo
}

// SetPatient sets the Patient edge to Patient.
func (cpuo *CoveredPersonUpdateOne) SetPatient(p *Patient) *CoveredPersonUpdateOne {
	return cpuo.SetPatientID(p.ID)
}

// SetSchemeTypeID sets the SchemeType edge to SchemeType by id.
func (cpuo *CoveredPersonUpdateOne) SetSchemeTypeID(id int) *CoveredPersonUpdateOne {
	cpuo.mutation.SetSchemeTypeID(id)
	return cpuo
}

// SetNillableSchemeTypeID sets the SchemeType edge to SchemeType by id if the given value is not nil.
func (cpuo *CoveredPersonUpdateOne) SetNillableSchemeTypeID(id *int) *CoveredPersonUpdateOne {
	if id != nil {
		cpuo = cpuo.SetSchemeTypeID(*id)
	}
	return cpuo
}

// SetSchemeType sets the SchemeType edge to SchemeType.
func (cpuo *CoveredPersonUpdateOne) SetSchemeType(s *SchemeType) *CoveredPersonUpdateOne {
	return cpuo.SetSchemeTypeID(s.ID)
}

// SetFundID sets the Fund edge to Fund by id.
func (cpuo *CoveredPersonUpdateOne) SetFundID(id int) *CoveredPersonUpdateOne {
	cpuo.mutation.SetFundID(id)
	return cpuo
}

// SetNillableFundID sets the Fund edge to Fund by id if the given value is not nil.
func (cpuo *CoveredPersonUpdateOne) SetNillableFundID(id *int) *CoveredPersonUpdateOne {
	if id != nil {
		cpuo = cpuo.SetFundID(*id)
	}
	return cpuo
}

// SetFund sets the Fund edge to Fund.
func (cpuo *CoveredPersonUpdateOne) SetFund(f *Fund) *CoveredPersonUpdateOne {
	return cpuo.SetFundID(f.ID)
}

// SetCertificateID sets the Certificate edge to Certificate by id.
func (cpuo *CoveredPersonUpdateOne) SetCertificateID(id int) *CoveredPersonUpdateOne {
	cpuo.mutation.SetCertificateID(id)
	return cpuo
}

// SetNillableCertificateID sets the Certificate edge to Certificate by id if the given value is not nil.
func (cpuo *CoveredPersonUpdateOne) SetNillableCertificateID(id *int) *CoveredPersonUpdateOne {
	if id != nil {
		cpuo = cpuo.SetCertificateID(*id)
	}
	return cpuo
}

// SetCertificate sets the Certificate edge to Certificate.
func (cpuo *CoveredPersonUpdateOne) SetCertificate(c *Certificate) *CoveredPersonUpdateOne {
	return cpuo.SetCertificateID(c.ID)
}

// Mutation returns the CoveredPersonMutation object of the builder.
func (cpuo *CoveredPersonUpdateOne) Mutation() *CoveredPersonMutation {
	return cpuo.mutation
}

// ClearPatient clears the Patient edge to Patient.
func (cpuo *CoveredPersonUpdateOne) ClearPatient() *CoveredPersonUpdateOne {
	cpuo.mutation.ClearPatient()
	return cpuo
}

// ClearSchemeType clears the SchemeType edge to SchemeType.
func (cpuo *CoveredPersonUpdateOne) ClearSchemeType() *CoveredPersonUpdateOne {
	cpuo.mutation.ClearSchemeType()
	return cpuo
}

// ClearFund clears the Fund edge to Fund.
func (cpuo *CoveredPersonUpdateOne) ClearFund() *CoveredPersonUpdateOne {
	cpuo.mutation.ClearFund()
	return cpuo
}

// ClearCertificate clears the Certificate edge to Certificate.
func (cpuo *CoveredPersonUpdateOne) ClearCertificate() *CoveredPersonUpdateOne {
	cpuo.mutation.ClearCertificate()
	return cpuo
}

// Save executes the query and returns the updated entity.
func (cpuo *CoveredPersonUpdateOne) Save(ctx context.Context) (*CoveredPerson, error) {

	var (
		err  error
		node *CoveredPerson
	)
	if len(cpuo.hooks) == 0 {
		node, err = cpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoveredPersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cpuo.mutation = mutation
			node, err = cpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cpuo.hooks) - 1; i >= 0; i-- {
			mut = cpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cpuo *CoveredPersonUpdateOne) SaveX(ctx context.Context) *CoveredPerson {
	cp, err := cpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return cp
}

// Exec executes the query on the entity.
func (cpuo *CoveredPersonUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuo *CoveredPersonUpdateOne) ExecX(ctx context.Context) {
	if err := cpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cpuo *CoveredPersonUpdateOne) sqlSave(ctx context.Context) (cp *CoveredPerson, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coveredperson.Table,
			Columns: coveredperson.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: coveredperson.FieldID,
			},
		},
	}
	id, ok := cpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CoveredPerson.ID for update")}
	}
	_spec.Node.ID.Value = id
	if cpuo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.PatientTable,
			Columns: []string{coveredperson.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.PatientTable,
			Columns: []string{coveredperson.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpuo.mutation.SchemeTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.SchemeTypeTable,
			Columns: []string{coveredperson.SchemeTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schemetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.SchemeTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.SchemeTypeTable,
			Columns: []string{coveredperson.SchemeTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schemetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpuo.mutation.FundCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.FundTable,
			Columns: []string{coveredperson.FundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fund.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.FundIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.FundTable,
			Columns: []string{coveredperson.FundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fund.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpuo.mutation.CertificateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.CertificateTable,
			Columns: []string{coveredperson.CertificateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: certificate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.CertificateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.CertificateTable,
			Columns: []string{coveredperson.CertificateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: certificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	cp = &CoveredPerson{config: cpuo.config}
	_spec.Assign = cp.assignValues
	_spec.ScanValues = cp.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coveredperson.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return cp, nil
}
