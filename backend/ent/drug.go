// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team08/ent/drug"
)

// Drug is the model entity for the Drug schema.
type Drug struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DrugName holds the value of the "Drug_Name" field.
	DrugName string `json:"Drug_Name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DrugQuery when eager-loading is set.
	Edges DrugEdges `json:"edges"`
}

// DrugEdges holds the relations/edges for other nodes in the graph.
type DrugEdges struct {
	// DrugPrescription holds the value of the drug_prescription edge.
	DrugPrescription []*Prescription
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DrugPrescriptionOrErr returns the DrugPrescription value or an error if the edge
// was not loaded in eager-loading.
func (e DrugEdges) DrugPrescriptionOrErr() ([]*Prescription, error) {
	if e.loadedTypes[0] {
		return e.DrugPrescription, nil
	}
	return nil, &NotLoadedError{edge: "drug_prescription"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Drug) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Drug_Name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Drug fields.
func (d *Drug) assignValues(values ...interface{}) error {
	if m, n := len(values), len(drug.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Drug_Name", values[0])
	} else if value.Valid {
		d.DrugName = value.String
	}
	return nil
}

// QueryDrugPrescription queries the drug_prescription edge of the Drug.
func (d *Drug) QueryDrugPrescription() *PrescriptionQuery {
	return (&DrugClient{config: d.config}).QueryDrugPrescription(d)
}

// Update returns a builder for updating this Drug.
// Note that, you need to call Drug.Unwrap() before calling this method, if this Drug
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Drug) Update() *DrugUpdateOne {
	return (&DrugClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Drug) Unwrap() *Drug {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Drug is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Drug) String() string {
	var builder strings.Builder
	builder.WriteString("Drug(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", Drug_Name=")
	builder.WriteString(d.DrugName)
	builder.WriteByte(')')
	return builder.String()
}

// Drugs is a parsable slice of Drug.
type Drugs []*Drug

func (d Drugs) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
