// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team08/ent/nurse"
)

// Nurse is the model entity for the Nurse schema.
type Nurse struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// NurseName holds the value of the "nurse_name" field.
	NurseName string `json:"nurse_name,omitempty"`
	// NurseEmail holds the value of the "nurse_email" field.
	NurseEmail string `json:"nurse_email,omitempty"`
	// NursePassword holds the value of the "nurse_password" field.
	NursePassword string `json:"nurse_password,omitempty"`
	// NurseTel holds the value of the "nurse_tel" field.
	NurseTel string `json:"nurse_tel,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NurseQuery when eager-loading is set.
	Edges NurseEdges `json:"edges"`
}

// NurseEdges holds the relations/edges for other nodes in the graph.
type NurseEdges struct {
	// Fromnurse holds the value of the fromnurse edge.
	Fromnurse []*Rent
	// NursePrescription holds the value of the nurse_prescription edge.
	NursePrescription []*Prescription
	// NurseOperativerecord holds the value of the Nurse_Operativerecord edge.
	NurseOperativerecord []*Operativerecord
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// FromnurseOrErr returns the Fromnurse value or an error if the edge
// was not loaded in eager-loading.
func (e NurseEdges) FromnurseOrErr() ([]*Rent, error) {
	if e.loadedTypes[0] {
		return e.Fromnurse, nil
	}
	return nil, &NotLoadedError{edge: "fromnurse"}
}

// NursePrescriptionOrErr returns the NursePrescription value or an error if the edge
// was not loaded in eager-loading.
func (e NurseEdges) NursePrescriptionOrErr() ([]*Prescription, error) {
	if e.loadedTypes[1] {
		return e.NursePrescription, nil
	}
	return nil, &NotLoadedError{edge: "nurse_prescription"}
}

// NurseOperativerecordOrErr returns the NurseOperativerecord value or an error if the edge
// was not loaded in eager-loading.
func (e NurseEdges) NurseOperativerecordOrErr() ([]*Operativerecord, error) {
	if e.loadedTypes[2] {
		return e.NurseOperativerecord, nil
	}
	return nil, &NotLoadedError{edge: "Nurse_Operativerecord"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Nurse) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // nurse_name
		&sql.NullString{}, // nurse_email
		&sql.NullString{}, // nurse_password
		&sql.NullString{}, // nurse_tel
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Nurse fields.
func (n *Nurse) assignValues(values ...interface{}) error {
	if m, n := len(values), len(nurse.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	n.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field nurse_name", values[0])
	} else if value.Valid {
		n.NurseName = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field nurse_email", values[1])
	} else if value.Valid {
		n.NurseEmail = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field nurse_password", values[2])
	} else if value.Valid {
		n.NursePassword = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field nurse_tel", values[3])
	} else if value.Valid {
		n.NurseTel = value.String
	}
	return nil
}

// QueryFromnurse queries the fromnurse edge of the Nurse.
func (n *Nurse) QueryFromnurse() *RentQuery {
	return (&NurseClient{config: n.config}).QueryFromnurse(n)
}

// QueryNursePrescription queries the nurse_prescription edge of the Nurse.
func (n *Nurse) QueryNursePrescription() *PrescriptionQuery {
	return (&NurseClient{config: n.config}).QueryNursePrescription(n)
}

// QueryNurseOperativerecord queries the Nurse_Operativerecord edge of the Nurse.
func (n *Nurse) QueryNurseOperativerecord() *OperativerecordQuery {
	return (&NurseClient{config: n.config}).QueryNurseOperativerecord(n)
}

// Update returns a builder for updating this Nurse.
// Note that, you need to call Nurse.Unwrap() before calling this method, if this Nurse
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Nurse) Update() *NurseUpdateOne {
	return (&NurseClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (n *Nurse) Unwrap() *Nurse {
	tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Nurse is not a transactional entity")
	}
	n.config.driver = tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Nurse) String() string {
	var builder strings.Builder
	builder.WriteString("Nurse(")
	builder.WriteString(fmt.Sprintf("id=%v", n.ID))
	builder.WriteString(", nurse_name=")
	builder.WriteString(n.NurseName)
	builder.WriteString(", nurse_email=")
	builder.WriteString(n.NurseEmail)
	builder.WriteString(", nurse_password=")
	builder.WriteString(n.NursePassword)
	builder.WriteString(", nurse_tel=")
	builder.WriteString(n.NurseTel)
	builder.WriteByte(')')
	return builder.String()
}

// Nurses is a parsable slice of Nurse.
type Nurses []*Nurse

func (n Nurses) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
