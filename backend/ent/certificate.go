// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team08/ent/certificate"
)

// Certificate is the model entity for the Certificate schema.
type Certificate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CertificateName holds the value of the "Certificate_Name" field.
	CertificateName string `json:"Certificate_Name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CertificateQuery when eager-loading is set.
	Edges CertificateEdges `json:"edges"`
}

// CertificateEdges holds the relations/edges for other nodes in the graph.
type CertificateEdges struct {
	// CertificateCoveredPerson holds the value of the Certificate_CoveredPerson edge.
	CertificateCoveredPerson []*CoveredPerson
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CertificateCoveredPersonOrErr returns the CertificateCoveredPerson value or an error if the edge
// was not loaded in eager-loading.
func (e CertificateEdges) CertificateCoveredPersonOrErr() ([]*CoveredPerson, error) {
	if e.loadedTypes[0] {
		return e.CertificateCoveredPerson, nil
	}
	return nil, &NotLoadedError{edge: "Certificate_CoveredPerson"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Certificate) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Certificate_Name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Certificate fields.
func (c *Certificate) assignValues(values ...interface{}) error {
	if m, n := len(values), len(certificate.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Certificate_Name", values[0])
	} else if value.Valid {
		c.CertificateName = value.String
	}
	return nil
}

// QueryCertificateCoveredPerson queries the Certificate_CoveredPerson edge of the Certificate.
func (c *Certificate) QueryCertificateCoveredPerson() *CoveredPersonQuery {
	return (&CertificateClient{config: c.config}).QueryCertificateCoveredPerson(c)
}

// Update returns a builder for updating this Certificate.
// Note that, you need to call Certificate.Unwrap() before calling this method, if this Certificate
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Certificate) Update() *CertificateUpdateOne {
	return (&CertificateClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Certificate) Unwrap() *Certificate {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Certificate is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Certificate) String() string {
	var builder strings.Builder
	builder.WriteString("Certificate(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", Certificate_Name=")
	builder.WriteString(c.CertificateName)
	builder.WriteByte(')')
	return builder.String()
}

// Certificates is a parsable slice of Certificate.
type Certificates []*Certificate

func (c Certificates) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
