// Code generated by entc, DO NOT EDIT.

package privacy

import (
	"context"
	"errors"
	"fmt"

	"github.com/sut63/team08/ent"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with an allow decision.
	Allow = errors.New("ent/privacy: allow rule")

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with an deny decision.
	Deny = errors.New("ent/privacy: deny rule")

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = errors.New("ent/privacy: skip rule")
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

type decisionCtxKey struct{}

// DecisionContext creates a decision context.
func DecisionContext(parent context.Context, decision error) context.Context {
	if decision == nil || errors.Is(decision, Skip) {
		return parent
	}
	return context.WithValue(parent, decisionCtxKey{}, decision)
}

func decisionFromContext(ctx context.Context) (error, bool) {
	decision, ok := ctx.Value(decisionCtxKey{}).(error)
	if ok && errors.Is(decision, Allow) {
		decision = nil
	}
	return decision, ok
}

type (
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy []QueryRule

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule interface {
		EvalQuery(context.Context, ent.Query) error
	}
)

// EvalQuery evaluates a query against a query policy.
func (policy QueryPolicy) EvalQuery(ctx context.Context, q ent.Query) error {
	if decision, ok := decisionFromContext(ctx); ok {
		return decision
	}
	for _, rule := range policy {
		switch decision := rule.EvalQuery(ctx, q); {
		case decision == nil || errors.Is(decision, Skip):
		case errors.Is(decision, Allow):
			return nil
		default:
			return decision
		}
	}
	return nil
}

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

type (
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy []MutationRule

	// MutationRule defines the interface deciding whether a
	// mutation is allowed and optionally modify it.
	MutationRule interface {
		EvalMutation(context.Context, ent.Mutation) error
	}
)

// EvalMutation evaluates a mutation against a mutation policy.
func (policy MutationPolicy) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if decision, ok := decisionFromContext(ctx); ok {
		return decision
	}
	for _, rule := range policy {
		switch decision := rule.EvalMutation(ctx, m); {
		case decision == nil || errors.Is(decision, Skip):
		case errors.Is(decision, Allow):
			return nil
		default:
			return decision
		}
	}
	return nil
}

// MutationRuleFunc type is an adapter to allow the use of
// ordinary functions as mutation rules.
type MutationRuleFunc func(context.Context, ent.Mutation) error

// EvalMutation returns f(ctx, m).
func (f MutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return f(ctx, m)
}

// Policy groups query and mutation policies.
type Policy struct {
	Query    QueryPolicy
	Mutation MutationPolicy
}

// EvalQuery forwards evaluation to query policy.
func (policy Policy) EvalQuery(ctx context.Context, q ent.Query) error {
	return policy.Query.EvalQuery(ctx, q)
}

// EvalMutation forwards evaluation to mutation policy.
func (policy Policy) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return policy.Mutation.EvalMutation(ctx, m)
}

// QueryMutationRule is the interface that groups query and mutation rules.
type QueryMutationRule interface {
	QueryRule
	MutationRule
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return fixedDecision{Allow}
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return fixedDecision{Deny}
}

type fixedDecision struct {
	decision error
}

func (f fixedDecision) EvalQuery(context.Context, ent.Query) error {
	return f.decision
}

func (f fixedDecision) EvalMutation(context.Context, ent.Mutation) error {
	return f.decision
}

type contextDecision struct {
	eval func(context.Context) error
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return contextDecision{eval}
}

func (c contextDecision) EvalQuery(ctx context.Context, _ ent.Query) error {
	return c.eval(ctx)
}

func (c contextDecision) EvalMutation(ctx context.Context, _ ent.Mutation) error {
	return c.eval(ctx)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return MutationRuleFunc(func(ctx context.Context, m ent.Mutation) error {
		if m.Op().Is(op) {
			return rule.EvalMutation(ctx, m)
		}
		return Skip
	})
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The BloodtypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BloodtypeQueryRuleFunc func(context.Context, *ent.BloodtypeQuery) error

// EvalQuery return f(ctx, q).
func (f BloodtypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BloodtypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BloodtypeQuery", q)
}

// The BloodtypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BloodtypeMutationRuleFunc func(context.Context, *ent.BloodtypeMutation) error

// EvalMutation calls f(ctx, m).
func (f BloodtypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BloodtypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BloodtypeMutation", m)
}

// The CertificateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CertificateQueryRuleFunc func(context.Context, *ent.CertificateQuery) error

// EvalQuery return f(ctx, q).
func (f CertificateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CertificateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CertificateQuery", q)
}

// The CertificateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CertificateMutationRuleFunc func(context.Context, *ent.CertificateMutation) error

// EvalMutation calls f(ctx, m).
func (f CertificateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CertificateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CertificateMutation", m)
}

// The CoveredPersonQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CoveredPersonQueryRuleFunc func(context.Context, *ent.CoveredPersonQuery) error

// EvalQuery return f(ctx, q).
func (f CoveredPersonQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CoveredPersonQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CoveredPersonQuery", q)
}

// The CoveredPersonMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CoveredPersonMutationRuleFunc func(context.Context, *ent.CoveredPersonMutation) error

// EvalMutation calls f(ctx, m).
func (f CoveredPersonMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CoveredPersonMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CoveredPersonMutation", m)
}

// The DepartmentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DepartmentQueryRuleFunc func(context.Context, *ent.DepartmentQuery) error

// EvalQuery return f(ctx, q).
func (f DepartmentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DepartmentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DepartmentQuery", q)
}

// The DepartmentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DepartmentMutationRuleFunc func(context.Context, *ent.DepartmentMutation) error

// EvalMutation calls f(ctx, m).
func (f DepartmentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DepartmentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DepartmentMutation", m)
}

// The DiagnoseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DiagnoseQueryRuleFunc func(context.Context, *ent.DiagnoseQuery) error

// EvalQuery return f(ctx, q).
func (f DiagnoseQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DiagnoseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DiagnoseQuery", q)
}

// The DiagnoseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DiagnoseMutationRuleFunc func(context.Context, *ent.DiagnoseMutation) error

// EvalMutation calls f(ctx, m).
func (f DiagnoseMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DiagnoseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DiagnoseMutation", m)
}

// The DiseaseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DiseaseQueryRuleFunc func(context.Context, *ent.DiseaseQuery) error

// EvalQuery return f(ctx, q).
func (f DiseaseQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DiseaseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DiseaseQuery", q)
}

// The DiseaseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DiseaseMutationRuleFunc func(context.Context, *ent.DiseaseMutation) error

// EvalMutation calls f(ctx, m).
func (f DiseaseMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DiseaseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DiseaseMutation", m)
}

// The DoctorQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DoctorQueryRuleFunc func(context.Context, *ent.DoctorQuery) error

// EvalQuery return f(ctx, q).
func (f DoctorQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DoctorQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DoctorQuery", q)
}

// The DoctorMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DoctorMutationRuleFunc func(context.Context, *ent.DoctorMutation) error

// EvalMutation calls f(ctx, m).
func (f DoctorMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DoctorMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DoctorMutation", m)
}

// The DrugQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DrugQueryRuleFunc func(context.Context, *ent.DrugQuery) error

// EvalQuery return f(ctx, q).
func (f DrugQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DrugQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DrugQuery", q)
}

// The DrugMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DrugMutationRuleFunc func(context.Context, *ent.DrugMutation) error

// EvalMutation calls f(ctx, m).
func (f DrugMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DrugMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DrugMutation", m)
}

// The ExaminationroomQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ExaminationroomQueryRuleFunc func(context.Context, *ent.ExaminationroomQuery) error

// EvalQuery return f(ctx, q).
func (f ExaminationroomQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ExaminationroomQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ExaminationroomQuery", q)
}

// The ExaminationroomMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ExaminationroomMutationRuleFunc func(context.Context, *ent.ExaminationroomMutation) error

// EvalMutation calls f(ctx, m).
func (f ExaminationroomMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ExaminationroomMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ExaminationroomMutation", m)
}

// The FundQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FundQueryRuleFunc func(context.Context, *ent.FundQuery) error

// EvalQuery return f(ctx, q).
func (f FundQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FundQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FundQuery", q)
}

// The FundMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FundMutationRuleFunc func(context.Context, *ent.FundMutation) error

// EvalMutation calls f(ctx, m).
func (f FundMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FundMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FundMutation", m)
}

// The GenderQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GenderQueryRuleFunc func(context.Context, *ent.GenderQuery) error

// EvalQuery return f(ctx, q).
func (f GenderQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.GenderQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.GenderQuery", q)
}

// The GenderMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GenderMutationRuleFunc func(context.Context, *ent.GenderMutation) error

// EvalMutation calls f(ctx, m).
func (f GenderMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.GenderMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.GenderMutation", m)
}

// The MedicalQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MedicalQueryRuleFunc func(context.Context, *ent.MedicalQuery) error

// EvalQuery return f(ctx, q).
func (f MedicalQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MedicalQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.MedicalQuery", q)
}

// The MedicalMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MedicalMutationRuleFunc func(context.Context, *ent.MedicalMutation) error

// EvalMutation calls f(ctx, m).
func (f MedicalMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.MedicalMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.MedicalMutation", m)
}

// The NurseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type NurseQueryRuleFunc func(context.Context, *ent.NurseQuery) error

// EvalQuery return f(ctx, q).
func (f NurseQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.NurseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.NurseQuery", q)
}

// The NurseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type NurseMutationRuleFunc func(context.Context, *ent.NurseMutation) error

// EvalMutation calls f(ctx, m).
func (f NurseMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.NurseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.NurseMutation", m)
}

// The OperativeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OperativeQueryRuleFunc func(context.Context, *ent.OperativeQuery) error

// EvalQuery return f(ctx, q).
func (f OperativeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OperativeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OperativeQuery", q)
}

// The OperativeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OperativeMutationRuleFunc func(context.Context, *ent.OperativeMutation) error

// EvalMutation calls f(ctx, m).
func (f OperativeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OperativeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OperativeMutation", m)
}

// The OperativerecordQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OperativerecordQueryRuleFunc func(context.Context, *ent.OperativerecordQuery) error

// EvalQuery return f(ctx, q).
func (f OperativerecordQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OperativerecordQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OperativerecordQuery", q)
}

// The OperativerecordMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OperativerecordMutationRuleFunc func(context.Context, *ent.OperativerecordMutation) error

// EvalMutation calls f(ctx, m).
func (f OperativerecordMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OperativerecordMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OperativerecordMutation", m)
}

// The PatientQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PatientQueryRuleFunc func(context.Context, *ent.PatientQuery) error

// EvalQuery return f(ctx, q).
func (f PatientQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PatientQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PatientQuery", q)
}

// The PatientMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PatientMutationRuleFunc func(context.Context, *ent.PatientMutation) error

// EvalMutation calls f(ctx, m).
func (f PatientMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PatientMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PatientMutation", m)
}

// The PrefixQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PrefixQueryRuleFunc func(context.Context, *ent.PrefixQuery) error

// EvalQuery return f(ctx, q).
func (f PrefixQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PrefixQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PrefixQuery", q)
}

// The PrefixMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PrefixMutationRuleFunc func(context.Context, *ent.PrefixMutation) error

// EvalMutation calls f(ctx, m).
func (f PrefixMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PrefixMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PrefixMutation", m)
}

// The PrescriptionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PrescriptionQueryRuleFunc func(context.Context, *ent.PrescriptionQuery) error

// EvalQuery return f(ctx, q).
func (f PrescriptionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PrescriptionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PrescriptionQuery", q)
}

// The PrescriptionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PrescriptionMutationRuleFunc func(context.Context, *ent.PrescriptionMutation) error

// EvalMutation calls f(ctx, m).
func (f PrescriptionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PrescriptionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PrescriptionMutation", m)
}

// The RentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RentQueryRuleFunc func(context.Context, *ent.RentQuery) error

// EvalQuery return f(ctx, q).
func (f RentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RentQuery", q)
}

// The RentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RentMutationRuleFunc func(context.Context, *ent.RentMutation) error

// EvalMutation calls f(ctx, m).
func (f RentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RentMutation", m)
}

// The RoomQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RoomQueryRuleFunc func(context.Context, *ent.RoomQuery) error

// EvalQuery return f(ctx, q).
func (f RoomQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoomQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RoomQuery", q)
}

// The RoomMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RoomMutationRuleFunc func(context.Context, *ent.RoomMutation) error

// EvalMutation calls f(ctx, m).
func (f RoomMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RoomMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RoomMutation", m)
}

// The RoomtypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RoomtypeQueryRuleFunc func(context.Context, *ent.RoomtypeQuery) error

// EvalQuery return f(ctx, q).
func (f RoomtypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoomtypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RoomtypeQuery", q)
}

// The RoomtypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RoomtypeMutationRuleFunc func(context.Context, *ent.RoomtypeMutation) error

// EvalMutation calls f(ctx, m).
func (f RoomtypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RoomtypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RoomtypeMutation", m)
}

// The SchemeTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SchemeTypeQueryRuleFunc func(context.Context, *ent.SchemeTypeQuery) error

// EvalQuery return f(ctx, q).
func (f SchemeTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SchemeTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SchemeTypeQuery", q)
}

// The SchemeTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SchemeTypeMutationRuleFunc func(context.Context, *ent.SchemeTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f SchemeTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SchemeTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SchemeTypeMutation", m)
}

// The ToolQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ToolQueryRuleFunc func(context.Context, *ent.ToolQuery) error

// EvalQuery return f(ctx, q).
func (f ToolQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ToolQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ToolQuery", q)
}

// The ToolMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ToolMutationRuleFunc func(context.Context, *ent.ToolMutation) error

// EvalMutation calls f(ctx, m).
func (f ToolMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ToolMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ToolMutation", m)
}
