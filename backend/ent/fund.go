// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team08/ent/fund"
)

// Fund is the model entity for the Fund schema.
type Fund struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FundName holds the value of the "Fund_Name" field.
	FundName string `json:"Fund_Name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FundQuery when eager-loading is set.
	Edges FundEdges `json:"edges"`
}

// FundEdges holds the relations/edges for other nodes in the graph.
type FundEdges struct {
	// FundCoveredPerson holds the value of the Fund_CoveredPerson edge.
	FundCoveredPerson []*CoveredPerson
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FundCoveredPersonOrErr returns the FundCoveredPerson value or an error if the edge
// was not loaded in eager-loading.
func (e FundEdges) FundCoveredPersonOrErr() ([]*CoveredPerson, error) {
	if e.loadedTypes[0] {
		return e.FundCoveredPerson, nil
	}
	return nil, &NotLoadedError{edge: "Fund_CoveredPerson"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Fund) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Fund_Name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Fund fields.
func (f *Fund) assignValues(values ...interface{}) error {
	if m, n := len(values), len(fund.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	f.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Fund_Name", values[0])
	} else if value.Valid {
		f.FundName = value.String
	}
	return nil
}

// QueryFundCoveredPerson queries the Fund_CoveredPerson edge of the Fund.
func (f *Fund) QueryFundCoveredPerson() *CoveredPersonQuery {
	return (&FundClient{config: f.config}).QueryFundCoveredPerson(f)
}

// Update returns a builder for updating this Fund.
// Note that, you need to call Fund.Unwrap() before calling this method, if this Fund
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Fund) Update() *FundUpdateOne {
	return (&FundClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (f *Fund) Unwrap() *Fund {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Fund is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Fund) String() string {
	var builder strings.Builder
	builder.WriteString("Fund(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", Fund_Name=")
	builder.WriteString(f.FundName)
	builder.WriteByte(')')
	return builder.String()
}

// Funds is a parsable slice of Fund.
type Funds []*Fund

func (f Funds) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
