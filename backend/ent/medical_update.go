// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team08/ent/medical"
	"github.com/sut63/team08/ent/predicate"
)

// MedicalUpdate is the builder for updating Medical entities.
type MedicalUpdate struct {
	config
	hooks      []Hook
	mutation   *MedicalMutation
	predicates []predicate.Medical
}

// Where adds a new predicate for the builder.
func (mu *MedicalUpdate) Where(ps ...predicate.Medical) *MedicalUpdate {
	mu.predicates = append(mu.predicates, ps...)
	return mu
}

// SetMedicalName sets the Medical_Name field.
func (mu *MedicalUpdate) SetMedicalName(s string) *MedicalUpdate {
	mu.mutation.SetMedicalName(s)
	return mu
}

// SetMedicalEmail sets the Medical_Email field.
func (mu *MedicalUpdate) SetMedicalEmail(s string) *MedicalUpdate {
	mu.mutation.SetMedicalEmail(s)
	return mu
}

// SetMedicalPassword sets the Medical_Password field.
func (mu *MedicalUpdate) SetMedicalPassword(s string) *MedicalUpdate {
	mu.mutation.SetMedicalPassword(s)
	return mu
}

// SetMedicalTel sets the Medical_Tel field.
func (mu *MedicalUpdate) SetMedicalTel(s string) *MedicalUpdate {
	mu.mutation.SetMedicalTel(s)
	return mu
}

// Mutation returns the MedicalMutation object of the builder.
func (mu *MedicalUpdate) Mutation() *MedicalMutation {
	return mu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mu *MedicalUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := mu.mutation.MedicalName(); ok {
		if err := medical.MedicalNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "Medical_Name", err: fmt.Errorf("ent: validator failed for field \"Medical_Name\": %w", err)}
		}
	}
	if v, ok := mu.mutation.MedicalEmail(); ok {
		if err := medical.MedicalEmailValidator(v); err != nil {
			return 0, &ValidationError{Name: "Medical_Email", err: fmt.Errorf("ent: validator failed for field \"Medical_Email\": %w", err)}
		}
	}
	if v, ok := mu.mutation.MedicalPassword(); ok {
		if err := medical.MedicalPasswordValidator(v); err != nil {
			return 0, &ValidationError{Name: "Medical_Password", err: fmt.Errorf("ent: validator failed for field \"Medical_Password\": %w", err)}
		}
	}
	if v, ok := mu.mutation.MedicalTel(); ok {
		if err := medical.MedicalTelValidator(v); err != nil {
			return 0, &ValidationError{Name: "Medical_Tel", err: fmt.Errorf("ent: validator failed for field \"Medical_Tel\": %w", err)}
		}
	}
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MedicalUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MedicalUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MedicalUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MedicalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   medical.Table,
			Columns: medical.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: medical.FieldID,
			},
		},
	}
	if ps := mu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.MedicalName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medical.FieldMedicalName,
		})
	}
	if value, ok := mu.mutation.MedicalEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medical.FieldMedicalEmail,
		})
	}
	if value, ok := mu.mutation.MedicalPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medical.FieldMedicalPassword,
		})
	}
	if value, ok := mu.mutation.MedicalTel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medical.FieldMedicalTel,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medical.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MedicalUpdateOne is the builder for updating a single Medical entity.
type MedicalUpdateOne struct {
	config
	hooks    []Hook
	mutation *MedicalMutation
}

// SetMedicalName sets the Medical_Name field.
func (muo *MedicalUpdateOne) SetMedicalName(s string) *MedicalUpdateOne {
	muo.mutation.SetMedicalName(s)
	return muo
}

// SetMedicalEmail sets the Medical_Email field.
func (muo *MedicalUpdateOne) SetMedicalEmail(s string) *MedicalUpdateOne {
	muo.mutation.SetMedicalEmail(s)
	return muo
}

// SetMedicalPassword sets the Medical_Password field.
func (muo *MedicalUpdateOne) SetMedicalPassword(s string) *MedicalUpdateOne {
	muo.mutation.SetMedicalPassword(s)
	return muo
}

// SetMedicalTel sets the Medical_Tel field.
func (muo *MedicalUpdateOne) SetMedicalTel(s string) *MedicalUpdateOne {
	muo.mutation.SetMedicalTel(s)
	return muo
}

// Mutation returns the MedicalMutation object of the builder.
func (muo *MedicalUpdateOne) Mutation() *MedicalMutation {
	return muo.mutation
}

// Save executes the query and returns the updated entity.
func (muo *MedicalUpdateOne) Save(ctx context.Context) (*Medical, error) {
	if v, ok := muo.mutation.MedicalName(); ok {
		if err := medical.MedicalNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "Medical_Name", err: fmt.Errorf("ent: validator failed for field \"Medical_Name\": %w", err)}
		}
	}
	if v, ok := muo.mutation.MedicalEmail(); ok {
		if err := medical.MedicalEmailValidator(v); err != nil {
			return nil, &ValidationError{Name: "Medical_Email", err: fmt.Errorf("ent: validator failed for field \"Medical_Email\": %w", err)}
		}
	}
	if v, ok := muo.mutation.MedicalPassword(); ok {
		if err := medical.MedicalPasswordValidator(v); err != nil {
			return nil, &ValidationError{Name: "Medical_Password", err: fmt.Errorf("ent: validator failed for field \"Medical_Password\": %w", err)}
		}
	}
	if v, ok := muo.mutation.MedicalTel(); ok {
		if err := medical.MedicalTelValidator(v); err != nil {
			return nil, &ValidationError{Name: "Medical_Tel", err: fmt.Errorf("ent: validator failed for field \"Medical_Tel\": %w", err)}
		}
	}
	var (
		err  error
		node *Medical
	)
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MedicalUpdateOne) SaveX(ctx context.Context) *Medical {
	m, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return m
}

// Exec executes the query on the entity.
func (muo *MedicalUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MedicalUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MedicalUpdateOne) sqlSave(ctx context.Context) (m *Medical, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   medical.Table,
			Columns: medical.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: medical.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Medical.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := muo.mutation.MedicalName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medical.FieldMedicalName,
		})
	}
	if value, ok := muo.mutation.MedicalEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medical.FieldMedicalEmail,
		})
	}
	if value, ok := muo.mutation.MedicalPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medical.FieldMedicalPassword,
		})
	}
	if value, ok := muo.mutation.MedicalTel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medical.FieldMedicalTel,
		})
	}
	m = &Medical{config: muo.config}
	_spec.Assign = m.assignValues
	_spec.ScanValues = m.scanValues()
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medical.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return m, nil
}
