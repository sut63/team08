// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team08/ent/certificate"
	"github.com/sut63/team08/ent/coveredperson"
	"github.com/sut63/team08/ent/fund"
	"github.com/sut63/team08/ent/medical"
	"github.com/sut63/team08/ent/patient"
	"github.com/sut63/team08/ent/schemetype"
)

// CoveredPersonCreate is the builder for creating a CoveredPerson entity.
type CoveredPersonCreate struct {
	config
	mutation *CoveredPersonMutation
	hooks    []Hook
}

// SetCoveredPersonNumber sets the CoveredPerson_Number field.
func (cpc *CoveredPersonCreate) SetCoveredPersonNumber(s string) *CoveredPersonCreate {
	cpc.mutation.SetCoveredPersonNumber(s)
	return cpc
}

// SetCoveredPersonNote sets the CoveredPerson_Note field.
func (cpc *CoveredPersonCreate) SetCoveredPersonNote(s string) *CoveredPersonCreate {
	cpc.mutation.SetCoveredPersonNote(s)
	return cpc
}

// SetFundTitle sets the Fund_Title field.
func (cpc *CoveredPersonCreate) SetFundTitle(s string) *CoveredPersonCreate {
	cpc.mutation.SetFundTitle(s)
	return cpc
}

// SetPatientID sets the Patient edge to Patient by id.
func (cpc *CoveredPersonCreate) SetPatientID(id int) *CoveredPersonCreate {
	cpc.mutation.SetPatientID(id)
	return cpc
}

// SetNillablePatientID sets the Patient edge to Patient by id if the given value is not nil.
func (cpc *CoveredPersonCreate) SetNillablePatientID(id *int) *CoveredPersonCreate {
	if id != nil {
		cpc = cpc.SetPatientID(*id)
	}
	return cpc
}

// SetPatient sets the Patient edge to Patient.
func (cpc *CoveredPersonCreate) SetPatient(p *Patient) *CoveredPersonCreate {
	return cpc.SetPatientID(p.ID)
}

// SetSchemeTypeID sets the SchemeType edge to SchemeType by id.
func (cpc *CoveredPersonCreate) SetSchemeTypeID(id int) *CoveredPersonCreate {
	cpc.mutation.SetSchemeTypeID(id)
	return cpc
}

// SetNillableSchemeTypeID sets the SchemeType edge to SchemeType by id if the given value is not nil.
func (cpc *CoveredPersonCreate) SetNillableSchemeTypeID(id *int) *CoveredPersonCreate {
	if id != nil {
		cpc = cpc.SetSchemeTypeID(*id)
	}
	return cpc
}

// SetSchemeType sets the SchemeType edge to SchemeType.
func (cpc *CoveredPersonCreate) SetSchemeType(s *SchemeType) *CoveredPersonCreate {
	return cpc.SetSchemeTypeID(s.ID)
}

// SetFundID sets the Fund edge to Fund by id.
func (cpc *CoveredPersonCreate) SetFundID(id int) *CoveredPersonCreate {
	cpc.mutation.SetFundID(id)
	return cpc
}

// SetNillableFundID sets the Fund edge to Fund by id if the given value is not nil.
func (cpc *CoveredPersonCreate) SetNillableFundID(id *int) *CoveredPersonCreate {
	if id != nil {
		cpc = cpc.SetFundID(*id)
	}
	return cpc
}

// SetFund sets the Fund edge to Fund.
func (cpc *CoveredPersonCreate) SetFund(f *Fund) *CoveredPersonCreate {
	return cpc.SetFundID(f.ID)
}

// SetCertificateID sets the Certificate edge to Certificate by id.
func (cpc *CoveredPersonCreate) SetCertificateID(id int) *CoveredPersonCreate {
	cpc.mutation.SetCertificateID(id)
	return cpc
}

// SetNillableCertificateID sets the Certificate edge to Certificate by id if the given value is not nil.
func (cpc *CoveredPersonCreate) SetNillableCertificateID(id *int) *CoveredPersonCreate {
	if id != nil {
		cpc = cpc.SetCertificateID(*id)
	}
	return cpc
}

// SetCertificate sets the Certificate edge to Certificate.
func (cpc *CoveredPersonCreate) SetCertificate(c *Certificate) *CoveredPersonCreate {
	return cpc.SetCertificateID(c.ID)
}

// SetMedicalID sets the Medical edge to Medical by id.
func (cpc *CoveredPersonCreate) SetMedicalID(id int) *CoveredPersonCreate {
	cpc.mutation.SetMedicalID(id)
	return cpc
}

// SetNillableMedicalID sets the Medical edge to Medical by id if the given value is not nil.
func (cpc *CoveredPersonCreate) SetNillableMedicalID(id *int) *CoveredPersonCreate {
	if id != nil {
		cpc = cpc.SetMedicalID(*id)
	}
	return cpc
}

// SetMedical sets the Medical edge to Medical.
func (cpc *CoveredPersonCreate) SetMedical(m *Medical) *CoveredPersonCreate {
	return cpc.SetMedicalID(m.ID)
}

// Mutation returns the CoveredPersonMutation object of the builder.
func (cpc *CoveredPersonCreate) Mutation() *CoveredPersonMutation {
	return cpc.mutation
}

// Save creates the CoveredPerson in the database.
func (cpc *CoveredPersonCreate) Save(ctx context.Context) (*CoveredPerson, error) {
	if _, ok := cpc.mutation.CoveredPersonNumber(); !ok {
		return nil, &ValidationError{Name: "CoveredPerson_Number", err: errors.New("ent: missing required field \"CoveredPerson_Number\"")}
	}
	if v, ok := cpc.mutation.CoveredPersonNumber(); ok {
		if err := coveredperson.CoveredPersonNumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "CoveredPerson_Number", err: fmt.Errorf("ent: validator failed for field \"CoveredPerson_Number\": %w", err)}
		}
	}
	if _, ok := cpc.mutation.CoveredPersonNote(); !ok {
		return nil, &ValidationError{Name: "CoveredPerson_Note", err: errors.New("ent: missing required field \"CoveredPerson_Note\"")}
	}
	if v, ok := cpc.mutation.CoveredPersonNote(); ok {
		if err := coveredperson.CoveredPersonNoteValidator(v); err != nil {
			return nil, &ValidationError{Name: "CoveredPerson_Note", err: fmt.Errorf("ent: validator failed for field \"CoveredPerson_Note\": %w", err)}
		}
	}
	if _, ok := cpc.mutation.FundTitle(); !ok {
		return nil, &ValidationError{Name: "Fund_Title", err: errors.New("ent: missing required field \"Fund_Title\"")}
	}
	if v, ok := cpc.mutation.FundTitle(); ok {
		if err := coveredperson.FundTitleValidator(v); err != nil {
			return nil, &ValidationError{Name: "Fund_Title", err: fmt.Errorf("ent: validator failed for field \"Fund_Title\": %w", err)}
		}
	}
	var (
		err  error
		node *CoveredPerson
	)
	if len(cpc.hooks) == 0 {
		node, err = cpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoveredPersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cpc.mutation = mutation
			node, err = cpc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cpc.hooks) - 1; i >= 0; i-- {
			mut = cpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cpc *CoveredPersonCreate) SaveX(ctx context.Context) *CoveredPerson {
	v, err := cpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cpc *CoveredPersonCreate) sqlSave(ctx context.Context) (*CoveredPerson, error) {
	cp, _spec := cpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	cp.ID = int(id)
	return cp, nil
}

func (cpc *CoveredPersonCreate) createSpec() (*CoveredPerson, *sqlgraph.CreateSpec) {
	var (
		cp    = &CoveredPerson{config: cpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: coveredperson.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: coveredperson.FieldID,
			},
		}
	)
	if value, ok := cpc.mutation.CoveredPersonNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coveredperson.FieldCoveredPersonNumber,
		})
		cp.CoveredPersonNumber = value
	}
	if value, ok := cpc.mutation.CoveredPersonNote(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coveredperson.FieldCoveredPersonNote,
		})
		cp.CoveredPersonNote = value
	}
	if value, ok := cpc.mutation.FundTitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coveredperson.FieldFundTitle,
		})
		cp.FundTitle = value
	}
	if nodes := cpc.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.PatientTable,
			Columns: []string{coveredperson.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.SchemeTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.SchemeTypeTable,
			Columns: []string{coveredperson.SchemeTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schemetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.FundIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.FundTable,
			Columns: []string{coveredperson.FundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fund.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.CertificateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.CertificateTable,
			Columns: []string{coveredperson.CertificateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: certificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.MedicalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coveredperson.MedicalTable,
			Columns: []string{coveredperson.MedicalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medical.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return cp, _spec
}
