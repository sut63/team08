// Code generated by entc, DO NOT EDIT.

package rent

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/sut63/team08/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RentID applies equality check predicate on the "rent_id" field. It's identical to RentIDEQ.
func RentID(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRentID), v))
	})
}

// KinTel applies equality check predicate on the "kin_tel" field. It's identical to KinTelEQ.
func KinTel(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKinTel), v))
	})
}

// KinName applies equality check predicate on the "kin_name" field. It's identical to KinNameEQ.
func KinName(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKinName), v))
	})
}

// AddedTime applies equality check predicate on the "added_time" field. It's identical to AddedTimeEQ.
func AddedTime(v time.Time) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddedTime), v))
	})
}

// RentIDEQ applies the EQ predicate on the "rent_id" field.
func RentIDEQ(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRentID), v))
	})
}

// RentIDNEQ applies the NEQ predicate on the "rent_id" field.
func RentIDNEQ(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRentID), v))
	})
}

// RentIDIn applies the In predicate on the "rent_id" field.
func RentIDIn(vs ...string) predicate.Rent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRentID), v...))
	})
}

// RentIDNotIn applies the NotIn predicate on the "rent_id" field.
func RentIDNotIn(vs ...string) predicate.Rent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRentID), v...))
	})
}

// RentIDGT applies the GT predicate on the "rent_id" field.
func RentIDGT(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRentID), v))
	})
}

// RentIDGTE applies the GTE predicate on the "rent_id" field.
func RentIDGTE(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRentID), v))
	})
}

// RentIDLT applies the LT predicate on the "rent_id" field.
func RentIDLT(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRentID), v))
	})
}

// RentIDLTE applies the LTE predicate on the "rent_id" field.
func RentIDLTE(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRentID), v))
	})
}

// RentIDContains applies the Contains predicate on the "rent_id" field.
func RentIDContains(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRentID), v))
	})
}

// RentIDHasPrefix applies the HasPrefix predicate on the "rent_id" field.
func RentIDHasPrefix(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRentID), v))
	})
}

// RentIDHasSuffix applies the HasSuffix predicate on the "rent_id" field.
func RentIDHasSuffix(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRentID), v))
	})
}

// RentIDEqualFold applies the EqualFold predicate on the "rent_id" field.
func RentIDEqualFold(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRentID), v))
	})
}

// RentIDContainsFold applies the ContainsFold predicate on the "rent_id" field.
func RentIDContainsFold(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRentID), v))
	})
}

// KinTelEQ applies the EQ predicate on the "kin_tel" field.
func KinTelEQ(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKinTel), v))
	})
}

// KinTelNEQ applies the NEQ predicate on the "kin_tel" field.
func KinTelNEQ(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKinTel), v))
	})
}

// KinTelIn applies the In predicate on the "kin_tel" field.
func KinTelIn(vs ...string) predicate.Rent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKinTel), v...))
	})
}

// KinTelNotIn applies the NotIn predicate on the "kin_tel" field.
func KinTelNotIn(vs ...string) predicate.Rent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKinTel), v...))
	})
}

// KinTelGT applies the GT predicate on the "kin_tel" field.
func KinTelGT(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKinTel), v))
	})
}

// KinTelGTE applies the GTE predicate on the "kin_tel" field.
func KinTelGTE(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKinTel), v))
	})
}

// KinTelLT applies the LT predicate on the "kin_tel" field.
func KinTelLT(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKinTel), v))
	})
}

// KinTelLTE applies the LTE predicate on the "kin_tel" field.
func KinTelLTE(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKinTel), v))
	})
}

// KinTelContains applies the Contains predicate on the "kin_tel" field.
func KinTelContains(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKinTel), v))
	})
}

// KinTelHasPrefix applies the HasPrefix predicate on the "kin_tel" field.
func KinTelHasPrefix(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKinTel), v))
	})
}

// KinTelHasSuffix applies the HasSuffix predicate on the "kin_tel" field.
func KinTelHasSuffix(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKinTel), v))
	})
}

// KinTelEqualFold applies the EqualFold predicate on the "kin_tel" field.
func KinTelEqualFold(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKinTel), v))
	})
}

// KinTelContainsFold applies the ContainsFold predicate on the "kin_tel" field.
func KinTelContainsFold(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKinTel), v))
	})
}

// KinNameEQ applies the EQ predicate on the "kin_name" field.
func KinNameEQ(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKinName), v))
	})
}

// KinNameNEQ applies the NEQ predicate on the "kin_name" field.
func KinNameNEQ(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKinName), v))
	})
}

// KinNameIn applies the In predicate on the "kin_name" field.
func KinNameIn(vs ...string) predicate.Rent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKinName), v...))
	})
}

// KinNameNotIn applies the NotIn predicate on the "kin_name" field.
func KinNameNotIn(vs ...string) predicate.Rent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKinName), v...))
	})
}

// KinNameGT applies the GT predicate on the "kin_name" field.
func KinNameGT(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKinName), v))
	})
}

// KinNameGTE applies the GTE predicate on the "kin_name" field.
func KinNameGTE(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKinName), v))
	})
}

// KinNameLT applies the LT predicate on the "kin_name" field.
func KinNameLT(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKinName), v))
	})
}

// KinNameLTE applies the LTE predicate on the "kin_name" field.
func KinNameLTE(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKinName), v))
	})
}

// KinNameContains applies the Contains predicate on the "kin_name" field.
func KinNameContains(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKinName), v))
	})
}

// KinNameHasPrefix applies the HasPrefix predicate on the "kin_name" field.
func KinNameHasPrefix(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKinName), v))
	})
}

// KinNameHasSuffix applies the HasSuffix predicate on the "kin_name" field.
func KinNameHasSuffix(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKinName), v))
	})
}

// KinNameEqualFold applies the EqualFold predicate on the "kin_name" field.
func KinNameEqualFold(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKinName), v))
	})
}

// KinNameContainsFold applies the ContainsFold predicate on the "kin_name" field.
func KinNameContainsFold(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKinName), v))
	})
}

// AddedTimeEQ applies the EQ predicate on the "added_time" field.
func AddedTimeEQ(v time.Time) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddedTime), v))
	})
}

// AddedTimeNEQ applies the NEQ predicate on the "added_time" field.
func AddedTimeNEQ(v time.Time) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddedTime), v))
	})
}

// AddedTimeIn applies the In predicate on the "added_time" field.
func AddedTimeIn(vs ...time.Time) predicate.Rent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddedTime), v...))
	})
}

// AddedTimeNotIn applies the NotIn predicate on the "added_time" field.
func AddedTimeNotIn(vs ...time.Time) predicate.Rent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddedTime), v...))
	})
}

// AddedTimeGT applies the GT predicate on the "added_time" field.
func AddedTimeGT(v time.Time) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddedTime), v))
	})
}

// AddedTimeGTE applies the GTE predicate on the "added_time" field.
func AddedTimeGTE(v time.Time) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddedTime), v))
	})
}

// AddedTimeLT applies the LT predicate on the "added_time" field.
func AddedTimeLT(v time.Time) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddedTime), v))
	})
}

// AddedTimeLTE applies the LTE predicate on the "added_time" field.
func AddedTimeLTE(v time.Time) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddedTime), v))
	})
}

// HasRoom applies the HasEdge predicate on the "room" edge.
func HasRoom() predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoomTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, RoomTable, RoomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomWith applies the HasEdge predicate on the "room" edge with a given conditions (other predicates).
func HasRoomWith(preds ...predicate.Room) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoomInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, RoomTable, RoomColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNurse applies the HasEdge predicate on the "nurse" edge.
func HasNurse() predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NurseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NurseTable, NurseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNurseWith applies the HasEdge predicate on the "nurse" edge with a given conditions (other predicates).
func HasNurseWith(preds ...predicate.Nurse) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NurseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NurseTable, NurseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Rent) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Rent) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Rent) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		p(s.Not())
	})
}
