// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team08/ent/department"
	"github.com/sut63/team08/ent/diagnose"
	"github.com/sut63/team08/ent/disease"
	"github.com/sut63/team08/ent/doctor"
	"github.com/sut63/team08/ent/patient"
	"github.com/sut63/team08/ent/predicate"
)

// DiagnoseUpdate is the builder for updating Diagnose entities.
type DiagnoseUpdate struct {
	config
	hooks      []Hook
	mutation   *DiagnoseMutation
	predicates []predicate.Diagnose
}

// Where adds a new predicate for the builder.
func (du *DiagnoseUpdate) Where(ps ...predicate.Diagnose) *DiagnoseUpdate {
	du.predicates = append(du.predicates, ps...)
	return du
}

// SetDiseaseID sets the disease edge to Disease by id.
func (du *DiagnoseUpdate) SetDiseaseID(id int) *DiagnoseUpdate {
	du.mutation.SetDiseaseID(id)
	return du
}

// SetNillableDiseaseID sets the disease edge to Disease by id if the given value is not nil.
func (du *DiagnoseUpdate) SetNillableDiseaseID(id *int) *DiagnoseUpdate {
	if id != nil {
		du = du.SetDiseaseID(*id)
	}
	return du
}

// SetDisease sets the disease edge to Disease.
func (du *DiagnoseUpdate) SetDisease(d *Disease) *DiagnoseUpdate {
	return du.SetDiseaseID(d.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (du *DiagnoseUpdate) SetDepartmentID(id int) *DiagnoseUpdate {
	du.mutation.SetDepartmentID(id)
	return du
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (du *DiagnoseUpdate) SetNillableDepartmentID(id *int) *DiagnoseUpdate {
	if id != nil {
		du = du.SetDepartmentID(*id)
	}
	return du
}

// SetDepartment sets the department edge to Department.
func (du *DiagnoseUpdate) SetDepartment(d *Department) *DiagnoseUpdate {
	return du.SetDepartmentID(d.ID)
}

// SetPatientID sets the patient edge to Patient by id.
func (du *DiagnoseUpdate) SetPatientID(id int) *DiagnoseUpdate {
	du.mutation.SetPatientID(id)
	return du
}

// SetNillablePatientID sets the patient edge to Patient by id if the given value is not nil.
func (du *DiagnoseUpdate) SetNillablePatientID(id *int) *DiagnoseUpdate {
	if id != nil {
		du = du.SetPatientID(*id)
	}
	return du
}

// SetPatient sets the patient edge to Patient.
func (du *DiagnoseUpdate) SetPatient(p *Patient) *DiagnoseUpdate {
	return du.SetPatientID(p.ID)
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (du *DiagnoseUpdate) SetDoctorID(id int) *DiagnoseUpdate {
	du.mutation.SetDoctorID(id)
	return du
}

// SetNillableDoctorID sets the doctor edge to Doctor by id if the given value is not nil.
func (du *DiagnoseUpdate) SetNillableDoctorID(id *int) *DiagnoseUpdate {
	if id != nil {
		du = du.SetDoctorID(*id)
	}
	return du
}

// SetDoctor sets the doctor edge to Doctor.
func (du *DiagnoseUpdate) SetDoctor(d *Doctor) *DiagnoseUpdate {
	return du.SetDoctorID(d.ID)
}

// Mutation returns the DiagnoseMutation object of the builder.
func (du *DiagnoseUpdate) Mutation() *DiagnoseMutation {
	return du.mutation
}

// ClearDisease clears the disease edge to Disease.
func (du *DiagnoseUpdate) ClearDisease() *DiagnoseUpdate {
	du.mutation.ClearDisease()
	return du
}

// ClearDepartment clears the department edge to Department.
func (du *DiagnoseUpdate) ClearDepartment() *DiagnoseUpdate {
	du.mutation.ClearDepartment()
	return du
}

// ClearPatient clears the patient edge to Patient.
func (du *DiagnoseUpdate) ClearPatient() *DiagnoseUpdate {
	du.mutation.ClearPatient()
	return du
}

// ClearDoctor clears the doctor edge to Doctor.
func (du *DiagnoseUpdate) ClearDoctor() *DiagnoseUpdate {
	du.mutation.ClearDoctor()
	return du
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (du *DiagnoseUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiagnoseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DiagnoseUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DiagnoseUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DiagnoseUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DiagnoseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   diagnose.Table,
			Columns: diagnose.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: diagnose.FieldID,
			},
		},
	}
	if ps := du.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if du.mutation.DiseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnose.DiseaseTable,
			Columns: []string{diagnose.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnose.DiseaseTable,
			Columns: []string{diagnose.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnose.DepartmentTable,
			Columns: []string{diagnose.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnose.DepartmentTable,
			Columns: []string{diagnose.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnose.PatientTable,
			Columns: []string{diagnose.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnose.PatientTable,
			Columns: []string{diagnose.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnose.DoctorTable,
			Columns: []string{diagnose.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnose.DoctorTable,
			Columns: []string{diagnose.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{diagnose.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DiagnoseUpdateOne is the builder for updating a single Diagnose entity.
type DiagnoseUpdateOne struct {
	config
	hooks    []Hook
	mutation *DiagnoseMutation
}

// SetDiseaseID sets the disease edge to Disease by id.
func (duo *DiagnoseUpdateOne) SetDiseaseID(id int) *DiagnoseUpdateOne {
	duo.mutation.SetDiseaseID(id)
	return duo
}

// SetNillableDiseaseID sets the disease edge to Disease by id if the given value is not nil.
func (duo *DiagnoseUpdateOne) SetNillableDiseaseID(id *int) *DiagnoseUpdateOne {
	if id != nil {
		duo = duo.SetDiseaseID(*id)
	}
	return duo
}

// SetDisease sets the disease edge to Disease.
func (duo *DiagnoseUpdateOne) SetDisease(d *Disease) *DiagnoseUpdateOne {
	return duo.SetDiseaseID(d.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (duo *DiagnoseUpdateOne) SetDepartmentID(id int) *DiagnoseUpdateOne {
	duo.mutation.SetDepartmentID(id)
	return duo
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (duo *DiagnoseUpdateOne) SetNillableDepartmentID(id *int) *DiagnoseUpdateOne {
	if id != nil {
		duo = duo.SetDepartmentID(*id)
	}
	return duo
}

// SetDepartment sets the department edge to Department.
func (duo *DiagnoseUpdateOne) SetDepartment(d *Department) *DiagnoseUpdateOne {
	return duo.SetDepartmentID(d.ID)
}

// SetPatientID sets the patient edge to Patient by id.
func (duo *DiagnoseUpdateOne) SetPatientID(id int) *DiagnoseUpdateOne {
	duo.mutation.SetPatientID(id)
	return duo
}

// SetNillablePatientID sets the patient edge to Patient by id if the given value is not nil.
func (duo *DiagnoseUpdateOne) SetNillablePatientID(id *int) *DiagnoseUpdateOne {
	if id != nil {
		duo = duo.SetPatientID(*id)
	}
	return duo
}

// SetPatient sets the patient edge to Patient.
func (duo *DiagnoseUpdateOne) SetPatient(p *Patient) *DiagnoseUpdateOne {
	return duo.SetPatientID(p.ID)
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (duo *DiagnoseUpdateOne) SetDoctorID(id int) *DiagnoseUpdateOne {
	duo.mutation.SetDoctorID(id)
	return duo
}

// SetNillableDoctorID sets the doctor edge to Doctor by id if the given value is not nil.
func (duo *DiagnoseUpdateOne) SetNillableDoctorID(id *int) *DiagnoseUpdateOne {
	if id != nil {
		duo = duo.SetDoctorID(*id)
	}
	return duo
}

// SetDoctor sets the doctor edge to Doctor.
func (duo *DiagnoseUpdateOne) SetDoctor(d *Doctor) *DiagnoseUpdateOne {
	return duo.SetDoctorID(d.ID)
}

// Mutation returns the DiagnoseMutation object of the builder.
func (duo *DiagnoseUpdateOne) Mutation() *DiagnoseMutation {
	return duo.mutation
}

// ClearDisease clears the disease edge to Disease.
func (duo *DiagnoseUpdateOne) ClearDisease() *DiagnoseUpdateOne {
	duo.mutation.ClearDisease()
	return duo
}

// ClearDepartment clears the department edge to Department.
func (duo *DiagnoseUpdateOne) ClearDepartment() *DiagnoseUpdateOne {
	duo.mutation.ClearDepartment()
	return duo
}

// ClearPatient clears the patient edge to Patient.
func (duo *DiagnoseUpdateOne) ClearPatient() *DiagnoseUpdateOne {
	duo.mutation.ClearPatient()
	return duo
}

// ClearDoctor clears the doctor edge to Doctor.
func (duo *DiagnoseUpdateOne) ClearDoctor() *DiagnoseUpdateOne {
	duo.mutation.ClearDoctor()
	return duo
}

// Save executes the query and returns the updated entity.
func (duo *DiagnoseUpdateOne) Save(ctx context.Context) (*Diagnose, error) {

	var (
		err  error
		node *Diagnose
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiagnoseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DiagnoseUpdateOne) SaveX(ctx context.Context) *Diagnose {
	d, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return d
}

// Exec executes the query on the entity.
func (duo *DiagnoseUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DiagnoseUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DiagnoseUpdateOne) sqlSave(ctx context.Context) (d *Diagnose, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   diagnose.Table,
			Columns: diagnose.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: diagnose.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Diagnose.ID for update")}
	}
	_spec.Node.ID.Value = id
	if duo.mutation.DiseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnose.DiseaseTable,
			Columns: []string{diagnose.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnose.DiseaseTable,
			Columns: []string{diagnose.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnose.DepartmentTable,
			Columns: []string{diagnose.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnose.DepartmentTable,
			Columns: []string{diagnose.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnose.PatientTable,
			Columns: []string{diagnose.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnose.PatientTable,
			Columns: []string{diagnose.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnose.DoctorTable,
			Columns: []string{diagnose.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnose.DoctorTable,
			Columns: []string{diagnose.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	d = &Diagnose{config: duo.config}
	_spec.Assign = d.assignValues
	_spec.ScanValues = d.scanValues()
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{diagnose.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return d, nil
}
